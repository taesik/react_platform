[{"C:\\Users\\rlarb\\Desktop\\totalD\\src\\index.tsx":"1","C:\\Users\\rlarb\\Desktop\\totalD\\src\\init-publish.ts":"2","C:\\Users\\rlarb\\Desktop\\totalD\\src\\reportWebVitals.ts":"3","C:\\Users\\rlarb\\Desktop\\totalD\\src\\config\\store.ts":"4","C:\\Users\\rlarb\\Desktop\\totalD\\src\\config\\axios-interceptor.ts":"5","C:\\Users\\rlarb\\Desktop\\totalD\\src\\config\\icon-loader.ts":"6","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\reducers\\axios.ts":"7","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\reducers\\authentication.ts":"8","C:\\Users\\rlarb\\Desktop\\totalD\\src\\app.tsx":"9","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\login.tsx":"12","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\init-page.tsx":"13","C:\\Users\\rlarb\\Desktop\\totalD\\src\\env.ts":"14","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\reducers\\action-type.util.ts":"15","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\layout\\index.tsx":"16","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\error\\error-boundary-route.tsx":"17","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\util\\storage-util.ts":"18","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\main\\main.tsx":"22","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\main\\diagram.reducer.ts":"23","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\reducers\\setup.ts":"24","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\reducers\\prpd.reducer.ts":"25","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\reducers\\3d-prps.reducer.ts":"26","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\alarm\\alarm.reducer.ts":"27","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\history\\setting-history.reducer.ts":"28","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\exam\\test\\test01-value-scope.reducer.ts":"29","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\user\\user.reducer.ts":"30","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\setup\\eqip\\eqip.reducer.ts":"31","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\setup\\pd\\setup-pd.reducer.ts":"32","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\setup\\scbr\\setup-scbr.reducer.ts":"33","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\gis\\spdc\\spdc.reducer.ts":"34","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\gis\\all\\all.reducer.ts":"35","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\oltc-spdc\\oltc-spdc.reducer.ts":"36","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\oltc-ofu\\oltc-ofu.reducer.ts":"37","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\dga\\dga.reducer.ts":"38","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\bushing\\bushing.reducer.ts":"39","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\spdc\\spdc.reducer.ts":"40","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\gis\\spdc\\spdc.reducer.ts":"41","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\all\\all.reducer.ts":"42","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\gis\\scbr\\scbr.reducer.ts":"43","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\mtr\\spdc\\spdc.reducer.ts":"44","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\gis\\all\\all-trend.reducer.ts":"45","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\mtr\\oltc-ofu\\oltc-ofu.reducer.ts":"46","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\mtr\\oltc-spdc\\oltc-spdc.reducer.ts":"47","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\index.tsx":"48","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\alarm\\index.tsx":"49","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\index.tsx":"50","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\exam\\index.tsx":"51","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\index.tsx":"52","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\index.tsx":"53","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\alarm\\alarm-non-recognition-popup.tsx":"54","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\main\\diagram-gis.tsx":"55","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\main\\diagram-mtr.tsx":"56","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\main\\diagram-mtr-table.tsx":"57","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\mtr\\dga\\dga.reducer.ts":"58","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\gis\\scbr\\scbr.reducer.ts":"59","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\mtr\\bushing\\bushing.reducer.ts":"60","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\mtr\\all\\all-trend.reducer.ts":"61","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\mtr\\dga\\reducer.ts":"62","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\gis\\spdc\\reducer.ts":"63","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\gis\\scbr\\reducer.ts":"64","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\mtr\\oltc-ofu\\reducer.ts":"65","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\mtr\\oltc-spdc\\reducer.ts":"66","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\mtr\\spdc\\reducer.ts":"67","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\mtr\\bushing\\reducer.ts":"68","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\popup\\pdlibrary\\pdlibrary.reducer.ts":"69","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\gis\\spdc\\spdc.tsx":"70","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\mtr\\bushing\\bushing.tsx":"71","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\mtr\\all\\all-trend.tsx":"72","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\gis\\all\\all-trend.tsx":"73","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\mtr\\oltc-spdc\\oltc-spdc.tsx":"74","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\mtr\\spdc\\spdc.tsx":"75","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\mtr\\oltc-ofu\\oltc-ofu.tsx":"76","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\alarm\\alarm-list.tsx":"77","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\gis\\scbr\\scbr.tsx":"78","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\bushing\\bushing.tsx":"79","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\gis\\scbr\\scbr.tsx":"80","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\oltc-ofu\\oltc-ofu.tsx":"81","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\oltc-spdc\\oltc-spdc.tsx":"82","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\spdc\\spdc.tsx":"83","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\dga\\dga.tsx":"84","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\gis\\all\\all.tsx":"85","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\gis\\spdc\\spdc.tsx":"86","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\mtr\\dga\\dga.tsx":"87","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\all\\all.tsx":"88","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\history\\setting-history.tsx":"89","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\user\\user-mgmt.tsx":"90","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\setup\\pd\\setup-pd.tsx":"91","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\setup\\scbr\\setup-scbr.tsx":"92","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\setup\\eqip\\setup-mtr.tsx":"93","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\setup\\eqip\\setup-gis.tsx":"94","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\mtr\\dga\\report.tsx":"95","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\gis\\scbr\\report.tsx":"96","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\gis\\spdc\\report.tsx":"97","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\mtr\\bushing\\report.tsx":"98","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\mtr\\spdc\\report.tsx":"99","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\mtr\\oltc-ofu\\report.tsx":"100","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\mtr\\oltc-spdc\\report.tsx":"101","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\setup\\dga\\setup-dga.tsx":"102","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\setup\\oltc\\setup-oltc.tsx":"103","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\setup\\bushing\\setup-bushing.tsx":"104","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\main\\diagram-gis-module.tsx":"105","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\main\\diagram-sensor-popup.tsx":"106","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\exam\\test\\index.tsx":"107","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\exam\\charts\\index.tsx":"108","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\exam\\language\\index.tsx":"109","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\popup\\pdlibrary\\modal-pdlibrary.tsx":"110","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\gis\\all\\all-spdc.tsx":"111","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\gis\\all\\all-scbr.tsx":"112","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\all\\all-bushing.tsx":"113","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\gis\\all\\all-eqip.tsx":"114","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\user\\user-update-list.tsx":"115","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\setup\\eqip\\setup-mtr-table-module.tsx":"116","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\setup\\eqip\\setup-gis-module.tsx":"117","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\trend\\trend-search-filter.tsx":"118","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\status\\status-search-filter.tsx":"119","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\pager\\Pager.tsx":"120","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\control\\select-box.tsx":"121","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\popup\\bushing\\modal-bushingcompare.tsx":"122","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\status\\bushinglist\\satus-bushing-list.tsx":"123","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\popup\\cbevent\\modal-cbdetail.tsx":"124","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\status\\cdlist\\satus-cb-list.tsx":"125","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\popup\\ofudetail\\modal-ofudetail.tsx":"126","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\status\\pdlist\\status-mtr-pd-list.tsx":"127","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\status\\pdlist\\status-oltc-pd-list.tsx":"128","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\status\\ofulist\\satus-oltc-ofu-list.tsx":"129","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\popup\\pdevent\\modal-pdevent.tsx":"130","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\popup\\realtime\\modal-realtime.tsx":"131","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\status\\dgalist\\status-dga-list.tsx":"132","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\chart\\prpd\\prpd-chart-improve.tsx":"133","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\all\\all-oltc-spdc.tsx":"134","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\all\\all-oltc-ofu.tsx":"135","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\all\\all-dga.tsx":"136","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\setup\\eqip\\setup-mtr-position-module.tsx":"137","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\user\\user-list.tsx":"138","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\all\\all-mtr-spdc.tsx":"139","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\all\\all-eqip.tsx":"140","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\exam\\test\\test02-fire-method-parent.tsx":"141","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\exam\\test\\test01.tsx":"142","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\status\\pdlist\\status-pd-list.tsx":"143","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\chart\\highcharts\\hightchart-line-default1.tsx":"144","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\popup\\modal-status-all-prpd.tsx":"145","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\exam\\language\\value-scope\\value-scope.tsx":"146","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\exam\\language\\class-args\\class-args.tsx":"147","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\popup\\pdlibrary\\modal-onlylibrary.tsx":"148","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\popup\\realtime\\realtime-component.tsx":"149","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\chart\\prpd\\prpd-colors.tsx":"150","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\user\\user-modal-add.tsx":"151","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\user\\user-modal-del.tsx":"152","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\user\\user-modal-update.tsx":"153","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\exam\\test\\test02-fire-method-child.tsx":"154","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\exam\\charts\\prps\\index.tsx":"155","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\chart\\prpd\\prpd-chart-component.tsx":"156","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\exam\\test\\test01-value-scope.tsx":"157","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\chart\\prps\\prps-chart-component.tsx":"158","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\chart\\prps\\prps-chart-graph.tsx":"159","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\file\\prpsfile.tsx":"160","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\exam\\charts\\prps\\prps-chart.tsx":"161","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\chart\\prps\\prps-coordinate-plane.tsx":"162","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\chart\\prps\\prps-phase-marker.tsx":"163","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\chart\\prps\\prps-dbm-marker.tsx":"164"},{"size":1491,"mtime":1631873675965,"results":"165","hashOfConfig":"166"},{"size":525,"mtime":1631873675966,"results":"167","hashOfConfig":"166"},{"size":425,"mtime":1631873676007,"results":"168","hashOfConfig":"166"},{"size":1140,"mtime":1631873675804,"results":"169","hashOfConfig":"166"},{"size":1320,"mtime":1631873675750,"results":"170","hashOfConfig":"166"},{"size":2911,"mtime":1631873675857,"results":"171","hashOfConfig":"166"},{"size":1042,"mtime":1631873667575,"results":"172","hashOfConfig":"166"},{"size":4333,"mtime":1631873667574,"results":"173","hashOfConfig":"166"},{"size":1967,"mtime":1631873675749,"results":"174","hashOfConfig":"166"},{"size":1044,"mtime":1631873667617,"results":"175","hashOfConfig":"166"},{"size":4194,"mtime":1631873667571,"results":"176","hashOfConfig":"166"},{"size":3551,"mtime":1631873668619,"results":"177","hashOfConfig":"166"},{"size":5375,"mtime":1631873668623,"results":"178","hashOfConfig":"166"},{"size":310,"mtime":1631873675964,"results":"179","hashOfConfig":"166"},{"size":329,"mtime":1631873667577,"results":"180","hashOfConfig":"166"},{"size":2223,"mtime":1631873667470,"results":"181","hashOfConfig":"166"},{"size":553,"mtime":1631873667616,"results":"182","hashOfConfig":"166"},{"size":1813,"mtime":1631873667589,"results":"183","hashOfConfig":"166"},{"size":7883,"mtime":1631873667570,"results":"184","hashOfConfig":"166"},{"size":11141,"mtime":1631927307802,"results":"185","hashOfConfig":"166"},{"size":5144,"mtime":1631873667464,"results":"186","hashOfConfig":"166"},{"size":8479,"mtime":1631873667640,"results":"187","hashOfConfig":"166"},{"size":3712,"mtime":1631873667643,"results":"188","hashOfConfig":"166"},{"size":2373,"mtime":1631873667576,"results":"189","hashOfConfig":"166"},{"size":1042,"mtime":1631873667573,"results":"190","hashOfConfig":"166"},{"size":1835,"mtime":1631873667572,"results":"191","hashOfConfig":"166"},{"size":4608,"mtime":1631873668000,"results":"192","hashOfConfig":"166"},{"size":1920,"mtime":1631873667955,"results":"193","hashOfConfig":"166"},{"size":880,"mtime":1631873668593,"results":"194","hashOfConfig":"166"},{"size":3842,"mtime":1631873667982,"results":"195","hashOfConfig":"166"},{"size":3188,"mtime":1631873667905,"results":"196","hashOfConfig":"166"},{"size":1793,"mtime":1631873667886,"results":"197","hashOfConfig":"166"},{"size":1845,"mtime":1631873667870,"results":"198","hashOfConfig":"166"},{"size":3428,"mtime":1631873667663,"results":"199","hashOfConfig":"166"},{"size":2410,"mtime":1631873667681,"results":"200","hashOfConfig":"166"},{"size":3537,"mtime":1631873667710,"results":"201","hashOfConfig":"166"},{"size":2125,"mtime":1631873667762,"results":"202","hashOfConfig":"166"},{"size":3634,"mtime":1631873667748,"results":"203","hashOfConfig":"166"},{"size":3703,"mtime":1631873667739,"results":"204","hashOfConfig":"166"},{"size":3454,"mtime":1631873667731,"results":"205","hashOfConfig":"166"},{"size":1743,"mtime":1631873668427,"results":"206","hashOfConfig":"166"},{"size":5081,"mtime":1631873667808,"results":"207","hashOfConfig":"166"},{"size":1806,"mtime":1631873668415,"results":"208","hashOfConfig":"166"},{"size":1744,"mtime":1631873668387,"results":"209","hashOfConfig":"166"},{"size":1453,"mtime":1631873668398,"results":"210","hashOfConfig":"166"},{"size":3108,"mtime":1631873668019,"results":"211","hashOfConfig":"166"},{"size":1763,"mtime":1631873668375,"results":"212","hashOfConfig":"166"},{"size":1661,"mtime":1631873668434,"results":"213","hashOfConfig":"166"},{"size":400,"mtime":1631873668004,"results":"214","hashOfConfig":"166"},{"size":1546,"mtime":1631873667815,"results":"215","hashOfConfig":"166"},{"size":595,"mtime":1631873668588,"results":"216","hashOfConfig":"166"},{"size":1523,"mtime":1631873667954,"results":"217","hashOfConfig":"166"},{"size":1297,"mtime":1631873668525,"results":"218","hashOfConfig":"166"},{"size":5040,"mtime":1631873668001,"results":"219","hashOfConfig":"166"},{"size":2448,"mtime":1631873667639,"results":"220","hashOfConfig":"166"},{"size":3085,"mtime":1631873667638,"results":"221","hashOfConfig":"166"},{"size":1827,"mtime":1631873667637,"results":"222","hashOfConfig":"166"},{"size":1594,"mtime":1631873668356,"results":"223","hashOfConfig":"166"},{"size":4642,"mtime":1631873667689,"results":"224","hashOfConfig":"166"},{"size":1618,"mtime":1631873668345,"results":"225","hashOfConfig":"166"},{"size":1491,"mtime":1631873668330,"results":"226","hashOfConfig":"166"},{"size":1416,"mtime":1631873668478,"results":"227","hashOfConfig":"166"},{"size":1521,"mtime":1631873668458,"results":"228","hashOfConfig":"166"},{"size":1548,"mtime":1631873668445,"results":"229","hashOfConfig":"166"},{"size":1469,"mtime":1631873668499,"results":"230","hashOfConfig":"166"},{"size":1476,"mtime":1631873668509,"results":"231","hashOfConfig":"166"},{"size":1429,"mtime":1631873668515,"results":"232","hashOfConfig":"166"},{"size":1552,"mtime":1631873668468,"results":"233","hashOfConfig":"166"},{"size":4494,"mtime":1631873667090,"results":"234","hashOfConfig":"166"},{"size":14039,"mtime":1631884862064,"results":"235","hashOfConfig":"166"},{"size":12704,"mtime":1631884927722,"results":"236","hashOfConfig":"166"},{"size":8140,"mtime":1631884875629,"results":"237","hashOfConfig":"166"},{"size":9056,"mtime":1631884642290,"results":"238","hashOfConfig":"166"},{"size":13192,"mtime":1631884954632,"results":"239","hashOfConfig":"166"},{"size":13156,"mtime":1631884966200,"results":"240","hashOfConfig":"166"},{"size":14639,"mtime":1631884945369,"results":"241","hashOfConfig":"166"},{"size":14145,"mtime":1631873667997,"results":"242","hashOfConfig":"166"},{"size":20396,"mtime":1631884801065,"results":"243","hashOfConfig":"166"},{"size":4701,"mtime":1631885362279,"results":"244","hashOfConfig":"166"},{"size":4099,"mtime":1631885080945,"results":"245","hashOfConfig":"166"},{"size":3887,"mtime":1631885389195,"results":"246","hashOfConfig":"166"},{"size":6883,"mtime":1631885420739,"results":"247","hashOfConfig":"166"},{"size":6794,"mtime":1631885430209,"results":"248","hashOfConfig":"166"},{"size":15550,"mtime":1631885375948,"results":"249","hashOfConfig":"166"},{"size":2167,"mtime":1631885053168,"results":"250","hashOfConfig":"166"},{"size":6926,"mtime":1631885090206,"results":"251","hashOfConfig":"166"},{"size":11200,"mtime":1631884937471,"results":"252","hashOfConfig":"166"},{"size":3125,"mtime":1631885144628,"results":"253","hashOfConfig":"166"},{"size":10791,"mtime":1631886231515,"results":"254","hashOfConfig":"166"},{"size":1638,"mtime":1631886319462,"results":"255","hashOfConfig":"166"},{"size":15738,"mtime":1631886298707,"results":"256","hashOfConfig":"166"},{"size":15730,"mtime":1631886308397,"results":"257","hashOfConfig":"166"},{"size":2898,"mtime":1631886254434,"results":"258","hashOfConfig":"166"},{"size":4730,"mtime":1631886263431,"results":"259","hashOfConfig":"166"},{"size":8465,"mtime":1631873668477,"results":"260","hashOfConfig":"166"},{"size":5482,"mtime":1631873668444,"results":"261","hashOfConfig":"166"},{"size":9746,"mtime":1631873668454,"results":"262","hashOfConfig":"166"},{"size":7877,"mtime":1631873668468,"results":"263","hashOfConfig":"166"},{"size":9864,"mtime":1631873668518,"results":"264","hashOfConfig":"166"},{"size":7868,"mtime":1631873668498,"results":"265","hashOfConfig":"166"},{"size":9980,"mtime":1631873668508,"results":"266","hashOfConfig":"166"},{"size":27116,"mtime":1631886246193,"results":"267","hashOfConfig":"166"},{"size":57311,"mtime":1631886291770,"results":"268","hashOfConfig":"166"},{"size":23265,"mtime":1631886241188,"results":"269","hashOfConfig":"166"},{"size":3003,"mtime":1631873667644,"results":"270","hashOfConfig":"166"},{"size":5385,"mtime":1631873667642,"results":"271","hashOfConfig":"166"},{"size":530,"mtime":1631873668590,"results":"272","hashOfConfig":"166"},{"size":361,"mtime":1631873668569,"results":"273","hashOfConfig":"166"},{"size":540,"mtime":1631873668609,"results":"274","hashOfConfig":"166"},{"size":15413,"mtime":1631873667088,"results":"275","hashOfConfig":"166"},{"size":5126,"mtime":1631873667677,"results":"276","hashOfConfig":"166"},{"size":3284,"mtime":1631873667679,"results":"277","hashOfConfig":"166"},{"size":6821,"mtime":1631873667802,"results":"278","hashOfConfig":"166"},{"size":8990,"mtime":1631873667678,"results":"279","hashOfConfig":"166"},{"size":3980,"mtime":1631873667985,"results":"280","hashOfConfig":"166"},{"size":5464,"mtime":1631873667908,"results":"281","hashOfConfig":"166"},{"size":6083,"mtime":1631873667910,"results":"282","hashOfConfig":"166"},{"size":7893,"mtime":1631873667430,"results":"283","hashOfConfig":"166"},{"size":8511,"mtime":1631873667384,"results":"284","hashOfConfig":"166"},{"size":1085,"mtime":1631873667442,"results":"285","hashOfConfig":"166"},{"size":4732,"mtime":1631873667341,"results":"286","hashOfConfig":"166"},{"size":6434,"mtime":1631873667207,"results":"287","hashOfConfig":"166"},{"size":9554,"mtime":1631873667377,"results":"288","hashOfConfig":"166"},{"size":10700,"mtime":1631873667172,"results":"289","hashOfConfig":"166"},{"size":6023,"mtime":1631873667421,"results":"290","hashOfConfig":"166"},{"size":8366,"mtime":1631873667190,"results":"291","hashOfConfig":"166"},{"size":10005,"mtime":1631873667350,"results":"292","hashOfConfig":"166"},{"size":10063,"mtime":1631873667353,"results":"293","hashOfConfig":"166"},{"size":6509,"mtime":1631873667399,"results":"294","hashOfConfig":"166"},{"size":10524,"mtime":1631873667140,"results":"295","hashOfConfig":"166"},{"size":2196,"mtime":1631873667113,"results":"296","hashOfConfig":"166"},{"size":5779,"mtime":1631873667388,"results":"297","hashOfConfig":"166"},{"size":21630,"mtime":1631873667308,"results":"298","hashOfConfig":"166"},{"size":4487,"mtime":1631873667807,"results":"299","hashOfConfig":"166"},{"size":3853,"mtime":1631873667806,"results":"300","hashOfConfig":"166"},{"size":4266,"mtime":1631873667804,"results":"301","hashOfConfig":"166"},{"size":7059,"mtime":1631873667906,"results":"302","hashOfConfig":"166"},{"size":6621,"mtime":1631873667979,"results":"303","hashOfConfig":"166"},{"size":4792,"mtime":1631873667805,"results":"304","hashOfConfig":"166"},{"size":8360,"mtime":1631873667801,"results":"305","hashOfConfig":"166"},{"size":1831,"mtime":1631873668592,"results":"306","hashOfConfig":"166"},{"size":810,"mtime":1631873668589,"results":"307","hashOfConfig":"166"},{"size":10005,"mtime":1631873667356,"results":"308","hashOfConfig":"166"},{"size":2630,"mtime":1631873667327,"results":"309","hashOfConfig":"166"},{"size":2008,"mtime":1631873667170,"results":"310","hashOfConfig":"166"},{"size":1970,"mtime":1631873668612,"results":"311","hashOfConfig":"166"},{"size":1484,"mtime":1631873668602,"results":"312","hashOfConfig":"166"},{"size":8189,"mtime":1631873667092,"results":"313","hashOfConfig":"166"},{"size":6811,"mtime":1631873667111,"results":"314","hashOfConfig":"166"},{"size":2521,"mtime":1631873667311,"results":"315","hashOfConfig":"166"},{"size":3717,"mtime":1631873667984,"results":"316","hashOfConfig":"166"},{"size":2049,"mtime":1631873667981,"results":"317","hashOfConfig":"166"},{"size":3867,"mtime":1631873667983,"results":"318","hashOfConfig":"166"},{"size":2543,"mtime":1631873668590,"results":"319","hashOfConfig":"166"},{"size":387,"mtime":1631873668545,"results":"320","hashOfConfig":"166"},{"size":18984,"mtime":1631873667306,"results":"321","hashOfConfig":"166"},{"size":4075,"mtime":1631873668594,"results":"322","hashOfConfig":"166"},{"size":2228,"mtime":1631873667281,"results":"323","hashOfConfig":"166"},{"size":18682,"mtime":1631873667280,"results":"324","hashOfConfig":"166"},{"size":1255,"mtime":1631873667451,"results":"325","hashOfConfig":"166"},{"size":129,"mtime":1631873668543,"results":"326","hashOfConfig":"166"},{"size":1676,"mtime":1631873667282,"results":"327","hashOfConfig":"166"},{"size":1818,"mtime":1631873667284,"results":"328","hashOfConfig":"166"},{"size":2646,"mtime":1631873667283,"results":"329","hashOfConfig":"166"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},"1gkrllq",{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"332"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"332"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"332"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"332"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"332"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"332"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363","usedDeprecatedRules":"332"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"378","messages":"379","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"332"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"332"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"332"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"332"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"332"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395","usedDeprecatedRules":"332"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"402","usedDeprecatedRules":"332"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"332"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"332"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"332"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"332"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"332"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"332"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"429","usedDeprecatedRules":"332"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"432","usedDeprecatedRules":"332"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"435","usedDeprecatedRules":"332"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440","usedDeprecatedRules":"332"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"443","usedDeprecatedRules":"332"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"446","usedDeprecatedRules":"332"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"449","usedDeprecatedRules":"332"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"452","usedDeprecatedRules":"332"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"467","usedDeprecatedRules":"332"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"470","usedDeprecatedRules":"332"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"475","usedDeprecatedRules":"332"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"478","usedDeprecatedRules":"332"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"481","usedDeprecatedRules":"332"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"484","usedDeprecatedRules":"332"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"487","usedDeprecatedRules":"332"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"490","usedDeprecatedRules":"332"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"493","usedDeprecatedRules":"332"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"496","usedDeprecatedRules":"332"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"499","usedDeprecatedRules":"332"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"502","usedDeprecatedRules":"332"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"505","usedDeprecatedRules":"332"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"508","usedDeprecatedRules":"332"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"511","usedDeprecatedRules":"332"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"514","usedDeprecatedRules":"332"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"517","usedDeprecatedRules":"332"},{"filePath":"518","messages":"519","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"520","usedDeprecatedRules":"332"},{"filePath":"521","messages":"522","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"523","usedDeprecatedRules":"332"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"526","usedDeprecatedRules":"332"},{"filePath":"527","messages":"528","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"529","usedDeprecatedRules":"332"},{"filePath":"530","messages":"531","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"532","usedDeprecatedRules":"332"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"535","usedDeprecatedRules":"332"},{"filePath":"536","messages":"537","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"538","usedDeprecatedRules":"332"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"541","usedDeprecatedRules":"332"},{"filePath":"542","messages":"543","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"544","usedDeprecatedRules":"332"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"547","usedDeprecatedRules":"332"},{"filePath":"548","messages":"549","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"550","usedDeprecatedRules":"332"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"553","usedDeprecatedRules":"332"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"556","usedDeprecatedRules":"332"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"559","usedDeprecatedRules":"332"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"562","usedDeprecatedRules":"332"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"565","usedDeprecatedRules":"332"},{"filePath":"566","messages":"567","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"568","usedDeprecatedRules":"332"},{"filePath":"569","messages":"570","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"571","usedDeprecatedRules":"332"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"576","usedDeprecatedRules":"332"},{"filePath":"577","messages":"578","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"579","usedDeprecatedRules":"332"},{"filePath":"580","messages":"581","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"582","usedDeprecatedRules":"332"},{"filePath":"583","messages":"584","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"585","usedDeprecatedRules":"332"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"588","usedDeprecatedRules":"332"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"591","usedDeprecatedRules":"332"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":1,"source":"594","usedDeprecatedRules":"332"},{"filePath":"595","messages":"596","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"597","usedDeprecatedRules":"332"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":1,"source":"600","usedDeprecatedRules":"332"},{"filePath":"601","messages":"602","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"603","usedDeprecatedRules":"332"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":1,"source":"606","usedDeprecatedRules":"332"},{"filePath":"607","messages":"608","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"609","usedDeprecatedRules":"332"},{"filePath":"610","messages":"611","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"612","usedDeprecatedRules":"332"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"615","usedDeprecatedRules":"332"},{"filePath":"616","messages":"617","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"618","usedDeprecatedRules":"332"},{"filePath":"619","messages":"620","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"621","usedDeprecatedRules":"332"},{"filePath":"622","messages":"623","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"624","messages":"625","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"626","messages":"627","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":1,"source":"630","usedDeprecatedRules":"332"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"633","usedDeprecatedRules":"332"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"636","usedDeprecatedRules":"332"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"639","usedDeprecatedRules":"332"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"642","usedDeprecatedRules":"332"},{"filePath":"643","messages":"644","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"645","usedDeprecatedRules":"332"},{"filePath":"646","messages":"647","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"648","usedDeprecatedRules":"332"},{"filePath":"649","messages":"650","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"651","usedDeprecatedRules":"332"},{"filePath":"652","messages":"653","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"654","usedDeprecatedRules":"332"},{"filePath":"655","messages":"656","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"657","usedDeprecatedRules":"332"},{"filePath":"658","messages":"659","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"660","messages":"661","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"662","usedDeprecatedRules":"332"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"665","usedDeprecatedRules":"332"},{"filePath":"666","messages":"667","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"668","usedDeprecatedRules":"332"},{"filePath":"669","messages":"670","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"671","usedDeprecatedRules":"332"},{"filePath":"672","messages":"673","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"674","usedDeprecatedRules":"332"},{"filePath":"675","messages":"676","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"677","usedDeprecatedRules":"332"},{"filePath":"678","messages":"679","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"680","usedDeprecatedRules":"332"},{"filePath":"681","messages":"682","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"683","usedDeprecatedRules":"332"},{"filePath":"684","messages":"685","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"686","usedDeprecatedRules":"332"},{"filePath":"687","messages":"688","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"689","usedDeprecatedRules":"332"},{"filePath":"690","messages":"691","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"692","usedDeprecatedRules":"332"},{"filePath":"693","messages":"694","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"695","usedDeprecatedRules":"332"},{"filePath":"696","messages":"697","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"698","usedDeprecatedRules":"332"},{"filePath":"699","messages":"700","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"701","usedDeprecatedRules":"332"},{"filePath":"702","messages":"703","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"704","usedDeprecatedRules":"332"},{"filePath":"705","messages":"706","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"707","usedDeprecatedRules":"332"},{"filePath":"708","messages":"709","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"710","usedDeprecatedRules":"332"},{"filePath":"711","messages":"712","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"713","usedDeprecatedRules":"332"},{"filePath":"714","messages":"715","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"716","usedDeprecatedRules":"332"},{"filePath":"717","messages":"718","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"719","usedDeprecatedRules":"332"},{"filePath":"720","messages":"721","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"722","usedDeprecatedRules":"332"},{"filePath":"723","messages":"724","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"725","usedDeprecatedRules":"332"},{"filePath":"726","messages":"727","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"728","usedDeprecatedRules":"332"},{"filePath":"729","messages":"730","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"731","messages":"732","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"733","usedDeprecatedRules":"332"},{"filePath":"734","messages":"735","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"736","messages":"737","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"738","usedDeprecatedRules":"332"},{"filePath":"739","messages":"740","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"741","usedDeprecatedRules":"332"},{"filePath":"742","messages":"743","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":2,"source":"744","usedDeprecatedRules":"332"},{"filePath":"745","messages":"746","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"747","messages":"748","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"749","usedDeprecatedRules":"332"},{"filePath":"750","messages":"751","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"752","usedDeprecatedRules":"332"},{"filePath":"753","messages":"754","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"755","usedDeprecatedRules":"332"},{"filePath":"756","messages":"757","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"758","messages":"759","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"760","messages":"761","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"762","usedDeprecatedRules":"332"},{"filePath":"763","messages":"764","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"765","usedDeprecatedRules":"332"},{"filePath":"766","messages":"767","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"768","usedDeprecatedRules":"332"},{"filePath":"769","messages":"770","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"771","usedDeprecatedRules":"332"},{"filePath":"772","messages":"773","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"774","messages":"775","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"776","messages":"777","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"778","messages":"779","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"780","messages":"781","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},"C:\\Users\\rlarb\\Desktop\\totalD\\src\\index.tsx",[],["782","783"],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\init-publish.ts",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\reportWebVitals.ts",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\config\\store.ts",["784","785","786"],"import { createStore, applyMiddleware, compose } from 'redux';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport thunkMiddleware from 'redux-thunk';\nimport reducer, { IRootState } from 'shared/reducers';\nimport errorMiddleware from './error-middleware';\nimport notificationMiddleware from './notification-middleware';\nimport loggerMiddleware from './logger-middleware';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst defaultMiddlewares = [\n  thunkMiddleware,\n  promiseMiddleware,\n  // FIXME - 잘 사용하지 않는 미들웨어 사용중지 (추후 다시 사용여부 검토)\n  // errorMiddleware,\n  // notificationMiddleware,\n  // loadingBarMiddleware(),\n  // loggerMiddleware,\n];\n\nconst composedMiddlewares = middlewares =>\n  process.env.NODE_ENV === 'development'\n    ? compose(applyMiddleware(...defaultMiddlewares, ...middlewares), composeWithDevTools())\n    : compose(applyMiddleware(...defaultMiddlewares, ...middlewares));\n\nconst initialize = (initialState?: IRootState, middlewares = []) => createStore(reducer, initialState, composedMiddlewares(middlewares));\n\nexport default initialize;\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\config\\axios-interceptor.ts",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\config\\icon-loader.ts",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\reducers\\axios.ts",["787"],"\nexport const ACTION_TYPES = {\n  AXIOS_REQUEST: 'axios/AXIOS_REQUEST',\n  AXIOS_RESPONSE: 'axios/AXIOS_RESPONSE',\n}\nconst initRemainAxiosRequest = {\n  remainAxiosRequest: 0,\n}\nexport type AxiosRequestState = Readonly<typeof initRemainAxiosRequest>;\n\n// Reducer\nexport default (state: AxiosRequestState = initRemainAxiosRequest, action): AxiosRequestState => {\n  let remainCount;\n  switch (action.type) {\n    case ACTION_TYPES.AXIOS_REQUEST:\n      remainCount = state.remainAxiosRequest + 1;\n      return {\n        ...state,\n        remainAxiosRequest: remainCount\n      };\n    case ACTION_TYPES.AXIOS_RESPONSE:\n      remainCount = state.remainAxiosRequest - 1;\n      return {\n        ...state,\n        remainAxiosRequest: (remainCount < 0) ? 0 : remainCount\n      }\n    default:\n      return state;\n  }\n}\n\nexport const showLoading = () => async (dispatch) => {\n  await dispatch({\n    type: ACTION_TYPES.AXIOS_REQUEST\n  })\n}\nexport const hideLoading = () => async (dispatch) => {\n  await dispatch({\n    type: ACTION_TYPES.AXIOS_RESPONSE\n  })\n}\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\reducers\\authentication.ts",["788"],"import axios from 'axios';\n\nimport { FAILURE, REQUEST, SUCCESS } from 'shared/reducers/action-type.util';\n\nexport const ACTION_TYPES = {\n  LOGIN: 'authentication/LOGIN',\n  GET_SESSION: 'authentication/GET_SESSION',\n  LOGOUT: 'authentication/LOGOUT',\n  CLEAR_AUTH: 'authentication/CLEAR_AUTH',\n  ERROR_MESSAGE: 'authentication/ERROR_MESSAGE',\n};\n\nconst initialState = {\n  loading: false,\n  isLoginFailed: false,\n  isAuthenticated: false,\n  loginSuccess: false,\n  loginError: false, // Errors returned from server side\n  showModalLogin: false,\n  account: {} as any,\n  errorMessage: (null as unknown) as string, // Errors returned from server side\n  redirectMessage: (null as unknown) as string,\n  sessionHasBeenFetched: false,\n  idToken: (null as unknown) as string,\n  logoutUrl: (null as unknown) as string,\n};\n\nexport type AuthenticationState = Readonly<typeof initialState>;\n\n// Reducer\n\nexport default (state: AuthenticationState = initialState, action): AuthenticationState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.LOGIN):\n    case REQUEST(ACTION_TYPES.GET_SESSION):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.LOGIN):\n      return {\n        ...initialState,\n        errorMessage: action.payload,\n        showModalLogin: true,\n        loginError: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_SESSION):\n      return {\n        ...state,\n        loading: false,\n        isAuthenticated: false,\n        sessionHasBeenFetched: true,\n        showModalLogin: true,\n        errorMessage: action.payload,\n      };\n    case SUCCESS(ACTION_TYPES.LOGIN):\n      return {\n        ...state,\n        isLoginFailed: !action.payload.data,  // 로그인 실패 여부 (로그인 시 API 에서 응답 true|false)\n        loading: false,\n        loginError: false,\n        showModalLogin: false,\n        loginSuccess: true,\n      };\n    case SUCCESS(ACTION_TYPES.LOGOUT):\n      return {\n        ...initialState,\n        showModalLogin: true,\n      };\n    case SUCCESS(ACTION_TYPES.GET_SESSION): {\n      const userData = action.payload.data.data;\n      const isAuthenticated = !!userData.length && userData[0].USER_ID;\n      return {\n        ...state,\n        isAuthenticated,\n        loading: false,\n        sessionHasBeenFetched: true,\n        account: userData.length ? userData[0] : null,\n      };\n    }\n    case ACTION_TYPES.ERROR_MESSAGE:\n      return {\n        ...initialState,\n        showModalLogin: true,\n        redirectMessage: action.message,\n      };\n    case ACTION_TYPES.CLEAR_AUTH:\n      return {\n        ...state,\n        loading: false,\n        showModalLogin: true,\n        isAuthenticated: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const displayAuthError = message => ({ type: ACTION_TYPES.ERROR_MESSAGE, message });\n\nexport const getSession: () => void = () => async (dispatch, getState) => {\n  const data = 'id=admin';\n  await dispatch({\n    type: ACTION_TYPES.GET_SESSION,\n    payload: axios.get('/getLogin_userInfo?' + data),\n    // payload: axios.get('api/account'),\n  });\n\n  // const { account } = getState().authentication;\n  // if (account && account.langKey) {\n  //   const langKey = Storage.session.get('locale', account.langKey);\n  //   await dispatch(setLocale(langKey));\n  // }\n};\n\nexport const login: (username: string, password: string, rememberMe?: boolean) => void = (username, password, rememberMe = false) => async (\n  dispatch,\n  getState\n) => {\n  // const data = `username=${encodeURIComponent(username)}&password=${encodeURIComponent(password)}&remember-me=${rememberMe}&submit=Login`;\n  const data = `id=${encodeURIComponent(username)}&pass=${encodeURIComponent(password)}`;\n  await dispatch({\n    type: ACTION_TYPES.LOGIN,\n    // payload: axios.post('getLogin', data, { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } }),\n    payload: axios.get('getLogin?' + data),\n  });\n  await dispatch(getSession());\n\n};\n\nexport const logout: () => void = () => async dispatch => {\n  await dispatch({\n    type: ACTION_TYPES.LOGOUT,\n    payload: axios.get('getLogout'),\n  });\n\n  // fetch new csrf token\n  dispatch(getSession());\n};\n\nexport const clearAuthentication = messageKey => (dispatch, getState) => {\n  dispatch(displayAuthError(messageKey));\n  dispatch({\n    type: ACTION_TYPES.CLEAR_AUTH,\n  });\n};\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\app.tsx",["789"],"import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect, Switch } from 'react-router-dom';\nimport { IRootState } from 'shared/reducers';\nimport { getSession } from 'shared/reducers/authentication';\nimport { getAllSensorList, getCommonEquipmentList } from './shared/reducers/substation';\nimport ErrorBoundaryRoute from 'shared/error/error-boundary-route';\nimport Login from './views/login';\n\nimport './app.css';\nimport 'assets/css/animate.min.css';\nimport 'assets/css/animation.css';\nimport 'assets/css/daterangepicker.css';\nimport 'assets/css/dd.css';\nimport 'assets/css/dtsel.css';\nimport 'assets/css/general.css';\nimport 'assets/css/selectordie.css';\nimport 'assets/css/sub.css';\nimport 'assets/css/sub-added.css';\nimport Index from './shared/layout';\nimport InitPage from './views/init-page';\n\nexport interface IAppProps extends StateProps, DispatchProps {}\n\nexport const App = (props: IAppProps) => {\n  useEffect(() => {\n    props.getSession();\n    props.getCommonEquipmentList();\n    props.getAllSensorList();\n  }, []);\n\n  return (\n    <>\n      {\n        props.loading ?\n          <InitPage />\n          :\n          <Switch>\n            <ErrorBoundaryRoute path={[\"/main\", \"/status\", \"/trend\", \"/report\", \"/settings\", \"/alarm\", \"/exam\"]} component={Index} />\n            <ErrorBoundaryRoute path=\"/login\" component={Login} />\n            <Redirect from=\"/\" to=\"/main\" />\n          </Switch>\n      }\n    </>\n  );\n}\n\nconst mapStateToProps = ({ authentication }: IRootState) => ({\n  loading: authentication.loading,\n  isAuthenticated: authentication.isAuthenticated,\n  // isAdmin: hasAnyAuthority(authentication.account.authorities, [AUTHORITIES.ADMIN]),\n});\n\nconst mapDispatchToProps = {\n  getSession,\n  getCommonEquipmentList,\n  getAllSensorList,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\error\\error-boundary.tsx",[],["790"],"import axios from 'axios';\n\nimport { REQUEST, SUCCESS, FAILURE } from 'shared/reducers/action-type.util';\nimport { IEquipment } from '../model/equipment.model';\nimport { ISensor } from '../model/sensor.model';\nimport { ISubstation } from '../model/substation.model';\n\nexport const ACTION_TYPES = {\n  GET_COMMON_SUBSTATION: 'substation/GET_COMMON_SUBSTATION',\n  GET_COMMON_EQUIPMENT_LIST: 'substation/GET_COMMON_EQUIPMENT_LIST',\n  GET_COMMON_SENSOR_LIST: 'substation/GET_COMMON_SENSOR_LIST',\n  GET_ALL_SENSOR_LIST: 'substation/GET_ALL_SENSOR_LIST',\n  RESET_SENSOR_LIST: 'substation/RESET_SENSOR_LIST',\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: (null as unknown) as string, // Errors returned from server side\n  substation: null as ISubstation,\n  equipmentList: [] as ReadonlyArray<IEquipment>,\n  sensorList: [] as ReadonlyArray<ISensor>,\n  allSensorList: [] as ReadonlyArray<ISensor>,\n};\n\nexport type EquipmentState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: EquipmentState = initialState, action): EquipmentState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_COMMON_SUBSTATION):\n    case REQUEST(ACTION_TYPES.GET_COMMON_EQUIPMENT_LIST):\n    case REQUEST(ACTION_TYPES.GET_COMMON_SENSOR_LIST):\n    case REQUEST(ACTION_TYPES.GET_ALL_SENSOR_LIST):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_COMMON_SUBSTATION):\n    case FAILURE(ACTION_TYPES.GET_COMMON_EQUIPMENT_LIST):\n    case FAILURE(ACTION_TYPES.GET_COMMON_SENSOR_LIST):\n    case FAILURE(ACTION_TYPES.GET_ALL_SENSOR_LIST):\n      return {\n        ...initialState,\n        errorMessage: action.payload,\n      };\n    case SUCCESS(ACTION_TYPES.GET_COMMON_SUBSTATION):\n      return {\n        ...state,\n        loading: false,\n        substation: action.payload.data.data[0],\n      };\n    case SUCCESS(ACTION_TYPES.GET_COMMON_EQUIPMENT_LIST):\n      return {\n        ...state,\n        loading: false,\n        equipmentList: action.payload.data.data,\n      };\n    case SUCCESS(ACTION_TYPES.GET_COMMON_SENSOR_LIST):\n      return {\n        ...state,\n        loading: false,\n        sensorList: action.payload.data.data,\n      };\n    case SUCCESS(ACTION_TYPES.GET_ALL_SENSOR_LIST):\n      return {\n        ...state,\n        loading: false,\n        allSensorList: action.payload.data.data,\n      };\n    case ACTION_TYPES.RESET_SENSOR_LIST:\n      return {\n        ...state,\n        sensorList: [],\n      };\n    default:\n      return state;\n  }\n};\n\n// Action\n/**\n * 변전소 정보 조회\n * @param callback\n */\nexport const getCommonSubstation: (callback?: Function) => void = (callback) => async (dispatch) => {\n  await dispatch({\n    type: ACTION_TYPES.GET_COMMON_SUBSTATION,\n    payload: axios.get('/GetCommon_substation')\n  })\n  if (callback) callback();\n}\n/**\n * 설비 리스트 조회\n * @param callback\n */\nexport const getCommonEquipmentList: (callback?: Function) => void = (callback) => async (dispatch) => {\n  await dispatch({\n    type: ACTION_TYPES.GET_COMMON_EQUIPMENT_LIST,\n    payload: axios.get('/getCommon_EquipmentList')\n  })\n  if (callback) callback();\n}\n\n/**\n * 센서 리스트 조회\n * @param eqipId 설비ID\n * @param callback\n */\nexport const getCommonSensorList: (eqipId: string, snsrKind?: string, callback?: Function) => void = (eqipId, snsrKind, callback) => async (dispatch) => {\n  if (eqipId) {\n\t\tlet requestUrl = `/getCommon_SensorList?eqipId=${eqipId}`;\n\t\tif( snsrKind )\n\t\t\trequestUrl += `&snsrKind=${snsrKind}`;\n\n    await dispatch({\n      type: ACTION_TYPES.GET_COMMON_SENSOR_LIST,\n      payload: axios.get(requestUrl),\n    })\n  } else {\n    await dispatch(resetSensorList());\n  }\n  if (callback) callback();\n}\n\n/**\n * 전체 센서 리스트 조회\n * @param callback\n */\nexport const getAllSensorList: (callback?: Function) => void = (callback) => async (dispatch) => {\n  await dispatch({\n    type: ACTION_TYPES.GET_ALL_SENSOR_LIST,\n    payload: axios.get(`/getCommon_SensorList?eqipId=0`)\n  })\n  if (callback) callback();\n}\n\n/**\n * 센서 리스트 초기화\n */\nexport const resetSensorList: () => void = () => async (dispatch) => {\n  await dispatch({\n    type: ACTION_TYPES.RESET_SENSOR_LIST\n  })\n}\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\login.tsx",["791","792","793","794","795"],"import React, { useEffect, useState } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport LogoKepcoMain from 'assets/img/logo_kepco_main.svg';\nimport IconLock from 'assets/img/icon_lock.svg';\nimport { IRootState } from '../shared/reducers';\nimport { getSession, login } from '../shared/reducers/authentication';\nimport { connect } from 'react-redux';\nimport { Storage } from '../shared/util/storage-util';\n\nexport interface ILoginProps extends StateProps, DispatchProps, RouteComponentProps {}\n\nexport const Login = (props: ILoginProps) => {\n\n  const [loginInfo, setLoginInfo] = useState({\n    id: '',\n    pass: '',\n    rememberMe: false\n  });\n  const { id, pass, rememberMe } = loginInfo;\n\n  const onChange = e => {\n    const nextLoginInfo = {\n      ...loginInfo,\n      [e.target.name]: e.target.name === 'rememberMe' ? e.target.checked : e.target.value\n    };\n    setLoginInfo(nextLoginInfo);\n  }\n\n  useEffect(() => {\n    let rememberId = Storage.local.get('rememberId') || '';\n    setLoginInfo({\n      ...loginInfo,\n      id: rememberId,\n      rememberMe: !!rememberId,\n    })\n  }, []);\n\n  useEffect(() => {\n    if (props.isAuthenticated) {\n      props.history.push('/main');\n    }\n  }, [props.isAuthenticated]);\n\n  const reqLogin = () => {\n    if (loginInfo.rememberMe) {\n      Storage.local.set('rememberId', loginInfo.id);\n    } else {\n      Storage.local.remove('rememberId');\n    }\n    props.login(id, pass, rememberMe);\n  }\n\n  return (\n    <>\n      <section className=\"login-left\">\n        <h1>KEPCO,<br/>A Smart Energy Creator</h1>\n        <p>종합 예방진단 시스템</p>\n      </section>\n      <section className=\"login-right\">\n        <div className=\"logo\">\n          <img src={LogoKepcoMain}/>\n        </div>\n        <div className=\"input box\">\n          <h6>KEPCO 종합 예방진단 시스템</h6>\n          <input id=\"login_id\" name=\"id\" type=\"text\" placeholder=\"ID\"\n                 value={id} onChange={onChange} />\n          <input id=\"login_pw\" name=\"pass\" type=\"password\" placeholder=\"PW\"\n                 value={pass} onChange={onChange} />\n          {\n            props.isLoginFailed ?\n              <h3 style={{color:'red',marginBottom:'20px'}}>아이디 또는 패스워드가 잘못되었습니다.</h3>\n              : ''\n          }\n          <input type=\"checkbox\" id=\"remember-me\" name=\"rememberMe\"\n                 checked={rememberMe} onChange={onChange}/>\n          <label htmlFor=\"remember-me\" >\n            <div className=\"label-btn\">\n              <div className=\"jog\"></div>\n            </div>\n            계정 기억하기\n          </label>\n          <label htmlFor=\"login_submit\" onClick={reqLogin}>\n            <a href=\"#\">\n              <img src={IconLock} /><span>LOGIN</span>\n            </a>\n            {/*<Link to={\"/status\"}  style={{width:'100%', display:'block'}}>*/}\n            {/*  <img src={IconLock} /><span>LOGIN</span>*/}\n            {/*</Link>*/}\n          </label>\n          {/*<input type=\"submit\" value=\"LOGIN\" id=\"login_submit\"/>*/}\n        </div>\n      </section>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ authentication }: IRootState) => ({\n  isAuthenticated: authentication.isAuthenticated,\n  isLoginFailed: authentication.isLoginFailed,\n  // isAdmin: hasAnyAuthority(authentication.account.authorities, [AUTHORITIES.ADMIN]),\n});\n\nconst mapDispatchToProps = { getSession, login };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\init-page.tsx",["796","797"],"import React, { useEffect, useState } from 'react';\n\nexport const InitPage = (props) => {\n\n  return (\n    <>\n      <div className=\"layer-bg\"></div>\n      <div className=\"wrapper\">\n        <div className=\"loading-visual\">\n          <div className=\"loading__ring\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" x=\"0px\"\n                 y=\"0px\" viewBox=\"0 0 100 100\">\n                <path\n                  d=\"M85.5,42c-0.2-0.8-0.5-1.7-0.8-2.5c-0.3-0.9-0.7-1.6-1-2.3c-0.3-0.7-0.6-1.3-1-1.9c0.3,0.5,0.5,1.1,0.8,1.7  c0.2,0.7,0.6,1.5,0.8,2.3s0.5,1.7,0.8,2.5c0.8,3.5,1.3,7.5,0.8,12c-0.4,4.3-1.8,9-4.2,13.4c-2.4,4.2-5.9,8.2-10.5,11.2  c-1.1,0.7-2.2,1.5-3.4,2c-0.5,0.2-1.2,0.6-1.8,0.8s-1.3,0.5-1.9,0.8c-2.6,1-5.3,1.7-8.1,1.8l-1.1,0.1L53.8,84c-0.7,0-1.4,0-2.1,0  c-1.4-0.1-2.9-0.1-4.2-0.5c-1.4-0.1-2.8-0.6-4.1-0.8c-1.4-0.5-2.7-0.9-3.9-1.5c-1.2-0.6-2.4-1.2-3.7-1.9c-0.6-0.3-1.2-0.7-1.7-1.1  l-0.8-0.6c-0.3-0.1-0.6-0.4-0.8-0.6l-0.8-0.6L31.3,76l-0.2-0.2L31,75.7l-0.1-0.1l0,0l-1.5-1.5c-1.2-1-1.9-2.1-2.7-3.1  c-0.4-0.4-0.7-1.1-1.1-1.7l-1.1-1.7c-0.3-0.6-0.6-1.2-0.9-1.8c-0.2-0.5-0.6-1.2-0.8-1.8c-0.4-1.2-1-2.4-1.2-3.7  c-0.2-0.6-0.4-1.2-0.5-1.9c-0.1-0.6-0.2-1.2-0.3-1.8c-0.3-1.2-0.3-2.4-0.4-3.7c-0.1-1.2,0-2.5,0.1-3.7c0.2-1.2,0.3-2.4,0.6-3.5  c0.1-0.6,0.3-1.1,0.4-1.7l0.1-0.8l0.3-0.8c1.5-4.3,3.8-8,6.5-11c0.8-0.8,1.4-1.5,2.1-2.1c0.9-0.9,1.4-1.3,2.2-1.8  c1.4-1.2,2.9-2,4.3-2.8c2.8-1.5,5.5-2.3,7.7-2.8s4-0.7,5.2-0.6c0.6-0.1,1.1,0,1.4,0s0.4,0,0.4,0h0.1c2.7,0.1,5-2.2,5-5  c0.1-2.7-2.2-5-5-5c-0.2,0-0.2,0-0.3,0c0,0-0.2,0.1-0.6,0.1c-0.4,0-1,0-1.8,0.1c-1.6,0.1-4,0.4-6.9,1.2c-2.9,0.8-6.4,2-9.9,4.1  c-1.8,1-3.6,2.3-5.4,3.8C26,21.4,25,22.2,24.4,23c-0.2,0.2-0.4,0.4-0.6,0.6c-0.2,0.2-0.5,0.4-0.6,0.7c-0.5,0.4-0.8,0.9-1.3,1.4  c-3.2,3.9-5.9,8.8-7.5,14.3l-0.3,1l-0.2,1.1c-0.1,0.7-0.3,1.4-0.4,2.1c-0.3,1.5-0.4,2.9-0.5,4.5c0,1.5-0.1,3,0.1,4.5  c0.2,1.5,0.2,3,0.6,4.6c0.1,0.7,0.3,1.5,0.4,2.3c0.2,0.8,0.5,1.5,0.7,2.3c0.4,1.6,1.1,3,1.7,4.4c0.3,0.7,0.7,1.4,1.1,2.1  c0.4,0.8,0.8,1.4,1.2,2.1c0.5,0.7,0.9,1.4,1.4,2s0.9,1.3,1.5,1.9c1.1,1.3,2.2,2.7,3.3,3.5l1.7,1.6c0,0,0.1,0.1,0.1,0.1c0,0,0,0,0,0  c0,0,0,0,0,0l0.1,0.1l0.1,0.1h0.2l0.5,0.4l1,0.7c0.4,0.2,0.6,0.5,1,0.7l1.1,0.6c0.8,0.4,1.4,0.9,2.1,1.2c1.4,0.7,2.9,1.5,4.4,2  c1.5,0.7,3.1,1,4.6,1.5c1.5,0.3,3.1,0.7,4.7,0.8c1.6,0.2,3.1,0.2,4.7,0.2c0.8,0,1.6-0.1,2.4-0.1l1.2-0.1l1.1-0.1  c3.1-0.4,6.1-1.3,8.9-2.4c0.8-0.3,1.4-0.6,2.1-0.9s1.3-0.7,2-1.1c1.3-0.7,2.6-1.7,3.7-2.5c0.5-0.4,1-0.9,1.6-1.3l0.8-0.6l0.2-0.2  c0,0,0.1-0.1,0.1-0.1c0.1-0.1,0,0,0,0v0.1l0.1-0.1l0.4-0.4c0.5-0.5,1-1,1.5-1.5c0.3-0.3,0.5-0.5,0.8-0.8l0.7-0.8  c0.9-1.1,1.8-2.2,2.5-3.3c0.4-0.6,0.7-1.1,1.1-1.7c0.3-0.7,0.6-1.2,0.9-1.8c2.4-4.9,3.5-9.8,3.7-14.4C87.3,49.7,86.6,45.5,85.5,42z\"></path>\n            </svg>\n          </div>\n          <div className=\"loading__ring\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" x=\"0px\"\n                 y=\"0px\" viewBox=\"0 0 100 100\">\n                <path\n                  d=\"M85.5,42c-0.2-0.8-0.5-1.7-0.8-2.5c-0.3-0.9-0.7-1.6-1-2.3c-0.3-0.7-0.6-1.3-1-1.9c0.3,0.5,0.5,1.1,0.8,1.7  c0.2,0.7,0.6,1.5,0.8,2.3s0.5,1.7,0.8,2.5c0.8,3.5,1.3,7.5,0.8,12c-0.4,4.3-1.8,9-4.2,13.4c-2.4,4.2-5.9,8.2-10.5,11.2  c-1.1,0.7-2.2,1.5-3.4,2c-0.5,0.2-1.2,0.6-1.8,0.8s-1.3,0.5-1.9,0.8c-2.6,1-5.3,1.7-8.1,1.8l-1.1,0.1L53.8,84c-0.7,0-1.4,0-2.1,0  c-1.4-0.1-2.9-0.1-4.2-0.5c-1.4-0.1-2.8-0.6-4.1-0.8c-1.4-0.5-2.7-0.9-3.9-1.5c-1.2-0.6-2.4-1.2-3.7-1.9c-0.6-0.3-1.2-0.7-1.7-1.1  l-0.8-0.6c-0.3-0.1-0.6-0.4-0.8-0.6l-0.8-0.6L31.3,76l-0.2-0.2L31,75.7l-0.1-0.1l0,0l-1.5-1.5c-1.2-1-1.9-2.1-2.7-3.1  c-0.4-0.4-0.7-1.1-1.1-1.7l-1.1-1.7c-0.3-0.6-0.6-1.2-0.9-1.8c-0.2-0.5-0.6-1.2-0.8-1.8c-0.4-1.2-1-2.4-1.2-3.7  c-0.2-0.6-0.4-1.2-0.5-1.9c-0.1-0.6-0.2-1.2-0.3-1.8c-0.3-1.2-0.3-2.4-0.4-3.7c-0.1-1.2,0-2.5,0.1-3.7c0.2-1.2,0.3-2.4,0.6-3.5  c0.1-0.6,0.3-1.1,0.4-1.7l0.1-0.8l0.3-0.8c1.5-4.3,3.8-8,6.5-11c0.8-0.8,1.4-1.5,2.1-2.1c0.9-0.9,1.4-1.3,2.2-1.8  c1.4-1.2,2.9-2,4.3-2.8c2.8-1.5,5.5-2.3,7.7-2.8s4-0.7,5.2-0.6c0.6-0.1,1.1,0,1.4,0s0.4,0,0.4,0h0.1c2.7,0.1,5-2.2,5-5  c0.1-2.7-2.2-5-5-5c-0.2,0-0.2,0-0.3,0c0,0-0.2,0.1-0.6,0.1c-0.4,0-1,0-1.8,0.1c-1.6,0.1-4,0.4-6.9,1.2c-2.9,0.8-6.4,2-9.9,4.1  c-1.8,1-3.6,2.3-5.4,3.8C26,21.4,25,22.2,24.4,23c-0.2,0.2-0.4,0.4-0.6,0.6c-0.2,0.2-0.5,0.4-0.6,0.7c-0.5,0.4-0.8,0.9-1.3,1.4  c-3.2,3.9-5.9,8.8-7.5,14.3l-0.3,1l-0.2,1.1c-0.1,0.7-0.3,1.4-0.4,2.1c-0.3,1.5-0.4,2.9-0.5,4.5c0,1.5-0.1,3,0.1,4.5  c0.2,1.5,0.2,3,0.6,4.6c0.1,0.7,0.3,1.5,0.4,2.3c0.2,0.8,0.5,1.5,0.7,2.3c0.4,1.6,1.1,3,1.7,4.4c0.3,0.7,0.7,1.4,1.1,2.1  c0.4,0.8,0.8,1.4,1.2,2.1c0.5,0.7,0.9,1.4,1.4,2s0.9,1.3,1.5,1.9c1.1,1.3,2.2,2.7,3.3,3.5l1.7,1.6c0,0,0.1,0.1,0.1,0.1c0,0,0,0,0,0  c0,0,0,0,0,0l0.1,0.1l0.1,0.1h0.2l0.5,0.4l1,0.7c0.4,0.2,0.6,0.5,1,0.7l1.1,0.6c0.8,0.4,1.4,0.9,2.1,1.2c1.4,0.7,2.9,1.5,4.4,2  c1.5,0.7,3.1,1,4.6,1.5c1.5,0.3,3.1,0.7,4.7,0.8c1.6,0.2,3.1,0.2,4.7,0.2c0.8,0,1.6-0.1,2.4-0.1l1.2-0.1l1.1-0.1  c3.1-0.4,6.1-1.3,8.9-2.4c0.8-0.3,1.4-0.6,2.1-0.9s1.3-0.7,2-1.1c1.3-0.7,2.6-1.7,3.7-2.5c0.5-0.4,1-0.9,1.6-1.3l0.8-0.6l0.2-0.2  c0,0,0.1-0.1,0.1-0.1c0.1-0.1,0,0,0,0v0.1l0.1-0.1l0.4-0.4c0.5-0.5,1-1,1.5-1.5c0.3-0.3,0.5-0.5,0.8-0.8l0.7-0.8  c0.9-1.1,1.8-2.2,2.5-3.3c0.4-0.6,0.7-1.1,1.1-1.7c0.3-0.7,0.6-1.2,0.9-1.8c2.4-4.9,3.5-9.8,3.7-14.4C87.3,49.7,86.6,45.5,85.5,42z\"></path>\n            </svg>\n          </div>\n          <div className=\"text\">\n            Loading...\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default InitPage;\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\env.ts",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\reducers\\action-type.util.ts",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\layout\\index.tsx",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\error\\error-boundary-route.tsx",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\util\\storage-util.ts",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\reducers\\index.ts",[],["798","799","800","801","802","803","804","805","806"],["807","808"],"import React, { useEffect, useState } from 'react';\nimport { IRootState } from '../../reducers';\nimport { getCommonSubstation } from '../../reducers/substation';\nimport { connect } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\n\nexport interface INavSubProps extends StateProps, DispatchProps, RouteComponentProps<any> {}\n\nexport const NavSub = (props: INavSubProps) => {\n\n  // 현황/경향 페이지 타입\n  const [pageType, setPageType] = useState('');\n  useEffect(() => {\n    setPageType(props.location.pathname.startsWith('/status') ? 'status' : 'trend');\n  }, [props.location]);\n\n  // const [params, setParams] = useState(new URLSearchParams(props.location.search));\n  // useEffect(() => {\n  //   setParams(new URLSearchParams(props.location.search));\n  // }, [props.location.search]);\n\n  useEffect(() => {\n    props.getCommonSubstation();\n  }, []);\n\n  return (\n    <>\n      <input type=\"checkbox\" id=\"puller\"/>\n      <label className=\"pull-width\" htmlFor=\"puller\"></label>\n      <aside className=\"nav-sub\" id=\"nav-sub\">\n        <section>\n          <h2 className=\"header\"><a>{props.substation?.SS_NM}</a></h2>\n          <ul className=\"nav-sub-tree\">\n            <li>\n              <input type=\"radio\" id=\"rd-1-gis\" name=\"depth01\" className=\"nav-sub-radio\"/>\n              <label className=\"tab-label\" htmlFor=\"rd-1-gis\">GIS</label>\n              <ul className=\"tree-2depth\">\n                {\n                  props.equipmentList.filter(eqip => eqip.EQIP_TYPE === 'GIS')\n                    .map((gis, gisIndex) => {\n                      return (\n                        <li key={gisIndex}>\n                          <input type=\"radio\" id={`rd-2-gis-${gis.ID}`} name=\"depth02\" className=\"nav-sub-radio\" />\n                          <label className=\"tab-label\" htmlFor={`rd-2-gis-${gis.ID}`}>{gis.EQIP_NM}</label>\n                          <ul className=\"tree-3depth\">\n                            {\n                              props.allSensorList.filter(allSensor => allSensor.EQIP_ID === gis.ID)\n                                .map((sensor, sensorIndex) => {\n                                  let kind = sensor.SNSR_KIND === 'GIS_SPDC' ? 'spdc' : 'scbr';\n                                  return (\n                                    <li key={sensorIndex}>\n                                      <Link to={`/${pageType}/gis/${kind}?eqipId=${gis.ID}&snsrId=${sensor.ID}`}>{sensor.SNSR_NM}</Link>\n                                    </li>\n                                  )\n                                })\n                            }\n                          </ul>\n                        </li>\n                      )\n                    })\n                }\n              </ul>\n            </li>\n            <li>\n              <input type=\"radio\" id=\"rd-1-mtr\" name=\"depth01\" className=\"nav-sub-radio\"/>\n              <label className=\"tab-label\" htmlFor=\"rd-1-mtr\">MTR</label>\n              <ul className=\"tree-2depth\">\n                {\n                  props.equipmentList.filter(eqip => eqip.EQIP_TYPE === 'MTR')\n                    .map((mtr, mtrIndex) => {\n                      return (\n                        <li key={mtrIndex}>\n                          <input type=\"radio\" id={`rd-2-mtr-${mtr.ID}`} name=\"depth02\" className=\"nav-sub-radio\"/>\n                          <label className=\"tab-label\" htmlFor={`rd-2-mtr-${mtr.ID}`}>{mtr.EQIP_NM}</label>\n                          <ul className=\"tree-3depth\">\n                            {\n                              props.allSensorList.filter(allSensor => allSensor.EQIP_ID === mtr.ID)\n                                .map((sensor, sensorIndex) => {\n                                  let kind = sensor.SNSR_KIND === 'MTR_SPDC' ? 'spdc' :\n                                            sensor.SNSR_KIND === 'OLTC_SPDC' ? 'oltc-pd' :\n                                            sensor.SNSR_KIND === 'MTR_OLTC' ? 'oltc-ofu' :\n                                            sensor.SNSR_KIND === 'MTR_SIML' ? 'dga' :\n                                            sensor.SNSR_KIND === 'MTR_SBSH' ? 'bushing' : '';\n                                  return (\n                                    <li key={sensorIndex}>\n                                      <Link to={`/${pageType}/mtr/${kind}?eqipId=${mtr.ID}&snsrId=${sensor.ID}`}>{sensor.SNSR_NM}</Link>\n                                    </li>\n                                  )\n                                })\n                            }\n                          </ul>\n                        </li>\n                      )\n                    })\n                }\n              </ul>\n            </li>\n          </ul>\n        </section>\n      </aside>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ substation }: IRootState) => ({\n  substation: substation.substation,\n  equipmentList: substation.equipmentList,\n  allSensorList: substation.allSensorList,\n});\n\nconst mapDispatchToProps = {\n  getCommonSubstation,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavSub);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\main\\main.tsx",["809","810","811"],"import React, { useEffect, useState } from 'react';\nimport { IRootState } from '../../shared/reducers';\nimport { connect } from 'react-redux';\nimport {\n  getSldGisMtrLocation,\n  getSldGisMtrUse,\n  getSldGisRows,\n  getSldMtrGrid,\n  openDiagramSensorPopup\n} from './diagram.reducer';\nimport DiagramGis from './diagram-gis';\nimport DiagramMtr from './diagram-mtr';\nimport DiagramMtrTable from './diagram-mtr-table';\nimport { ModalOnlyLibaray } from '../../shared/component/popup/pdlibrary/modal-onlylibrary';\nimport ModalRealtime from '../../shared/component/popup/realtime/modal-realtime';\nimport { getCommonSubstation } from '../../shared/reducers/substation';\n\n\nexport interface IMainProps extends StateProps, DispatchProps {}\n\nexport const Main = (props: IMainProps) => {\n\n  const [toggleMtrDisplay, setToggleMtrDisplay] = useState(false);\n\n  useEffect(() => {\n    props.getCommonSubstation();\n    props.getSldGisRows();\n    props.getSldGisMtrUse();\n    props.getSldGisMtrLocation();\n    props.getSldMtrGrid();\n  }, []);\n\n  useEffect(() => {\n    // 메인 단선도\n    $('.cnt-check.tag-datatype').click(function () {\n      $('article.bushing').toggleClass('dis-none');\n      $('article.table').toggleClass('dis-none');\n    });\n    $('.cnt-check.tag-updown').click(function () {\n      $('.tag-down').toggleClass('dis-none');\n      $('.tag-up').toggleClass('dis-none');\n    });\n    $('.cnt-check.tag-inout').click(function () {\n      $('.tag-in').toggleClass('dis-none');\n      $('.tag-out').toggleClass('dis-none');\n    });\n    $('#view-sensor').click(function () {\n      $('.state span.tag-name').toggleClass('dis-none');\n    });\n    $('#view-lu').click(function () {\n      $('.state span.tag-lu').toggleClass('dis-none');\n    });\n    $('#view-number').click(function () {\n      $('.state span.tag-number').toggleClass('dis-none');\n    });\n  });\n\n  return (\n    <>\n      <div className='contents-area none-aside substation' onClick={() => props.openDiagramSensorPopup(null)}>\n        <article className=\"title gap-down-20\">\n          <h1>{props.substation?.SS_NM}</h1>\n          <div className=\"input-legend gap-right-20 left\">\n            <div className=\"control-wrapper\">\n              <div className=\"wrap-left\">\n                <section className=\"tag-datatype\">\n                  <div className=\"button box-selector\">\n                    <input type=\"checkbox\" className=\"cnt-check tag-datatype\"\n                           checked={toggleMtrDisplay} onChange={() => setToggleMtrDisplay(!toggleMtrDisplay)} />\n                    <div className=\"knobs\">\n                      <span className=\"left\">배치도</span>\n                      <span className=\"right\">데이터</span>\n                    </div>\n                    <div className=\"layer\"></div>\n                  </div>\n                </section>\n              </div>\n              <div className='wrap-right'>\n\t\t\t\t\t\t\t\t<section>\n\t\t\t\t\t\t\t\t\t<input type='checkbox' defaultChecked id='view-upper' />\n                  <label className='view upper-line gap-right-10' htmlFor='view-upper'>\n                    상부\n                  </label>\n\t\t\t\t\t\t\t\t\t<input type='checkbox' defaultChecked id='view-under' />\n                  <label className='view under-line' htmlFor='view-under'>\n                    하부\n                  </label>\n                </section>\n                <section>\n\t\t\t\t\t\t\t\t\t<input type='checkbox' defaultChecked id='view-inner' />\n                  <label className='view box-red gap-right-10' htmlFor='view-inner'>\n\t\t\t\t\t\t\t\t\t\t내장\n                  </label>\n\t\t\t\t\t\t\t\t\t<input type='checkbox' defaultChecked id='view-outer' />\n                  <label className='view box-blue' htmlFor='view-outer'>\n\t\t\t\t\t\t\t\t\t\t외장\n                  </label>\n                </section>\n                <section>\n                  <input type='checkbox' defaultChecked id='view-sensor' />\n                  <label className='view' htmlFor='view-sensor'>\n                    센서명 표시\n                  </label>\n                </section>\n                <section>\n                  <input type='checkbox' id='view-lu' />\n                  <label className='view' htmlFor='view-lu'>\n                    LU명 표시\n                  </label>\n                </section>\n                <section>\n                  <input type='checkbox' id='view-number' />\n                  <label className='view' htmlFor='view-number'>\n                    센서번호 노출\n                  </label>\n                </section>\n              </div>\n            </div>\n          </div>\n          <div className='input-legend'>\n            {\n              <ul>\n                <li><i className='sign green' onClick={(e) => {\n                  console.log('3');\n                }\n                }></i>정상\n                </li>\n                {/*<li><i className='sign green'</i>정상</li>*/}\n                <li><i className='sign yellow' ></i>요주의</li>\n                {/*<li><i className='sign yellow'></i>요주의</li>*/}\n                <li><i className='sign orange'></i>이상</li>\n                <li><i className='sign red'></i>위험</li>\n                <li><i className='sign grey'></i>통신이상</li>\n                <li><i className='icon-pd'></i>부분방전</li>\n                <li><i className='icon-wall'></i>차단기</li>\n                <li><i className='icon-bushing'></i>부싱</li>\n                <li><i className='icon-motor'></i>DC모터</li>\n                <li><i className='icon-dga'></i>가스</li>\n              </ul>\n            }\n          </div>\n        </article>\n\n        <article className='pipeline gap-down-40'>\n          { // GIS 설비\n            props.gisRows?.filter(gisRow => gisRow.USE_YN === 'Y')\n              .map((gisRow, index) => {\n                return index === 0 ?\n                  <DiagramGis key={index}\n                              equipmentList={\n                                props.gisMtrUse?.filter(eqip => eqip.GIS_MTR === 'GIS' && eqip.USE_YN === 'Y')\n                                  .filter(eqip => parseInt(eqip.GIS_MTR_NUM) <= 18)\n                              }\n                              sensorList={props.gisMtrLocation.filter(sensor => sensor.GIS_MTR === 'GIS' && sensor.SNSR)} />\n                  :\n                  <DiagramGis key={index} isSecondRow={true}\n                              equipmentList={\n                                props.gisMtrUse?.filter(eqip => eqip.GIS_MTR === 'GIS' && eqip.USE_YN === 'Y')\n                                  .filter(eqip => 19 <= parseInt(eqip.GIS_MTR_NUM))\n                              }\n                              sensorList={props.gisMtrLocation.filter(sensor => sensor.GIS_MTR === 'GIS' && sensor.SNSR)} />\n              })\n          }\n        </article>\n\n        <article className={`bushing ${toggleMtrDisplay ? 'dis-none' : ''}`}>\n          { // MTR 설비\n            props.gisMtrUse?.filter(eqip => eqip.GIS_MTR === 'MTR' && eqip.USE_YN === 'Y')\n              .map(eqip =>\n                  <DiagramMtr key={eqip.ID}\n                    mtrName={eqip.GIS_MTR_TITLE}\n                    sensorList={\n                      props.gisMtrLocation?.filter(\n                        sensor => sensor.GIS_MTR === 'MTR' &&\n                          sensor.SNSR &&\n                          sensor.GIS_MTR_NUM === eqip.GIS_MTR_NUM)\n                    } /> )\n          }\n        </article>\n\n        <article className={`table gap-up-30 ${toggleMtrDisplay ? '' : 'dis-none'}`}>\n          {\n            props.gisMtrUse?.filter(eqip => eqip.GIS_MTR === 'MTR' && eqip.USE_YN === 'Y')\n              .map(eqip =>\n                <DiagramMtrTable key={eqip.ID}\n                                 mtrName={eqip.GIS_MTR_TITLE}\n                                 mtrGrid={props.mtrGrid.filter(sensor => sensor.MTR_NUM === eqip.GIS_MTR_NUM)}\n                />)\n          }\n        </article>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ substation, diagram }: IRootState) => ({\n  substation: substation.substation,\n  gisRows: diagram.gisRows,\n  gisMtrUse: diagram.gisMtrUse,\n  gisMtrLocation: diagram.gisMtrLocation,\n  mtrGrid: diagram.mtrGrid,\n});\n\nconst mapDispatchToProps = {\n  getCommonSubstation,\n  getSldGisRows,\n  getSldGisMtrUse,\n  getSldGisMtrLocation,\n  getSldMtrGrid,\n  openDiagramSensorPopup\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\main\\diagram.reducer.ts",["812"],"import axios from 'axios';\n\nimport { FAILURE, REQUEST, SUCCESS } from '../../shared/reducers/action-type.util';\nimport { IDiagramSensor } from '../../shared/model/diagram-sensor.model';\nimport { IDiagramGisRow } from '../../shared/model/diagram-gis-row.model';\nimport { IDiagramEquipment } from '../../shared/model/diagram-equipment.model';\nimport { IDiagramGridSensor } from '../../shared/model/diagram-grid-sensor.model';\n\nexport const ACTION_TYPES = {\n  GET_SLD_GIS_ROWS: 'diagram/GET_SLD_GIS_ROWS',\n  GET_SLD_GISMTR_USE: 'diagram/GET_SLD_GISMTR_USE',\n  GET_SLD_GISMTR_LOCATION: 'diagram/GET_SLD_GISMTR_LOCATION',\n  GET_SLD_MTR_GRID: 'diagram/GET_SLD_MTR_GRID',\n  SELECT_DIAGRAM_SENSOR: 'diagram/SELECT_DIAGRAM_SENSOR',\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  gisRows: [] as ReadonlyArray<IDiagramGisRow>,\n  gisMtrUse: [] as ReadonlyArray<IDiagramEquipment>,\n  gisMtrLocation: [] as ReadonlyArray<IDiagramSensor>,\n  mtrGrid: [] as ReadonlyArray<IDiagramGridSensor>,\n  selectedSensor: null as IDiagramSensor,\n};\n\nexport type DiagramState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: DiagramState = initialState, action): DiagramState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_SLD_GIS_ROWS):\n    case REQUEST(ACTION_TYPES.GET_SLD_GISMTR_USE):\n    case REQUEST(ACTION_TYPES.GET_SLD_GISMTR_LOCATION):\n    case REQUEST(ACTION_TYPES.GET_SLD_MTR_GRID):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_SLD_GIS_ROWS):\n    case FAILURE(ACTION_TYPES.GET_SLD_GISMTR_USE):\n    case FAILURE(ACTION_TYPES.GET_SLD_GISMTR_LOCATION):\n    case FAILURE(ACTION_TYPES.GET_SLD_MTR_GRID):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    case SUCCESS(ACTION_TYPES.GET_SLD_GIS_ROWS):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        gisRows: action.payload.data?.data,\n      }\n    case SUCCESS(ACTION_TYPES.GET_SLD_GISMTR_USE):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        gisMtrUse: action.payload.data?.data,\n      }\n    case SUCCESS(ACTION_TYPES.GET_SLD_GISMTR_LOCATION):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        gisMtrLocation: action.payload.data.data,\n      }\n    case SUCCESS(ACTION_TYPES.GET_SLD_MTR_GRID):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        mtrGrid: action.payload.data.data\n      }\n    case ACTION_TYPES.SELECT_DIAGRAM_SENSOR:\n      return {\n        ...state,\n        selectedSensor: action.payload\n      }\n    default:\n      return state;\n  }\n}\n\n// Action\n// GIS 사용 row 수\nexport const getSldGisRows: () => void = () => async (dispatch) => {\n  await dispatch({\n    type: ACTION_TYPES.GET_SLD_GIS_ROWS,\n    payload: axios.get(`/GetSLD_Gis_Rows`)\n  })\n}\n\nexport const getSldGisMtrUse: () => void = () => async (dispatch) => {\n  await dispatch({\n    type: ACTION_TYPES.GET_SLD_GISMTR_USE,\n    payload: axios.get('/GetSLD_GisMtr_Use')\n  })\n}\n\nexport const getSldGisMtrLocation: () => void = () => async (dispatch) => {\n  await dispatch({\n    type: ACTION_TYPES.GET_SLD_GISMTR_LOCATION,\n    payload: axios.get('/GetSLD_GisMtr_Location')\n  })\n}\n\nexport const getSldMtrGrid: () => void = () => async (dispatch) => {\n  await dispatch({\n    type: ACTION_TYPES.GET_SLD_MTR_GRID,\n    payload: axios.get('/GetSLD_Mtr_Grid')\n  })\n}\n\nexport const openDiagramSensorPopup: (diagramSensor: IDiagramSensor) => void = (diagramSensor) => async (dispatch) => {\n  dispatch({\n    type: ACTION_TYPES.SELECT_DIAGRAM_SENSOR,\n    payload: diagramSensor\n  })\n}\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\reducers\\setup.ts",["813"],"import axios from 'axios';\n\nimport { FAILURE, REQUEST, SUCCESS } from './action-type.util';\n\nexport const ACTION_TYPES = {\n  SET_SETTING_ADD: 'setup/SET_SETTING_ADD',\n  SET_SETTING_UPDATE: 'setup/SET_SETTING_UPDATE',\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n};\n\nexport type SetupState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: SetupState = initialState, action): SetupState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.SET_SETTING_ADD):\n    case REQUEST(ACTION_TYPES.SET_SETTING_UPDATE):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.SET_SETTING_ADD):\n    case FAILURE(ACTION_TYPES.SET_SETTING_UPDATE):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    case SUCCESS(ACTION_TYPES.SET_SETTING_ADD):\n      console.log('SET_SETTING_ADD: ', action);\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n      }\n    case SUCCESS(ACTION_TYPES.SET_SETTING_UPDATE):\n      console.log('SET_SETTING_UPDATE: ', action);\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n      }\n    default:\n      return state;\n  }\n}\n\nconst settingAddUrl = '/SetSetting_add';\nconst settingUpdateUrl = '/SetSetting_update';\n\n// Action\nexport const setSettingAdd: (snsrId: string, set_comm_cd: string, setValue: string) =>\n  void = (snsrId, set_comm_cd, setValue) => async (dispatch) => {\n  const requestUrl = `${settingAddUrl}?snsrId=${snsrId}&set_comm_cd=${set_comm_cd}&setValue=${setValue}`;\n  await dispatch({\n    type: ACTION_TYPES.SET_SETTING_ADD,\n    payload: axios.get(requestUrl)\n  })\n}\nexport const setSettingUpdate: (snsrId: string, set_comm_cd: string, setValue: string) =>\n  void = (snsrId, set_comm_cd, setValue) => async (dispatch) => {\n  const requestUrl = `${settingUpdateUrl}?snsrId=${snsrId}&set_comm_cd=${set_comm_cd}&setValue=${setValue}`;\n  await dispatch({\n    type: ACTION_TYPES.SET_SETTING_UPDATE,\n    payload: axios.get(requestUrl)\n  })\n}\nexport const setSettingsUpdate: (settings: Map<string, string>) => void = (settings) => async (dispatch) => {\n  for (let setting of Array.from(settings)) {\n    const keyObject = JSON.parse(setting[0]);\n    await dispatch(setSettingUpdate(keyObject.snsrId, keyObject.set_comm_cd, setting[1]));\n  }\n}\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\reducers\\prpd.reducer.ts",["814"],"import axios from 'axios';\nimport { isSampleApi } from '../../env';\n\nimport { FAILURE, REQUEST, SUCCESS } from 'shared/reducers/action-type.util';\n\nexport const ACTION_TYPES = {\n  GET_PRPD: 'pulse/GET_PRPD',\n};\n\nconst initialState = {\n  prpd: [] as Array<number>,\n};\n\nexport type PrpdState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: PrpdState = initialState, action): PrpdState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_PRPD):\n      return {\n        ...state,\n      };\n    case FAILURE(ACTION_TYPES.GET_PRPD):\n      return {\n        ...initialState,\n      };\n    case SUCCESS(ACTION_TYPES.GET_PRPD):\n      return {\n        ...state,\n        prpd: action.payload.data.data,\n      };\n    default:\n      return state;\n  }\n};\n\n// Action\nexport const getPrpd: (id) => void = (id) => async (dispatch) => {\n  let requestUrl = isSampleApi ? '/GetCommon_PRPD_sample?eventId=' : '/GetCommon_PRPD?evntId=';\n  await dispatch({\n    type: ACTION_TYPES.GET_PRPD,\n    payload: axios.get(requestUrl + id)\n  })\n}\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\reducers\\3d-prps.reducer.ts",["815","816"],"import axios from 'axios';\nimport { isSampleApi } from '../../env';\n\nimport { FAILURE, REQUEST, SUCCESS } from 'shared/reducers/action-type.util';\n\nexport const ACTION_TYPES = {\n  GET_3D_PRPS_EVENT: 'pulse/GET_3D_PRPS_EVENT',\n  GET_3D_PRPS_NOISE: 'pulse/GET_3D_PRPS_NOISE',\n};\n\nconst initialState = {\n  eventPrps: [] as Array<number>,\n  noisePrps: [] as Array<number>,\n};\n\nexport type Prps3DState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: Prps3DState = initialState, action): Prps3DState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_3D_PRPS_EVENT):\n    case REQUEST(ACTION_TYPES.GET_3D_PRPS_NOISE):\n      return {\n        ...state,\n      };\n    case FAILURE(ACTION_TYPES.GET_3D_PRPS_EVENT):\n    case REQUEST(ACTION_TYPES.GET_3D_PRPS_NOISE):\n      return {\n        ...initialState,\n      };\n    case SUCCESS(ACTION_TYPES.GET_3D_PRPS_EVENT):\n      console.log('success GET_3D_PRPS_EVENT', action.payload.data.data[0]);\n      return {\n        ...state,\n        eventPrps: action.payload.data.data[0],\n      };\n    case SUCCESS(ACTION_TYPES.GET_3D_PRPS_NOISE):\n      console.log('success GET_3D_PRPS_NOISE', action.payload.data.data[0]);\n      return {\n        ...state,\n        noisePrps: action.payload.data.data[0],\n      };\n    default:\n      return state;\n  }\n};\n\n// Action\nexport const get3DPrps: (id) => void = (id) => async (dispatch) => {\n  let requestEventUrl = isSampleApi ? '/GetCommon_3DPRPS_Event_sample?' : '/GetCommon_3DPRPS_Event?gubun=P&evntId=';\n  let requestNoiseUrl = isSampleApi ? '/GetCommon_3DPRPS_Event_sample?' : '/GetCommon_3DPRPS_Event?gubun=N&evntId=';\n  dispatch({\n    type: ACTION_TYPES.GET_3D_PRPS_EVENT,\n    payload: axios.get(requestEventUrl + id)\n  })\n  dispatch({\n    type: ACTION_TYPES.GET_3D_PRPS_NOISE,\n    payload: axios.get(requestNoiseUrl + id)\n  })\n}\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\alarm\\alarm.reducer.ts",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\history\\setting-history.reducer.ts",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\exam\\test\\test01-value-scope.reducer.ts",["817","818","819","820","821"],"import moment from 'moment';\nimport axios from 'axios';\nimport { FAILURE, SUCCESS } from '../../../shared/reducers/action-type.util';\n\nexport const ACTION_TYPES = {\n  TEST: 'exam/test/test01/TEST',\n};\n\nconst initialState = {\n  testValue: 0\n};\n\nexport type Test01State = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: Test01State = initialState, action): Test01State => {\n  switch (action.type) {\n    case ACTION_TYPES.TEST:\n    case ACTION_TYPES.TEST:\n      console.log('action: ', action);\n      return {\n        ...state,\n        testValue: action.payload\n      }\n    default:\n      return state;\n  }\n}\n\n// Action\nexport const test01Redux: () => void = () => async (dispatch) => {\n  console.log('test01Redux');\n  await dispatch({\n    type: ACTION_TYPES.TEST,\n    // payload: axios.get('/getLogin_userInfo?id=admin')\n    payload: moment().format('ss')\n  });\n}\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\user\\user.reducer.ts",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\setup\\eqip\\eqip.reducer.ts",["822"],"import axios from 'axios';\n\nimport { REQUEST, SUCCESS, FAILURE } from '../../../../shared/reducers/action-type.util';\n\nexport const ACTION_TYPES = {\n  SET_SLD_GIS: 'setting/setup/eqip/SET_SLD_GIS',\n  SET_SLD_USEYN_TITLE: 'setting/setup/eqip/SET_SLD_USEYN_TITLE',\n  SET_SLD_LOCATION: 'setting/setup/eqip/SET_SLD_LOCATION',\n  SET_SLD_MTR_TABLE: 'setting/setup/eqip/SET_SLD_MTR_TABLE',\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  // spdcEventList: [] as ReadonlyArray<ISpdcEvent>,\n  // spdcEventListTotalCount: 0,\n};\n\nexport type EqipState = Readonly<typeof initialState>;\n\n// Reducer\nconst eqip = (state: EqipState = initialState, action): EqipState => {\n\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.SET_SLD_GIS):\n    case REQUEST(ACTION_TYPES.SET_SLD_USEYN_TITLE):\n    case REQUEST(ACTION_TYPES.SET_SLD_LOCATION):\n    case REQUEST(ACTION_TYPES.SET_SLD_MTR_TABLE):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.SET_SLD_GIS):\n    case FAILURE(ACTION_TYPES.SET_SLD_USEYN_TITLE):\n    case FAILURE(ACTION_TYPES.SET_SLD_LOCATION):\n    case FAILURE(ACTION_TYPES.SET_SLD_MTR_TABLE):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    // case SUCCESS(ACTION_TYPES.SET_SLD_USEYN_TITLE):\n    //   return {\n    //     ...state,\n    //     loading: false,\n    //     errorMessage: null,\n    //     // spdcEventList: action.payload.data.Records,\n    //     // spdcEventListTotalCount: action.payload.data.TotalCount,\n    //   }\n    default:\n      return state;\n  }\n}\n\nexport default eqip;\n\n// Action\n// GIS 행 사용여부 설정\nexport const setSldGis: (row, useYN) =>\n  void = (row, useYN) => async (dispatch) => {\n  const requestUrl = `SetSLD_GIS?row=${row}&useYN=${useYN}`;\n  await dispatch({\n    type: ACTION_TYPES.SET_SLD_GIS,\n    payload: axios.get(requestUrl)\n  })\n}\n// GIS, MTR 사용여부 및 타이틀 설정\nexport const setSldUseYnTitle: (gisMtr, gisMtrNum, useYN, title) =>\n  void = (gisMtr, gisMtrNum, useYN, title) => async (dispatch) => {\n  const encTitle = encodeURIComponent(title);\n  const requestUrl = `SetSLD_UseYN_Title?gisMtr=${gisMtr}&gisMtrNum=${gisMtrNum}&useYN=${useYN}&title=${encTitle}`;\n  await dispatch({\n    type: ACTION_TYPES.SET_SLD_USEYN_TITLE,\n    payload: axios.get(requestUrl)\n  })\n}\n// GIS, MTR 센서 위치 설정\nexport const setSldLocation: (gisMtr, gisMtrNum, cellNum, snsrId) =>\n  void = (gisMtr, gisMtrNum, cellNum, snsrId) => async (dispatch) => {\n  const requestUrl = `SetSLD_Location?gisMtr=${gisMtr}&gisMtrNum=${gisMtrNum}&cellNum=${cellNum}&snsrId=${snsrId}`;\n  await dispatch({\n    type: ACTION_TYPES.SET_SLD_LOCATION,\n    payload: axios.get(requestUrl)\n  })\n}\n// MTR 표 설정\nexport const setSldMtrTable: (mtrNum, rowNum, snsrId, snsrGroup, gubun, desc) =>\n  void = (mtrNum, rowNum, snsrId, snsrGroup, gubun, desc) => async (dispatch) => {\n  const requestUrl = `SetSLD_MTR_Table?` +\n    `mtrNum=${mtrNum}&rowNum=${rowNum}&snsrId=${snsrId}` +\n    `&snsrGroup=${snsrGroup}&gubun=${gubun}&desc=${desc}`;\n  await dispatch({\n    type: ACTION_TYPES.SET_SLD_MTR_TABLE,\n    payload: axios.get(requestUrl)\n  })\n}\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\setup\\pd\\setup-pd.reducer.ts",["823"],"import axios from 'axios';\n\nimport { FAILURE, REQUEST, SUCCESS } from '../../../../shared/reducers/action-type.util';\nimport { IPdSetting } from '../../../../shared/model/pd-setting.model';\n\nexport const ACTION_TYPES = {\n  GET_SETTING_PD: 'settings/setup/pd/GET_SETTING_PD',\n  RESET_SETTING_PD: 'settings/setup/pd/RESET_SETTING_PD',\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  pdSettingList: [] as ReadonlyArray<IPdSetting>,\n};\n\nexport type SetupPdState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: SetupPdState = initialState, action): SetupPdState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_SETTING_PD):\n    case REQUEST(ACTION_TYPES.RESET_SETTING_PD):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_SETTING_PD):\n    case FAILURE(ACTION_TYPES.RESET_SETTING_PD):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    case SUCCESS(ACTION_TYPES.GET_SETTING_PD):\n      console.log('GET_SETTING_PD: ', action);\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        pdSettingList: action.payload.data.data,\n      }\n    case ACTION_TYPES.RESET_SETTING_PD:\n      console.log('RESET_SETTING_PD: ', action);\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        pdSettingList: [],\n      }\n    default:\n      return state;\n  }\n}\n\n// Action\nexport const getSettingPD: () => void = () => async (dispatch) => {\n  await dispatch({\n    type: ACTION_TYPES.GET_SETTING_PD,\n    payload: axios.get('getSetting_PD')\n  })\n}\nexport const resetSettingPD: () => void = () => async (dispatch) => {\n  await dispatch({\n    type: ACTION_TYPES.RESET_SETTING_PD,\n  })\n}\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\setup\\scbr\\setup-scbr.reducer.ts",["824"],"import axios from 'axios';\n\nimport { FAILURE, REQUEST, SUCCESS } from '../../../../shared/reducers/action-type.util';\nimport { IScbrSetting } from '../../../../shared/model/scbr-setting.model';\n\nexport const ACTION_TYPES = {\n  GET_SETTING_SCBR: 'settings/setup/scbr/GET_SETTING_SCBR',\n  RESET_SETTING_SCBR: 'settings/setup/scbr/RESET_SETTING_SCBR',\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  scbrSettingList: [] as ReadonlyArray<IScbrSetting>,\n};\n\nexport type SetupScbrState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: SetupScbrState = initialState, action): SetupScbrState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_SETTING_SCBR):\n    case REQUEST(ACTION_TYPES.RESET_SETTING_SCBR):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_SETTING_SCBR):\n    case FAILURE(ACTION_TYPES.RESET_SETTING_SCBR):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    case SUCCESS(ACTION_TYPES.GET_SETTING_SCBR):\n      console.log('GET_SETTING_PD: ', action);\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        scbrSettingList: action.payload.data.data,\n      }\n    case ACTION_TYPES.RESET_SETTING_SCBR:\n      console.log('RESET_SETTING_PD: ', action);\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        scbrSettingList: [],\n      }\n    default:\n      return state;\n  }\n}\n\n// Action\nexport const getSettingScbr: () => void = () => async (dispatch) => {\n  await dispatch({\n    type: ACTION_TYPES.GET_SETTING_SCBR,\n    payload: axios.get('getSetting_SCBR')\n  })\n}\nexport const resetSettingScbr: () => void = () => async (dispatch) => {\n  await dispatch({\n    type: ACTION_TYPES.RESET_SETTING_SCBR,\n  })\n}\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\gis\\spdc\\spdc.reducer.ts",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\gis\\all\\all.reducer.ts",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\oltc-spdc\\oltc-spdc.reducer.ts",["825"],"import axios from 'axios';\n\nimport { REQUEST, SUCCESS, FAILURE } from '../../../../shared/reducers/action-type.util';\nimport { ISpdcEvent } from '../../../../shared/model/spdc-event.model';\nimport moment from 'moment';\n\nexport const ACTION_TYPES = {\n  GET_STATUS_MTR_OLTC_SPDC_EVENT: 'status/mtr/oltc-spdc/GET_STATUS_MTR_OLTC_SPDC_EVENT',\n  GET_STATUS_MTR_OLTC_SPDC_CUMULATE: 'status/mtr/oltc-spdc/GET_STATUS_MTR_OLTC_SPDC_CUMULATE',\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  oltcSpdcEventList: [] as ReadonlyArray<ISpdcEvent>,\n  oltcSpdcEventListTotalCount: 0,\n  oltcSpdcComulateList: [] as ReadonlyArray<ISpdcEvent>,\n  oltcSpdcComulateListTotalCount: 0,\n  // updateSuccess: false,\n  // updateFailure: false,\n};\n\nexport type MtrOltcPdEventState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: MtrOltcPdEventState = initialState, action): MtrOltcPdEventState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_STATUS_MTR_OLTC_SPDC_EVENT):\n    case REQUEST(ACTION_TYPES.GET_STATUS_MTR_OLTC_SPDC_CUMULATE):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_STATUS_MTR_OLTC_SPDC_EVENT):\n    case FAILURE(ACTION_TYPES.GET_STATUS_MTR_OLTC_SPDC_CUMULATE):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    case SUCCESS(ACTION_TYPES.GET_STATUS_MTR_OLTC_SPDC_EVENT):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        oltcSpdcEventList: action.payload.data.Records,\n        oltcSpdcEventListTotalCount: action.payload.data.TotalCount,\n      }\n    case SUCCESS(ACTION_TYPES.GET_STATUS_MTR_OLTC_SPDC_CUMULATE):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        oltcSpdcComulateList: action.payload.data.Records,\n        oltcSpdcComulateListTotalCount: action.payload.data.TotalCount,\n      }\n    default:\n      return state;\n  }\n}\n\nconst mtrOltcSpdcEventUrl = '/GetStatus_MTR_OLTC_PD_Event';\nconst mtrOltcSpdcCumulateUrl = '/GetStatus_MTR_OLTC_PD_Cumulate';\n\n// Action\n// OLTC 부분방전 이벤트 조회\nexport const getStatusMtrOltcPdEvent: (fromDate: Date, toDate: Date, eqipId: string, snsrId: string, diag: string, page: number, top: number) =>\n  void = (fromDate, toDate, eqipId, snsrId, diag, page, top) => async (dispatch) => {\n  const skipItem = (page - 1) * top;\n  const requestUrl = `${mtrOltcSpdcEventUrl}?` +\n    `fromDate=${moment(fromDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `toDate=${moment(toDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `eqipId=${eqipId}&snsrId=${snsrId}&diagCont=${diag}` +\n    `&skip=${skipItem}&top=${top}`;\n  await dispatch({\n    type: ACTION_TYPES.GET_STATUS_MTR_OLTC_SPDC_EVENT,\n    payload: axios.get(requestUrl)\n  })\n}\n// OLTC 부분방전 누적데이터 조회\nexport const getStatusMtrOltcPdCumulate: (fromDate: Date, toDate: Date, eqipId: string, snsrId: string, diag: string, page: number, top: number) =>\n  void = (fromDate, toDate, eqipId, snsrId, diag, page, top) => async (dispatch) => {\n  const skipItem = (page - 1) * top;\n  const requestUrl = `${mtrOltcSpdcCumulateUrl}?` +\n    `fromDate=${moment(fromDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `toDate=${moment(toDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `eqipId=${eqipId}&snsrId=${snsrId}&diagCont=${diag}` +\n    `&skip=${skipItem}&top=${top}`;\n  await dispatch({\n    type: ACTION_TYPES.GET_STATUS_MTR_OLTC_SPDC_CUMULATE,\n    payload: axios.get(requestUrl)\n  })\n}\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\oltc-ofu\\oltc-ofu.reducer.ts",["826"],"import axios from 'axios';\n\nimport { REQUEST, SUCCESS, FAILURE } from '../../../../shared/reducers/action-type.util';\nimport { IOfuEvent } from '../../../../shared/model/ofu-event.model';\nimport moment from 'moment';\n\nexport const ACTION_TYPES = {\n  GET_STATUS_MTR_OLTC_OFU_EVENT: 'status/mtr/oltc-ofu/GET_STATUS_MTR_OLTC_OFU_EVENT',\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  oltcOfuEventList: [] as ReadonlyArray<IOfuEvent>,\n  oltcOfuEventListTotalCount: 0,\n  // updateSuccess: false,\n  // updateFailure: false,\n};\n\nexport type MtrOltcOfuEventState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: MtrOltcOfuEventState = initialState, action): MtrOltcOfuEventState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_STATUS_MTR_OLTC_OFU_EVENT):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_STATUS_MTR_OLTC_OFU_EVENT):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    case SUCCESS(ACTION_TYPES.GET_STATUS_MTR_OLTC_OFU_EVENT):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        oltcOfuEventList: action.payload.data.Records,\n        oltcOfuEventListTotalCount: action.payload.data.TotalCount,\n      }\n    default:\n      return state;\n  }\n}\n\nconst mtrOfuEventUrl = '/GetStatus_MTR_OLTC_MOTOR';\n\n// Action\n// OLTC 모터 동작 현황 이벤트 조회\nexport const getStatusMtrOltcOfuEvent: (fromDate: Date, toDate: Date, eqipId: string, snsrId: string, diag: string, page: number, top: number) =>\n  void = (fromDate, toDate, eqipId, snsrId, diag, page, top) => async (dispatch) => {\n  const skipItem = (page - 1) * top;\n  const requestUrl = `${mtrOfuEventUrl}?` +\n    `fromDate=${moment(fromDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `toDate=${moment(toDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `eqipId=${eqipId}&snsrId=${snsrId}&diagCont=${diag}` +\n    `&skip=${skipItem}&top=${top}`;\n  await dispatch({\n    type: ACTION_TYPES.GET_STATUS_MTR_OLTC_OFU_EVENT,\n    payload: axios.get(requestUrl)\n  })\n}\n\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\dga\\dga.reducer.ts",["827","828","829"],"import axios from 'axios';\n\nimport { REQUEST, SUCCESS, FAILURE } from '../../../../shared/reducers/action-type.util';\nimport { IDgaEvent } from '../../../../shared/model/dga-event.model';\nimport moment from 'moment';\n\nexport const ACTION_TYPES = {\n  GET_STATUS_MTR_DGA_EVENT: 'status/mtr/dga/GET_STATUS_MTR_DGA_EVENT',\n  GET_STATUS_MTR_DGA_STANDARD: 'status/mtr/dga/GET_STATUS_MTR_DGA_STANDARD',\n  GET_STATUS_MTR_DGA_SELECT_ROW: 'status/mtr/dga/GET_STATUS_MTR_DGA_SELECT_ROW',\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  dgaEventList: [] as ReadonlyArray<IDgaEvent>,\n  dgaEventListTotalCount: 0,\n\tdgaStandard: undefined,\n\tdgaSelectRow: undefined,\n};\n\nexport type MtrDgaEventState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: MtrDgaEventState = initialState, action): MtrDgaEventState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_STATUS_MTR_DGA_EVENT):\n    case REQUEST(ACTION_TYPES.GET_STATUS_MTR_DGA_STANDARD):\n    case REQUEST(ACTION_TYPES.GET_STATUS_MTR_DGA_SELECT_ROW):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_STATUS_MTR_DGA_EVENT):\n    case FAILURE(ACTION_TYPES.GET_STATUS_MTR_DGA_STANDARD):\n    case FAILURE(ACTION_TYPES.GET_STATUS_MTR_DGA_SELECT_ROW):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    case SUCCESS(ACTION_TYPES.GET_STATUS_MTR_DGA_EVENT):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        dgaEventList: action.payload.data.Records,\n        dgaEventListTotalCount: action.payload.data.TotalCount,\n      }\n\t\tcase SUCCESS(ACTION_TYPES.GET_STATUS_MTR_DGA_STANDARD):\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: false,\n\t\t\t\terrorMessage: null,\n\t\t\t\tdgaStandard: action.payload.data.data,\n\t\t\t}\n\t\tcase SUCCESS(ACTION_TYPES.GET_STATUS_MTR_DGA_SELECT_ROW):\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: false,\n\t\t\t\terrorMessage: null,\n\t\t\t\tdgaSelectRow: action.payload.data,\n\t\t\t}\n    default:\n      return state;\n  }\n}\n\nconst mtrDgaEventUrl = '/GetStatus_MTR_DGA';\n\n// Action\n// OLTC 모터 동작 현황 이벤트 조회\nexport const getStatusMtrDgaEvent: (fromDate: Date, toDate: Date, eqipId: string, snsrId: string, diag: string, page: number, top: number) =>\n  void = (fromDate, toDate, eqipId, snsrId, diag, page, top) => async (dispatch) => {\n  const skipItem = (page - 1) * top;\n  const requestUrl = `${mtrDgaEventUrl}?` +\n    `fromDate=${moment(fromDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `toDate=${moment(toDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `eqipId=${eqipId}&snsrId=${snsrId}&diagCont=${diag}` +\n    `&skip=${skipItem}&top=${top}`;\n  await dispatch({\n    type: ACTION_TYPES.GET_STATUS_MTR_DGA_EVENT,\n    payload: axios.get(requestUrl)\n  })\n}\n\nconst getDgaSeletRowUrl = '/GetStatus_MTR_DGA_SelectRow';\n\n// Action\n// OLTC 모터 동작 현황 전날 최대치\nexport const getDgaSelectRow: (targetDate: Date) =>\n  void = (targetDate) => async (dispatch) => {\n  const requestUrl = `${getDgaSeletRowUrl}?` + `yyyyMMdd=${moment(targetDate).add(-1, \"d\").format('YYYY-MM-DD')}`;\n  await dispatch({\n    type: ACTION_TYPES.GET_STATUS_MTR_DGA_SELECT_ROW,\n    payload: axios.get(requestUrl)\n  })\n}\n\nconst getDgaStandardUrl = '/GetStatus_MTR_DGA_Standard';\n\n// Action\n// OLTC 모터 동작 현황 센서별 기준값\nexport const getDgaStandard: (snsrId: string) =>\n  void = (snsrId) => async (dispatch) => {\n  const requestUrl = `${getDgaStandardUrl}?` + `snsrId=${snsrId}`;\n  await dispatch({\n    type: ACTION_TYPES.GET_STATUS_MTR_DGA_STANDARD,\n    payload: axios.get(requestUrl)\n  })\n}\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\bushing\\bushing.reducer.ts",["830","831","832"],"import axios from 'axios';\n\nimport { REQUEST, SUCCESS, FAILURE } from '../../../../shared/reducers/action-type.util';\nimport { IBushingCompare, IBushingEvent, IBushingSelectRow } from '../../../../shared/model/bushing-event.model';\nimport moment from 'moment';\n\nexport const ACTION_TYPES = {\n  GET_STATUS_MTR_BUSHING_EVENT: 'status/mtr/oltc-ofu/GET_STATUS_MTR_BUSHING_EVENT',\n  GET_STATUS_MTR_BUSHING_COMPARE: 'status/mtr/oltc-ofu/GET_STATUS_MTR_BUSHING_COMPARE',\n  GET_STATUS_MTR_BUSHING_SELECT_ROW: 'status/mtr/oltc-ofu/GET_STATUS_MTR_BUSHING_SELECT_ROW',\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  bushingEventList: [] as ReadonlyArray<IBushingEvent>,\n  bushingEventListTotalCount: 0,\n\tbushingCompareList: [] as Array<IBushingCompare>,\n\tbushingSelectRow: [] as Array<IBushingSelectRow>,\n\t// : [] as \n  // updateSuccess: false,\n  // updateFailure: false,\n};\n\nexport type MtrBushingEventState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: MtrBushingEventState = initialState, action): MtrBushingEventState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_STATUS_MTR_BUSHING_EVENT):\n    case REQUEST(ACTION_TYPES.GET_STATUS_MTR_BUSHING_COMPARE):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_STATUS_MTR_BUSHING_EVENT):\n    case FAILURE(ACTION_TYPES.GET_STATUS_MTR_BUSHING_COMPARE):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    case SUCCESS(ACTION_TYPES.GET_STATUS_MTR_BUSHING_EVENT):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        bushingEventList: action.payload.data.Records,\n        bushingEventListTotalCount: action.payload.data.TotalCount,\n      }\n\t\tcase SUCCESS(ACTION_TYPES.GET_STATUS_MTR_BUSHING_COMPARE):\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: false,\n\t\t\t\terrorMessage: null,\n\t\t\t\tbushingCompareList: action.payload.data.data,\n\t\t\t}\n\t\t\tcase SUCCESS(ACTION_TYPES.GET_STATUS_MTR_BUSHING_SELECT_ROW):\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\tloading: false,\n\t\t\t\t\terrorMessage: null,\n\t\t\t\t\tbushingSelectRow: action.payload.data.data,\n\t\t\t\t}\n    default:\n      return state;\n  }\n}\n\nconst mtrOfuEventUrl = '/GetStatus_MTR_BUSH';\n\n// Action\n// OLTC 모터 동작 현황 이벤트 조회\nexport const getStatusMtrBushingEvent: (fromDate: Date, toDate: Date, eqipId: string, snsrId: string, diag: string, page: number, top: number) =>\n  void = (fromDate, toDate, eqipId, snsrId, diag, page, top) => async (dispatch) => {\n  const skipItem = (page - 1) * top;\n  const requestUrl = `${mtrOfuEventUrl}?` +\n    `fromDate=${moment(fromDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `toDate=${moment(toDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `eqipId=${eqipId}&snsrId=${snsrId}&diagCont=${diag}` +\n    `&skip=${skipItem}&top=${top}`;\n  await dispatch({\n    type: ACTION_TYPES.GET_STATUS_MTR_BUSHING_EVENT,\n    payload: axios.get(requestUrl)\n  })\n}\n\nconst mtrOfuCompareUrl = '/GetStatus_MTR_BUSH_Compare';\n\n\n// OLTC 모터 동작 현황 비교하기 조회\nexport const getStatusMtrBushingCompare: (evntId: number) =>\n\tvoid = (evntId) => async (dispatch) => {\n\t\tconst requestUrl = `${mtrOfuCompareUrl}?` + `evntId=${evntId}`;\n\t\tawait dispatch({\n\t\t\ttype: ACTION_TYPES.GET_STATUS_MTR_BUSHING_COMPARE,\n\t\t\tpayload: axios.get(requestUrl)\n\t\t})\n}\n\n// OLTC 모터 동작 현황 비교하기 조회\nexport const getStatusMtrBushingSelectRow: (sbshId: number) =>\n\tvoid = (sbshId) => async (dispatch) => {\n\t\tconst requestUrl = `/GetStatus_MTR_BUSH_SelectRow?` + `sbshId=${sbshId}`;\n\t\tawait dispatch({\n\t\t\ttype: ACTION_TYPES.GET_STATUS_MTR_BUSHING_SELECT_ROW,\n\t\t\tpayload: axios.get(requestUrl)\n\t\t})\n}\n\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\spdc\\spdc.reducer.ts",["833"],"import axios from 'axios';\n\nimport { REQUEST, SUCCESS, FAILURE } from '../../../../shared/reducers/action-type.util';\nimport { ISpdcEvent } from '../../../../shared/model/spdc-event.model';\nimport moment from 'moment';\n\nexport const ACTION_TYPES = {\n  GET_STATUS_MTR_SPDC_EVENT: 'status/mtr/spdc/GET_STATUS_MTR_SPDC_EVENT',\n  GET_STATUS_MTR_SPDC_CUMULATE: 'status/mtr/spdc/GET_STATUS_MTR_SPDC_CUMULATE',\n};\n// TODO\n// Comulate를 Cumulate로 수정 (개발완료 후)\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  spdcEventList: [] as ReadonlyArray<ISpdcEvent>,\n  spdcEventListTotalCount: 0,\n  spdcComulateList: [] as ReadonlyArray<ISpdcEvent>,\n  spdcComulateListTotalCount: 0,\n  // updateSuccess: false,\n  // updateFailure: false,\n};\n\nexport type MtrPdEventState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: MtrPdEventState = initialState, action): MtrPdEventState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_STATUS_MTR_SPDC_EVENT):\n    case REQUEST(ACTION_TYPES.GET_STATUS_MTR_SPDC_CUMULATE):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_STATUS_MTR_SPDC_EVENT):\n    case FAILURE(ACTION_TYPES.GET_STATUS_MTR_SPDC_CUMULATE):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    case SUCCESS(ACTION_TYPES.GET_STATUS_MTR_SPDC_EVENT):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        spdcEventList: action.payload.data.Records,\n        spdcEventListTotalCount: action.payload.data.TotalCount,\n      }\n    case SUCCESS(ACTION_TYPES.GET_STATUS_MTR_SPDC_CUMULATE):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        spdcComulateList: action.payload.data.Records,\n        spdcComulateListTotalCount: action.payload.data.TotalCount,\n      }\n    default:\n      return state;\n  }\n}\n\nconst mtrSpdcEventUrl = '/GetStatus_MTR_SPDC_Event';\nconst mtrSpdcCumulateUrl = '/GetStatus_MTR_SPDC_Cumulate';\n// Action\n// MTR 부분방전 이벤트 조회\nexport const getStatusMtrSpdcEvent: (fromDate: Date, toDate: Date, eqipId: string, snsrId: string, diag: string, page: number, top: number) =>\n  void = (fromDate, toDate, eqipId, snsrId, diag, page, top) => async (dispatch) => {\n  const skipItem = (page - 1) * top;\n  const requestUrl = `${mtrSpdcEventUrl}?` +\n    `fromDate=${moment(fromDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `toDate=${moment(toDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `eqipId=${eqipId}&snsrId=${snsrId}&diagCont=${diag}` +\n    `&skip=${skipItem}&top=${top}`;\n  await dispatch({\n    type: ACTION_TYPES.GET_STATUS_MTR_SPDC_EVENT,\n    payload: axios.get(requestUrl)\n  })\n}\n// MTR 부분방전 누적데이터 조회\nexport const getStatusMtrSpdcCumulate: (fromDate: Date, toDate: Date, eqipId: string, snsrId: string, diag: string, page: number, top: number) =>\n  void = (fromDate, toDate, eqipId, snsrId, diag, page, top) => async (dispatch) => {\n  const skipItem = (page - 1) * top;\n  const requestUrl = `${mtrSpdcCumulateUrl}?` +\n    `fromDate=${moment(fromDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `toDate=${moment(toDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `eqipId=${eqipId}&snsrId=${snsrId}&diagCont=${diag}` +\n    `&skip=${skipItem}&top=${top}`;\n  await dispatch({\n    type: ACTION_TYPES.GET_STATUS_MTR_SPDC_CUMULATE,\n    payload: axios.get(requestUrl)\n  })\n}\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\gis\\spdc\\spdc.reducer.ts",["834","835","836"],"import axios from 'axios';\n\nimport { REQUEST, SUCCESS, FAILURE} from '../../../../shared/reducers/action-type.util';\nimport { spdcTrendDefaultValue } from '../../../../shared/model/spdc-trend.model';\nimport moment from 'moment';\n\nexport const ACTION_TYPES = {\n  GET_TREND_GIS_SPDC_DATA: 'trend/gis/GET_TREND_GIS_SPDC_DATA',\n};\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  data: undefined,\n};\n\nexport type GisPdTrendState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: GisPdTrendState = initialState, action): GisPdTrendState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_TREND_GIS_SPDC_DATA):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_TREND_GIS_SPDC_DATA):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    case SUCCESS(ACTION_TYPES.GET_TREND_GIS_SPDC_DATA):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        data: action.payload.data.data,\n      }\n    default:\n      return state;\n  }\n}\n\nconst gisSpdcTrendUrl = '/GetTrend_GIS_PD';\n\n// Action\n// GIS 부분방전 이벤트 조회\nexport const getTrendGisSpdc: (fromDate: Date, toDate: Date, eqipId: string, snsrId: string, period: string) =>\n  void = (fromDate, toDate, eqipId, snsrId, period) => async (dispatch) => {\n  const requestUrl = `${gisSpdcTrendUrl}?` + `period=${period}&` +\n    `fromDate=${moment(fromDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `toDate=${moment(toDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `eqipId=${eqipId}&snsrId=${snsrId}`;\n  await dispatch({\n    type: ACTION_TYPES.GET_TREND_GIS_SPDC_DATA,\n    payload: axios.get(requestUrl)\n  })\n}\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\all\\all.reducer.ts",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\gis\\scbr\\scbr.reducer.ts",["837","838","839"],"import axios from 'axios';\n\nimport { REQUEST, SUCCESS, FAILURE} from '../../../../shared/reducers/action-type.util';\nimport { scbrTrendDefaultValue } from '../../../../shared/model/scbr-trend.model';\nimport moment from 'moment';\n\nexport const ACTION_TYPES = {\n  GET_TREND_SCBR_DATA: 'trend/gis/spdc/GET_TREND_SCBR_DATA',\n};\n//api데이터구조 - data1, data2, data3\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  data: undefined,\n};\n\nexport type GisCbTrendState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: GisCbTrendState = initialState, action): GisCbTrendState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_TREND_SCBR_DATA):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_TREND_SCBR_DATA):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    case SUCCESS(ACTION_TYPES.GET_TREND_SCBR_DATA):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n\t\tdata: action.payload.data,\n      }\n    default:\n      return state;\n  }\n}\n\nconst gisScbrTrendUrl = '/GetTrend_GIS_SCBR';\n\n// Action\n// GIS 부분방전 이벤트 조회\nexport const getTrendGisScbr: (fromDate: Date, toDate: Date, eqipId: string, snsrId: string, period: string, listcnt: number) =>\n  void = (fromDate, toDate, eqipId, snsrId, period, listcnt) => async (dispatch) => {\n  const requestUrl = `${gisScbrTrendUrl}?` + `period=${period}&` +\n    `fromDate=${moment(fromDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `toDate=${moment(toDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `eqipId=${eqipId}&snsrId=${snsrId}&selListCnt=${listcnt}`;\n  await dispatch({\n    type: ACTION_TYPES.GET_TREND_SCBR_DATA,\n    payload: axios.get(requestUrl)\n  })\n}\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\mtr\\spdc\\spdc.reducer.ts",["840","841","842"],"import axios from 'axios';\n\nimport { REQUEST, SUCCESS, FAILURE} from '../../../../shared/reducers/action-type.util';\nimport { spdcTrendDefaultValue } from '../../../../shared/model/spdc-trend.model';\nimport moment from 'moment';\n\nexport const ACTION_TYPES = {\n  GET_TREND_MTR_SPDC_DATA: 'trend/gis/GET_TREND_MTR_SPDC_DATA',\n};\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  data: undefined,\n};\n\nexport type MtrPdTrendState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: MtrPdTrendState = initialState, action): MtrPdTrendState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_TREND_MTR_SPDC_DATA):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_TREND_MTR_SPDC_DATA):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    case SUCCESS(ACTION_TYPES.GET_TREND_MTR_SPDC_DATA):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        data: action.payload.data.data,\n      }\n    default:\n      return state;\n  }\n}\n\nconst mtrSpdcTrendUrl = '/GetTrend_MTR_PD';\n\n// Action\n// GIS 부분방전 이벤트 조회\nexport const getTrendMtrSpdc: (fromDate: Date, toDate: Date, eqipId: string, snsrId: string, period: string) =>\n  void = (fromDate, toDate, eqipId, snsrId, period) => async (dispatch) => {\n  const requestUrl = `${mtrSpdcTrendUrl}?` + `period=${period}&` +\n    `fromDate=${moment(fromDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `toDate=${moment(toDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `eqipId=${eqipId}&snsrId=${snsrId}`;\n  await dispatch({\n    type: ACTION_TYPES.GET_TREND_MTR_SPDC_DATA,\n    payload: axios.get(requestUrl)\n  })\n}\n\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\gis\\all\\all-trend.reducer.ts",["843","844"],"import axios from 'axios';\n\nimport { REQUEST, SUCCESS, FAILURE} from '../../../../shared/reducers/action-type.util';\nimport moment from 'moment';\n\nexport const ACTION_TYPES = {\n\tGET_TREND_GIS_DATA: 'trend/gis/GET_TREND_GIS_DATA',\n};\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  data: undefined,\n};\n\nexport type GisPdTrendAllState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: GisPdTrendAllState = initialState, action): GisPdTrendAllState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_TREND_GIS_DATA):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_TREND_GIS_DATA):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    case SUCCESS(ACTION_TYPES.GET_TREND_GIS_DATA):\n\n\t\treturn {\n\t\t\t...state,\n\t\t\tloading: false,\n\t\t\terrorMessage: null,\n\t\t\tdata: action.payload.data,\n\t\t}\n    default:\n      return state;\n  }\n}\n\nconst gisSpdcTrendUrl = '/GetTrend_GIS_ALL';\n\n// Action\nexport const getTrendGisAll: (fromDate: Date, toDate: Date, period: string) =>\n  void = (fromDate, toDate, period) => async (dispatch) => {\n  const requestUrl = `${gisSpdcTrendUrl}?` + `period=${period}&` +\n    `fromDate=${moment(fromDate).format('YYYY-MM-DD')}&` +\n    `toDate=${moment(toDate).format('YYYY-MM-DD')}`;\n\n  await dispatch({\n    type: ACTION_TYPES.GET_TREND_GIS_DATA,\n    payload: axios.get(requestUrl)\n  })\n}\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\mtr\\oltc-ofu\\oltc-ofu.reducer.ts",["845","846","847","848"],"import axios from 'axios';\n\nimport { REQUEST, SUCCESS, FAILURE } from '../../../../shared/reducers/action-type.util';\nimport moment from 'moment';\n\nexport const ACTION_TYPES = {\n\tGET_STATUS_OLTC_OFU_ROW: 'status/mtr/GET_STATUS_OLTC_OFU_ROW',\n\tGET_STATUS_OLTC_OFU_GRAPH: 'status/mtr/GET_STATUS_OLTC_OFU_GRAPH',\n\tGET_TREND_OLTC_OFU_DATA: 'trend/mtr/GET_TREND_OLTC_OFU_DATA',\n\t\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  data: undefined,\n\teventDetail: undefined,\n\teventGraph: undefined,\n};\n\nexport type TrendMtrOltcState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: TrendMtrOltcState = initialState, action): TrendMtrOltcState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_TREND_OLTC_OFU_DATA):\n    case REQUEST(ACTION_TYPES.GET_STATUS_OLTC_OFU_ROW):\n    case REQUEST(ACTION_TYPES.GET_STATUS_OLTC_OFU_GRAPH):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_TREND_OLTC_OFU_DATA):\n    case FAILURE(ACTION_TYPES.GET_STATUS_OLTC_OFU_ROW):\n    case FAILURE(ACTION_TYPES.GET_STATUS_OLTC_OFU_GRAPH):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    case SUCCESS(ACTION_TYPES.GET_TREND_OLTC_OFU_DATA):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n\t\t\t\tdata : action.payload.data.data,\n      }\n\t\tcase SUCCESS(ACTION_TYPES.GET_STATUS_OLTC_OFU_ROW):\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: false,\n\t\t\t\terrorMessage: null,\n\t\t\t\teventDetail : action.payload.data.data,\n\t\t\t}\n\t\tcase SUCCESS(ACTION_TYPES.GET_STATUS_OLTC_OFU_GRAPH):\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: false,\n\t\t\t\terrorMessage: null,\n\t\t\t\teventGraph : action.payload.data,\n\t\t\t}\n    default:\n      return state;\n  }\n}\n\nconst getTrendMtrOltcUrl = '/GetTrend_MTR_OLTC';\n\n// Action\nexport const getTrendMtrOltc : (fromDate: Date, toDate: Date, eqipId: string, snsrId: string, period: string) =>\n  void = (fromDate, toDate, eqipId, snsrId, period) => async (dispatch) => {\n\n  const requestUrl = `${getTrendMtrOltcUrl}?` + `period=${period}&` +\n    `fromDate=${moment(fromDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `toDate=${moment(toDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `eqipId=${eqipId}&snsrId=${snsrId}`;\n\n\tawait dispatch({\n\t\ttype: ACTION_TYPES.GET_TREND_OLTC_OFU_DATA,\n\t\tpayload: axios.get(requestUrl)\n\t})\n}\n\nconst getStatusEventRowUrl = '/GetStatus_MTR_OLTC_SelectRow';\n\n// Action\nexport const getStatusEventRow : (oltcId: string) =>\n  void = (oltcId) => async (dispatch) => {\n\n  const requestUrl = `${getStatusEventRowUrl}?` + `oltcId=${oltcId}`;\n\t\n\tawait dispatch({\n\t\ttype: ACTION_TYPES.GET_STATUS_OLTC_OFU_ROW,\n\t\tpayload: axios.get(requestUrl)\n\t})\n}\n\nconst getStatusEventGraphUrl = '/GetStatus_MTR_OLTC_Graph';\n\n// Action\nexport const getStatusEventGraph : (evntId: string) =>\n  void = (evntId) => async (dispatch) => {\n\n  const requestUrl = `${getStatusEventGraphUrl}?` + `evntId=${evntId}`;\n\tconsole.log(requestUrl);\n\t\n\tawait dispatch({\n\t\ttype: ACTION_TYPES.GET_STATUS_OLTC_OFU_GRAPH,\n\t\tpayload: axios.get(requestUrl)\n\t})\n}\n\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\mtr\\oltc-spdc\\oltc-spdc.reducer.ts",["849","850","851"],"import axios from 'axios';\n\nimport { REQUEST, SUCCESS, FAILURE} from '../../../../shared/reducers/action-type.util';\nimport { spdcTrendDefaultValue } from '../../../../shared/model/spdc-trend.model';\nimport moment from 'moment';\n\nexport const ACTION_TYPES = {\n  GET_TREND_OLTC_SPDC_DATA: 'trend/gis/GET_TREND_OLTC_SPDC_DATA',\n};\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  data: undefined,\n};\n\nexport type OltcPdTrendState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: OltcPdTrendState = initialState, action): OltcPdTrendState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_TREND_OLTC_SPDC_DATA):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_TREND_OLTC_SPDC_DATA):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    case SUCCESS(ACTION_TYPES.GET_TREND_OLTC_SPDC_DATA):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        data: action.payload.data.data,\n      }\n    default:\n      return state;\n  }\n}\n\nconst mtrOltcSpdcTrendUrl = '/GetTrend_OLTC_PD';\n\n// Action\n// GIS 부분방전 이벤트 조회\nexport const getTrendOltcSpdc: (fromDate: Date, toDate: Date, eqipId: string, snsrId: string, period: string) =>\n  void = (fromDate, toDate, eqipId, snsrId, period) => async (dispatch) => {\n  const requestUrl = `${mtrOltcSpdcTrendUrl}?` + `period=${period}&` +\n    `fromDate=${moment(fromDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `toDate=${moment(toDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `eqipId=${eqipId}&snsrId=${snsrId}`;\n  await dispatch({\n    type: ACTION_TYPES.GET_TREND_OLTC_SPDC_DATA,\n    payload: axios.get(requestUrl)\n  })\n}\n\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\index.tsx",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\alarm\\index.tsx",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\index.tsx",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\exam\\index.tsx",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\index.tsx",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\index.tsx",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\alarm\\alarm-non-recognition-popup.tsx",["852","853","854"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { Link } from 'react-router-dom';\nimport { getAlarmNonRecognition, setAlarmCheck, setAlarmRecognition, setIsAlwaysAlarmPopup } from './alarm.reducer';\nimport moment from 'moment';\nimport { Storage } from '../../shared/util/storage-util';\n\nexport interface AlarmNonRecognitionPopup {\n  closeCallback: Function;\n}\nexport interface IAlarmPopupProps extends StateProps, DispatchProps, AlarmNonRecognitionPopup {}\n\n/**\n * 미인지 알람 팝업\n * @param props\n * @constructor\n */\nexport const AlarmNonRecognitionPopup = (props: IAlarmPopupProps) => {\n\n  const [isAlways, setIsAlways] = useState(false);\n\n  useEffect(() => {\n    let isAlwaysAlarm = Storage.local.get('isAlwaysAlarm') || false;\n    if (isAlwaysAlarm) {\n      setIsAlways(true);\n      props.setIsAlwaysAlarmPopup(true);\n    }\n  }, []);\n\n  const toggleAlarmCheck = e => {\n    let checked = e.target.checked;\n    setIsAlways(checked);\n    props.setIsAlwaysAlarmPopup(checked);\n    if (checked) {\n      Storage.local.set('isAlwaysAlarm', true);\n    } else {\n      Storage.local.remove('isAlwaysAlarm');\n    }\n  }\n\n  const setRecognition = alarmId => {\n    props.setAlarmRecognition(props.account.USER_ID, alarmId);\n    props.getAlarmNonRecognition();\n  }\n\n  return (\n    <>\n      <div className=\"layer-wrap alarm\" data-layer=\"alarm\">\n        <div className=\"popup-wrapper\">\n          <div className=\"popup-container\">\n            <div className=\"title-area\">\n              <h3>미인지 알람 <span className=\"txt-color mint text-bold\">{props.nonRecognitionList.length}</span></h3>\n              <div className=\"side-btn\">\n                <input type=\"checkbox\" className=\"obj-check\" id=\"always\" checked={isAlways} onChange={toggleAlarmCheck} />\n                <label className=\"obj-check-box\" htmlFor=\"always\" /> <span>알람 발생 시, 항상 팝업 보이기</span>\n                <Link to={'/alarm/list/alarm-list'} onClick={() => props.closeCallback()}>목록</Link>\n                <a href='#' className='btn-close' onClick={() => props.closeCallback()}>닫기</a>\n              </div>\n            </div>\n            <div className=\"table-area\">\n              <table className=\"table-db\">\n                <thead>\n                <tr>\n                  <th>센서</th>\n                  <th>발생일시</th>\n                  <th>알람종류</th>\n                  <th>내용</th>\n                  <th>\n                    <label className={`obj-text-box ${props.account?.AUTH_LVL > 1 && 'all'}`}\n                           onClick={() => {\n                             if (props.account?.AUTH_LVL > 1) {\n                               setRecognition(0);\n                             }\n                           }}>전체 인지</label>\n                  </th>\n                </tr>\n                </thead>\n                <tbody>\n                {\n                  props.nonRecognitionList.length ?\n                    props.nonRecognitionList\n                      .filter((alarm, index) => index < 5)\n                      .map((alarm, index) => {\n                        return (\n                          <tr key={index}>\n                            <td><span>{alarm.SNSR_NM}</span></td>\n                            <td><span>{moment(alarm.OCCR_TIME).format('YYYY-MM-DD HH:mm:ss')}</span></td>\n                            <td><span>{alarm.ALRM_TYPE}</span></td>\n                            {/*<td><span className=\"txt-color pink\">[주의]</span><span>MLU03 (OLTC-Motor) 에서 OLTC 알람</span></td>*/}\n                            <td><span>{alarm.MESSAGE}</span></td>\n                            <td>\n                              <label className={`obj-text-box ${props.account && 'one'}`}\n                                     onClick={() => {\n                                       if (props.account?.AUTH_LVL) {\n                                         setRecognition(alarm.ALRM_ID);\n                                       }\n                                     }}>인지</label>\n                            </td>\n                          </tr>\n                        )\n                      })\n                    :\n                    <tr><td colSpan={5}><span>미인지 알람 없음</span></td></tr>\n                }\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ authentication, alarm }: IRootState) => ({\n  account: authentication.account,\n  nonRecognitionList: alarm.nonRecognitionList,\n  isAlwaysAlarmPopup: alarm.isAlwaysAlarmPopup,\n  // loginId\n});\n\nconst mapDispatchToProps = {\n  getAlarmNonRecognition,\n  setIsAlwaysAlarmPopup,\n  setAlarmRecognition,  // 인지\n  setAlarmCheck,        // 확인\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AlarmNonRecognitionPopup);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\main\\diagram-gis.tsx",["855"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { IDiagramEquipment } from '../../shared/model/diagram-equipment.model';\nimport { IDiagramSensor } from '../../shared/model/diagram-sensor.model';\nimport GisModule from './diagram-gis-module';\n\nexport interface IDiagramGis {\n  equipmentList?: Array<IDiagramEquipment>,\n  sensorList?: Array<IDiagramSensor>,\n  isSecondRow?: boolean;\n}\nexport interface IDiagramGisProps extends StateProps, DispatchProps,IDiagramGis {}\n\nexport const DiagramGis = (props: IDiagramGisProps) => {\n\n  let gisIndex = props.isSecondRow ? 18 : 0;\n\n  useEffect(() => {\n  }, []);\n\n  const returnGisSensorList = (gisMtrNum) => {\n    return props.sensorList?.filter(sensor => sensor.GIS_MTR_NUM === gisMtrNum);\n  }\n\n  return (\n    <>\n      <div className='liner gap-down-20'>\n        {\n          props.equipmentList?.map((eqip, eqipIndex) => {\n            gisIndex++;\n            let dummyNumberList = [];\n            while (gisIndex !== parseInt(eqip.GIS_MTR_NUM)) {\n              console.log(gisIndex);\n              dummyNumberList.push({});\n              gisIndex++;\n            }\n            return (\n              <>\n                {\n                  dummyNumberList.map((dummy, index) => <section className=\"sector c01\"></section>)\n                }\n                <GisModule key={eqipIndex} gisType={'both'} gisName={eqip.GIS_MTR_TITLE} gisSensorList={returnGisSensorList(eqip.GIS_MTR_NUM)} />\n              </>\n            )\n            // return (\n            //   <GisModule key={eqipIndex} gisType={'both'} gisName={eqip.GIS_MTR_TITLE} gisSensorList={returnGisSensorList(eqip.GIS_MTR_NUM)} />\n            // )\n          })\n          // props.equipmentList?.map((eqip, eqipIndex) => (\n          //   <GisModule key={eqipIndex} gisType={'both'} gisName={eqip.GIS_MTR_TITLE} gisSensorList={returnGisSensorList(eqip.GIS_MTR_NUM)} />\n          // ))\n        }\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ authentication }: IRootState) => ({\n  // isAuthenticated: authentication.isAuthenticated,\n  // isAdmin: hasAnyAuthority(authentication.account.authorities, [AUTHORITIES.ADMIN]),\n});\n\nconst mapDispatchToProps = {\n  // getSession\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DiagramGis);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\main\\diagram-mtr.tsx",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\main\\diagram-mtr-table.tsx",["856"],"import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { IDiagramGridSensor } from '../../shared/model/diagram-grid-sensor.model';\n\nexport interface DiagramMtrTable {\n  mtrName?: string,\n  mtrGrid?: ReadonlyArray<IDiagramGridSensor>,\n}\nexport interface IDiagramMtrTableProps extends StateProps, DispatchProps, DiagramMtrTable {}\n\nexport const DiagramMtrTable = (props: IDiagramMtrTableProps) => {\n\n  useEffect(() => {\n  }, []);\n\n  return (\n    <>\n      <div className=\"width-2 table-wrap\" style={{marginLeft:'60px'}}>\n        <table className=\"substation-table\">\n          <colgroup>\n            <col style={{width:'25%'}}/>\n            <col style={{width:'22%'}}/>\n            <col style={{width:'28%'}}/>\n            <col style={{width:'25%'}}/>\n          </colgroup>\n          <thead>\n          <tr>\n            <th colSpan={4} className=\"caption\">\n              {props.mtrName}\n            </th>\n          </tr>\n          </thead>\n          <tbody>\n          {\n            props.mtrGrid?.map(sensor => (\n              <tr key={sensor.ID}>\n                <th>{sensor.SNSR_GROUP}</th>\n                <th>{sensor.GUBUN}</th>\n                <th>{sensor.DESC}</th>\n                <td>값</td>\n              </tr>\n            ))\n          }\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ authentication }: IRootState) => ({\n  // isAuthenticated: authentication.isAuthenticated,\n  // isAdmin: hasAnyAuthority(authentication.account.authorities, [AUTHORITIES.ADMIN]),\n});\n\nconst mapDispatchToProps = {\n  // getSession\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DiagramMtrTable);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\mtr\\dga\\dga.reducer.ts",["857","858"],"import axios from 'axios';\n\nimport { REQUEST, SUCCESS, FAILURE } from '../../../../shared/reducers/action-type.util';\nimport moment from 'moment';\n\nexport const ACTION_TYPES = {\n\tGET_TREND_DGA_DATA: 'trend/mtr/GET_TREND_DGA_DATA',\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  data: undefined,\n};\n\nexport type TrendMtrDgaState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: TrendMtrDgaState = initialState, action): TrendMtrDgaState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_TREND_DGA_DATA):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_TREND_DGA_DATA):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    case SUCCESS(ACTION_TYPES.GET_TREND_DGA_DATA):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n\t\t\t\tdata : action.payload.data,\n      }\n    default:\n      return state;\n  }\n}\n\nconst getTrendMtrOltcUrl = '/GetTrend_MTR_SIML';\n\n// Action\nexport const getTrendMtrDga : (fromDate: Date, toDate: Date, eqipId: string, snsrId: string, period: string) =>\n  void = (fromDate, toDate, eqipId, snsrId, period) => async (dispatch) => {\n\n  const requestUrl = `${getTrendMtrOltcUrl}?` + `period=${period}&` +\n    `fromDate=${moment(fromDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `toDate=${moment(toDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `eqipId=${eqipId}&snsrId=${snsrId}`;\n\n\tawait dispatch({\n\t\ttype: ACTION_TYPES.GET_TREND_DGA_DATA,\n\t\tpayload: axios.get(requestUrl)\n\t})\n}\n\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\gis\\scbr\\scbr.reducer.ts",["859","860","861","862"],"import axios from 'axios';\n\nimport { REQUEST, SUCCESS, FAILURE } from '../../../../shared/reducers/action-type.util';\nimport { IScbrEvent } from '../../../../shared/model/scbr-event.model';\nimport moment from 'moment';\n\nexport const ACTION_TYPES = {\n  GET_STATUS_GIS_SCBR_EVENT: 'status/gis/scbr/GET_STATUS_GIS_SCBR_EVENT',\n  GET_STATUS_GIS_SCBR_GRAPH: 'status/gis/scbr/GET_STATUS_GIS_SCBR_GRAPH',\n  GET_STATUS_GIS_SCBR_SET_STANDARD: 'status/gis/scbr/GET_STATUS_GIS_SCBR_SET_STANDARD',\n  GET_STATUS_GIS_SCBR_SELECT: 'status/gis/scbr/GET_STATUS_GIS_SCBR_SELECT',\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  scbrEventList: [] as ReadonlyArray<IScbrEvent>,\n  scbrEventListTotalCount: 0,\n\tscbrGraphData: null,\n\tscbrSetStandard: '',\n\tscbrSelectedData: null,\n};\n\nexport type GisCbEventState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: GisCbEventState = initialState, action): GisCbEventState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_STATUS_GIS_SCBR_EVENT):\n    case REQUEST(ACTION_TYPES.GET_STATUS_GIS_SCBR_GRAPH):\n    case REQUEST(ACTION_TYPES.GET_STATUS_GIS_SCBR_SET_STANDARD):\n    case REQUEST(ACTION_TYPES.GET_STATUS_GIS_SCBR_SELECT):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_STATUS_GIS_SCBR_EVENT):\n    case FAILURE(ACTION_TYPES.GET_STATUS_GIS_SCBR_GRAPH):\n    case FAILURE(ACTION_TYPES.GET_STATUS_GIS_SCBR_SET_STANDARD):\n    case FAILURE(ACTION_TYPES.GET_STATUS_GIS_SCBR_SELECT):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    case SUCCESS(ACTION_TYPES.GET_STATUS_GIS_SCBR_EVENT):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        scbrEventList: action.payload.data.Records,\n        scbrEventListTotalCount: action.payload.data.TotalCount,\n      }\n\t\tcase SUCCESS(ACTION_TYPES.GET_STATUS_GIS_SCBR_GRAPH):\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\tloading: false,\n\t\t\t\t\terrorMessage: null,\n\t\t\t\t\tscbrGraphData: action.payload.data,\n\t\t\t\t}\n\t\tcase SUCCESS(ACTION_TYPES.GET_STATUS_GIS_SCBR_SET_STANDARD):\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\tloading: false,\n\t\t\t\t\terrorMessage: null,\n\t\t\t\t\tscbrSetStandard: action.payload.data,\n\t\t\t\t}\n\t\tcase SUCCESS(ACTION_TYPES.GET_STATUS_GIS_SCBR_SELECT):\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\tloading: false,\n\t\t\t\t\terrorMessage: null,\n\t\t\t\t\tscbrSelectedData: action.payload.data.data,\n\t\t\t\t}\t\t\n    default:\n      return state;\n  }\n}\n\nconst gisScbrEventUrl = '/GetStatus_GIS_SCBR';\n\n// Action\n// GIS 차단기 동작특성 이벤트 조회\nexport const getStatusGisScbrEvent: (fromDate: Date, toDate: Date, eqipId: string, snsrId: string, diag: string, page: number, top: number) =>\n  void = (fromDate, toDate, eqipId, snsrId, diag, page, top) => async (dispatch) => {\n  const skipItem = (page - 1) * top;\n  const requestUrl = `${gisScbrEventUrl}?` +\n    `fromDate=${moment(fromDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `toDate=${moment(toDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `eqipId=${eqipId}&snsrId=${snsrId}&diagCont=${diag}` +\n    `&skip=${skipItem}&top=${top}`;\n  await dispatch({\n    type: ACTION_TYPES.GET_STATUS_GIS_SCBR_EVENT,\n    payload: axios.get(requestUrl)\n  })\n}\n\nconst gisScbrDetailUrl = '/GetStatus_GIS_SCBR_Graph_sample';\n\n// Action\n// GIS 차단기 동작특성 이벤트 조회\nexport const getStatusGisScbrGraph: ( evntId: number, type: string) =>\n  void = (evntId, type) => async (dispatch) => {\n  // const requestUrl = `${gisScbrDetailUrl}?` + `evntId=${evntId}`;\n  const requestUrl = `${gisScbrDetailUrl}?` + `type=${type}`;\n  await dispatch({\n    type: ACTION_TYPES.GET_STATUS_GIS_SCBR_GRAPH,\n    payload: axios.get(requestUrl)\n  })\n}\n\nconst gisScbrCompareUrl = '/GetStatus_GIS_SCBR_CompareData';\n\n// Action\n// GIS 차단기 동작특성 이벤트 조회\nexport const setStatusGisScbrCompare: ( evntId: number ) =>\n  void = (evntId) => async (dispatch) => {\n  const requestUrl = `${gisScbrCompareUrl}?` + `evntId=${evntId}`;\n\tconsole.log(requestUrl);\n  await dispatch({\n    type: ACTION_TYPES.GET_STATUS_GIS_SCBR_SET_STANDARD,\n    payload: axios.get(requestUrl)\n  })\n}\n\nconst gisScbrSelectUrl = '/GetStatus_GIS_SCBR_SelectRow';\n\n// Action\n// GIS 차단기 동작특성 이벤트 조회\nexport const setStatusGisScbrSelect: ( scbrId: number ) =>\n  void = (scbrId) => async (dispatch) => {\n  // const requestUrl = `${gisScbrSelectUrl}?` + `scbrId=${scbrId}`;\n  const requestUrl = `${gisScbrSelectUrl}?` + `scbrId=${5307}`;\n\tconsole.log(requestUrl);\n  await dispatch({\n    type: ACTION_TYPES.GET_STATUS_GIS_SCBR_SELECT,\n    payload: axios.get(requestUrl)\n  })\n}\n\n\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\mtr\\bushing\\bushing.reducer.ts",["863","864"],"import axios from 'axios';\n\nimport { REQUEST, SUCCESS, FAILURE } from '../../../../shared/reducers/action-type.util';\nimport moment from 'moment';\n\nexport const ACTION_TYPES = {\n\tGET_TREND_BUSHING_DATA: 'trend/mtr/GET_TREND_BUSHING_DATA',\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  data: undefined,\n};\n\nexport type TrendMtrBushingState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: TrendMtrBushingState = initialState, action): TrendMtrBushingState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_TREND_BUSHING_DATA):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_TREND_BUSHING_DATA):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    case SUCCESS(ACTION_TYPES.GET_TREND_BUSHING_DATA):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n\t\t\t\tdata : action.payload.data,\n      }\n    default:\n      return state;\n  }\n}\n\nconst getRestUrl = '/GetTrend_MTR_SBSH';\n\n// Action\nexport const getTrendMtrBushing : (fromDate: Date, toDate: Date, eqipId: string, snsrId: string, period: string) =>\n  void = (fromDate, toDate, eqipId, snsrId, period) => async (dispatch) => {\n\n  const requestUrl = `${getRestUrl}?` + `period=${period}&` +\n    `fromDate=${moment(fromDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `toDate=${moment(toDate).format('YYYY-MM-DD HH:mm:ss.SSS')}&` +\n    `eqipId=${eqipId}&snsrId=${snsrId}`;\n\n\tawait dispatch({\n\t\ttype: ACTION_TYPES.GET_TREND_BUSHING_DATA,\n\t\tpayload: axios.get(requestUrl)\n\t})\n}\n\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\mtr\\all\\all-trend.reducer.ts",["865","866"],"import axios from 'axios';\n\nimport { REQUEST, SUCCESS, FAILURE} from '../../../../shared/reducers/action-type.util';\nimport moment from 'moment';\n\nexport const ACTION_TYPES = {\n\tGET_TREND_MTR_DATA: 'trend/mtr/GET_TREND_MTR_DATA',\n};\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  data: undefined,\n};\n\nexport type MtrPdTrendAllState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: MtrPdTrendAllState = initialState, action): MtrPdTrendAllState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_TREND_MTR_DATA):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_TREND_MTR_DATA):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    case SUCCESS(ACTION_TYPES.GET_TREND_MTR_DATA):\n\n\t\treturn {\n\t\t\t...state,\n\t\t\tloading: false,\n\t\t\terrorMessage: null,\n\t\t\tdata: action.payload.data,\n\t\t}\n    default:\n      return state;\n  }\n}\n\nconst gisSpdcTrendUrl = '/GetTrend_MTR_All';\n\n// Action\n// MTR 설비별 진단 경향 조회\nexport const getTrendMtrAll: (fromDate: Date, toDate: Date, period: string) =>\n  void = (fromDate, toDate, period) => async (dispatch) => {\n  const requestUrl = `${gisSpdcTrendUrl}?` + `period=${period}&` +\n    `fromDate=${moment(fromDate).format('YYYY-MM-DD')}&` +\n    `toDate=${moment(toDate).format('YYYY-MM-DD')}`;\n\n  await dispatch({\n    type: ACTION_TYPES.GET_TREND_MTR_DATA,\n    payload: axios.get(requestUrl)\n  })\n}\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\mtr\\dga\\reducer.ts",["867","868"],"import axios from 'axios';\n\nimport { REQUEST, SUCCESS, FAILURE} from 'shared/reducers/action-type.util';\nimport moment from 'moment';\n\nexport const ACTION_TYPES = {\n  GET_REPORT_MTR_DGA: 'report/gis/GET_REPORT_MTR_DGA',\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  data: undefined,\n};\n\nexport type ReportMtrDgaState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: ReportMtrDgaState = initialState, action): ReportMtrDgaState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_REPORT_MTR_DGA):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_REPORT_MTR_DGA):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    case SUCCESS(ACTION_TYPES.GET_REPORT_MTR_DGA):\n\t\t\tconsole.log(action.type);\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        data: action.payload.data,\n      }\n    default:\n      return state;\n  }\n}\n\nconst apiUrl = '/GetReport_DGA';\n\n// Action\nexport const getReportMtrDga: (targetDate: Date, subs_id?: number) =>\n  void = (targetDate, subs_id=1) => async (dispatch) => {\n\n  const requestUrl = `${apiUrl}?` + `subs_id=${subs_id}&` +\n    `targetDate=${moment(targetDate).format('YYYY-MM-DD')}`;\n\n  await dispatch({\n    type: ACTION_TYPES.GET_REPORT_MTR_DGA,\n    payload: axios.get(requestUrl)\n  })\n}\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\gis\\spdc\\reducer.ts",["869","870"],"import axios from 'axios';\n\n// import { REQUEST, SUCCESS, FAILURE} from '../../../../shared/reducers/action-type.util';\nimport { REQUEST, SUCCESS, FAILURE} from 'shared/reducers/action-type.util';\nimport moment from 'moment';\n\nexport const ACTION_TYPES = {\n  GET_REPORT_GIS_SPDC: 'report/gis/GET_REPORT_GIS_SPDC',\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  data: undefined,\n};\n\nexport type ReportGisSpdcState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: ReportGisSpdcState = initialState, action): ReportGisSpdcState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_REPORT_GIS_SPDC):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_REPORT_GIS_SPDC):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    case SUCCESS(ACTION_TYPES.GET_REPORT_GIS_SPDC):\n\t\t\tconsole.log(action.type);\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        data: action.payload.data,\n      }\n    default:\n      return state;\n  }\n}\n\nconst apiUrl = '/GetReport_GIS_PD';\n\n// Action\nexport const getReportGisSpdc: (targetDate: Date, subs_id?: number) =>\n  void = (targetDate, subs_id=1) => async (dispatch) => {\n\n  const requestUrl = `${apiUrl}?` + `subs_id=${subs_id}&` +\n    `targetDate=${moment(targetDate).format('YYYY-MM-DD')}`;\n\n  await dispatch({\n    type: ACTION_TYPES.GET_REPORT_GIS_SPDC,\n    payload: axios.get(requestUrl)\n  })\n}\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\gis\\scbr\\reducer.ts",["871","872"],"import axios from 'axios';\n\n// import { REQUEST, SUCCESS, FAILURE} from '../../../../shared/reducers/action-type.util';\nimport { REQUEST, SUCCESS, FAILURE} from 'shared/reducers/action-type.util';\nimport moment from 'moment';\n\nexport const ACTION_TYPES = {\n  GET_REPORT_GIS_SCBR: 'report/gis/GET_REPORT_GIS_SCBR',\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  data: undefined,\n};\n\nexport type ReportGisScbrState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: ReportGisScbrState = initialState, action): ReportGisScbrState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_REPORT_GIS_SCBR):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_REPORT_GIS_SCBR):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    case SUCCESS(ACTION_TYPES.GET_REPORT_GIS_SCBR):\n\t\t\tconsole.log(action.type);\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        data: action.payload.data,\n      }\n    default:\n      return state;\n  }\n}\n\nconst apiUrl = '/GetReport_GIS_CB';\n\n// Action\nexport const getReportGisScbr: (targetDate: Date, subs_id?: number) =>\n  void = (targetDate, subs_id=1) => async (dispatch) => {\n\n  const requestUrl = `${apiUrl}?` + `subs_id=${subs_id}&` +\n    `targetDate=${moment(targetDate).format('YYYY-MM-DD')}`;\n\n\tconsole.log(requestUrl);\n\n  await dispatch({\n    type: ACTION_TYPES.GET_REPORT_GIS_SCBR,\n    payload: axios.get(requestUrl)\n  })\n}\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\mtr\\oltc-ofu\\reducer.ts",["873","874"],"import axios from 'axios';\n\nimport { REQUEST, SUCCESS, FAILURE} from 'shared/reducers/action-type.util';\nimport moment from 'moment';\n\nexport const ACTION_TYPES = {\n  GET_REPORT_MTR_OLTC_OFU: 'report/gis/GET_REPORT_MTR_OLTC_OFU',\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  data: undefined,\n};\n\nexport type ReportMtrOltcOfuState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: ReportMtrOltcOfuState = initialState, action): ReportMtrOltcOfuState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_REPORT_MTR_OLTC_OFU):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_REPORT_MTR_OLTC_OFU):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    case SUCCESS(ACTION_TYPES.GET_REPORT_MTR_OLTC_OFU):\n\t\t\tconsole.log(action.type);\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        data: action.payload.data,\n      }\n    default:\n      return state;\n  }\n}\n\nconst apiUrl = '/GetReport_OLTC_MOTOR';\n\n// Action\nexport const getReportMtrOltcOfu: (targetDate: Date, subs_id?: number) =>\n  void = (targetDate, subs_id=1) => async (dispatch) => {\n\n  const requestUrl = `${apiUrl}?` + `subs_id=${subs_id}&` +\n    `targetDate=${moment(targetDate).format('YYYY-MM-DD')}`;\n\n  await dispatch({\n    type: ACTION_TYPES.GET_REPORT_MTR_OLTC_OFU,\n    payload: axios.get(requestUrl)\n  })\n}\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\mtr\\oltc-spdc\\reducer.ts",["875","876"],"import axios from 'axios';\n\nimport { REQUEST, SUCCESS, FAILURE} from 'shared/reducers/action-type.util';\nimport moment from 'moment';\n\nexport const ACTION_TYPES = {\n  GET_REPORT_MTR_OLTC_SPDC: 'report/gis/GET_REPORT_MTR_OLTC_SPDC',\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  data: undefined,\n};\n\nexport type ReportMtrOltcSpdcState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: ReportMtrOltcSpdcState = initialState, action): ReportMtrOltcSpdcState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_REPORT_MTR_OLTC_SPDC):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_REPORT_MTR_OLTC_SPDC):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    case SUCCESS(ACTION_TYPES.GET_REPORT_MTR_OLTC_SPDC):\n\t\t\tconsole.log(action.type);\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        data: action.payload.data,\n      }\n    default:\n      return state;\n  }\n}\n\nconst apiUrl = '/GetReport_OLTC_PD';\n\n// Action\nexport const getReportMtrOltcSpdc: (targetDate: Date, subs_id?: number) =>\n  void = (targetDate, subs_id=1) => async (dispatch) => {\n\n  const requestUrl = `${apiUrl}?` + `subs_id=${subs_id}&` +\n    `targetDate=${moment(targetDate).format('YYYY-MM-DD')}`;\n\n  await dispatch({\n    type: ACTION_TYPES.GET_REPORT_MTR_OLTC_SPDC,\n    payload: axios.get(requestUrl)\n  })\n}\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\mtr\\spdc\\reducer.ts",["877","878"],"import axios from 'axios';\n\nimport { REQUEST, SUCCESS, FAILURE} from 'shared/reducers/action-type.util';\nimport moment from 'moment';\n\nexport const ACTION_TYPES = {\n  GET_REPORT_MTR_SPDC: 'report/gis/GET_REPORT_MTR_SPDC',\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  data: undefined,\n};\n\nexport type ReportMtrSpdcState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: ReportMtrSpdcState = initialState, action): ReportMtrSpdcState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_REPORT_MTR_SPDC):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_REPORT_MTR_SPDC):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    case SUCCESS(ACTION_TYPES.GET_REPORT_MTR_SPDC):\n\t\t\tconsole.log(action.type);\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        data: action.payload.data,\n      }\n    default:\n      return state;\n  }\n}\n\nconst apiUrl = '/GetReport_MTR_PD';\n\n// Action\nexport const getReportMtrSpdc: (targetDate: Date, subs_id?: number) =>\n  void = (targetDate, subs_id=1) => async (dispatch) => {\n\n  const requestUrl = `${apiUrl}?` + `subs_id=${subs_id}&` +\n    `targetDate=${moment(targetDate).format('YYYY-MM-DD')}`;\n\n  await dispatch({\n    type: ACTION_TYPES.GET_REPORT_MTR_SPDC,\n    payload: axios.get(requestUrl)\n  })\n}\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\mtr\\bushing\\reducer.ts",["879","880"],"import axios from 'axios';\n\n// import { REQUEST, SUCCESS, FAILURE} from '../../../../shared/reducers/action-type.util';\nimport { REQUEST, SUCCESS, FAILURE} from 'shared/reducers/action-type.util';\nimport moment from 'moment';\n\nexport const ACTION_TYPES = {\n  GET_REPORT_MTR_BUSHING: 'report/gis/GET_REPORT_MTR_BUSHING',\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  data: undefined,\n};\n\nexport type ReportMtrBushingState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: ReportMtrBushingState = initialState, action): ReportMtrBushingState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_REPORT_MTR_BUSHING):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.GET_REPORT_MTR_BUSHING):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload,\n      }\n    case SUCCESS(ACTION_TYPES.GET_REPORT_MTR_BUSHING):\n\t\t\tconsole.log(action.type);\n      return {\n        ...state,\n        loading: false,\n        errorMessage: null,\n        data: action.payload.data,\n      }\n    default:\n      return state;\n  }\n}\n\nconst apiUrl = '/GetReport_BUSHING';\n\n// Action\nexport const getReportMtrBushing: (targetDate: Date, subs_id?: number) =>\n  void = (targetDate, subs_id=1) => async (dispatch) => {\n\n  const requestUrl = `${apiUrl}?` + `subs_id=${subs_id}&` +\n    `targetDate=${moment(targetDate).format('YYYY-MM-DD')}`;\n\n  await dispatch({\n    type: ACTION_TYPES.GET_REPORT_MTR_BUSHING,\n    payload: axios.get(requestUrl)\n  })\n}\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\popup\\pdlibrary\\pdlibrary.reducer.ts",["881","882","883","884","885"],"import axios from 'axios';\nimport { isSampleApi, request } from '../../../../env';\n\nimport { FAILURE, REQUEST, SUCCESS } from 'shared/reducers/action-type.util';\n\nexport interface IPdLibList {\n\tID?: string,\n\tLBRY_NM?: string,\n\tLIBRARY_TYPE?: string,\n\tPD_TYPE?: string,\n\tLBRY_DESC?: string | null,\n\tFILE_PATH?: string | null, \n\tSTDY_YN?: boolean,\n\tCREA_TIME?: Date | null,\n\tUSER_ID?: string,\n\tGUBUN?: string\n}\n\nexport const pdLibRowValue = {\n\tID: '0',\n\tLBRY_NM: '',\n\tLIBRARY_TYPE: '',\n\tPD_TYPE: '',\n\tLBRY_DESC: '',\n\tFILE_PATH: '', \n\tSTDY_YN: false,\n\tCREA_TIME: null,\n\tUSER_ID: '',\n\tGUBUN: ''\n}\n\nexport const ACTION_TYPES = {\n  GET_EVENT_PRPS: 'pdlibrary/GET_EVENT_PRPS',\n  GET_LIB_PRPD: 'pdlibrary/GET_LIB_PRPD',\n  GET_LIB_LIST: 'pdlibrary/GET_LIB_LIST',\n  GET_LIB_ADD: 'pdlibrary/GET_LIB_ADD',\n  GET_LIB_DEL: 'pdlibrary/GET_LIB_DEL',\n};\n\nconst initialState = {\n  prpd: [] as Array<number>,\n\tprps: [] as Array<number>,\n\tlibList: [] as ReadonlyArray<IPdLibList>, \n\tackDel: 0,\n\tackAdd: 0,\n};\n\nexport type popupLibState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: popupLibState = initialState, action): popupLibState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.GET_EVENT_PRPS):\n    case REQUEST(ACTION_TYPES.GET_LIB_PRPD):\n    case REQUEST(ACTION_TYPES.GET_LIB_LIST):\n    case REQUEST(ACTION_TYPES.GET_LIB_ADD):\n    case REQUEST(ACTION_TYPES.GET_LIB_DEL):\n      return {\n        ...state,\n      };\n\t\tcase FAILURE(ACTION_TYPES.GET_EVENT_PRPS):\n\t\tcase FAILURE(ACTION_TYPES.GET_LIB_PRPD):\n\t\tcase FAILURE(ACTION_TYPES.GET_LIB_LIST):\n\t\tcase FAILURE(ACTION_TYPES.GET_LIB_ADD):\n\t\tcase FAILURE(ACTION_TYPES.GET_LIB_DEL):\n      return {\n        ...initialState,\n      };\n    case SUCCESS(ACTION_TYPES.GET_EVENT_PRPS):\n      return {\n        ...state,\n        prps: action.payload.data.data,\n      };\n\t\tcase SUCCESS(ACTION_TYPES.GET_LIB_PRPD):\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tprpd: action.payload.data.data,\n\t\t\t};\n\t\tcase SUCCESS(ACTION_TYPES.GET_LIB_LIST):\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tlibList: action.payload.data.data,\n\t\t\t};\n\t\tcase SUCCESS(ACTION_TYPES.GET_LIB_ADD):\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tackAdd: new Date().getTime(),\n\t\t\t};\n\t\tcase SUCCESS(ACTION_TYPES.GET_LIB_DEL):\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tackDel: new Date().getTime(),\n\t\t\t};\n    default:\n      return state;\n  }\n};\n\n// Action\nexport const getLibPrpd: (id) => void = (id) => async (dispatch) => {\n\tlet requestUrl = `/GetCommon_Library_PRPD?lbryId=${id}`;\n\tconsole.log(requestUrl);\n  await dispatch({\n    type: ACTION_TYPES.GET_LIB_PRPD,\n    payload: axios.get(requestUrl + id)\n  })\n}\n\n// \"GetCommon_3DPRPS_Event(string evntId, string gubun = \"\"P\"\")\n// GetCommon_3DPRPS_Event_sample\"\n// \"GetCommon_PRPD(string evntId)\n// GetCommon_PRPD_sample\"\n\n// GetCommon_Library_3DPRPS_Event?lbryId=1\n\n\nexport const getEventPrps: (id) => void = (id) => async (dispatch) => {\n\tlet requestUrl = isSampleApi ? '/GetCommon_3DPRPS_Event_sample?' : '/GetCommon_3DPRPS_Event?gubun=P&evntId=';\n  await dispatch({\n    type: ACTION_TYPES.GET_EVENT_PRPS,\n    payload: axios.get(requestUrl + id)\n  })\n}\n\n//GetCommon_Library?pdType=\"+ cmpntState.libType + \"&gubun=GIS\");\n// 라이브러리 목록 조회\nexport const getLibList: ( pdtype: string, gubun: string,) => void = \n\t(pdtype, gubun = 'GIS') => async (dispatch) => {\n  let requestUrl = `/GetCommon_Library?` + `pdType=${pdtype}` + `&gubun=${gubun}`;\n\tconsole.log(requestUrl);\n  await dispatch({\n    type: ACTION_TYPES.GET_LIB_LIST,\n    payload: axios.get(requestUrl)\n  })\n}\n\n//\t\tconsole.log(\"SetCommon_Library_Add?evntId=\" + props.eventId + \"&lbryNm=\" + refLibName?.current?.value + \"&pdType=\" + cmpntState.eventType + \"&lbryDesc=\" + refLibDesc?.current?.value);\nexport const addLib: (eventId: string, lbryNm: string, pdType: string, lbryDesc: string, ) => void = \n\t(eventId, lbryNm, pdType, lbryDesc, ) => async (dispatch) => {\n\t\tlet requestUrl = `/SetCommon_Library_Add?`\n\t\t\t\t\t\t\t\t\t\t\t+ `evntId=${eventId}`\n\t\t\t\t\t\t\t\t\t\t\t+ `&lbryNm=${lbryNm}`\n\t\t\t\t\t\t\t\t\t\t\t+ `&pdType=${pdType}`\n\t\t\t\t\t\t\t\t\t\t\t+ `&lbryDesc=${lbryDesc}`;\n\t\tconsole.log(requestUrl);\n\t\tawait dispatch({\n\t\t\ttype: ACTION_TYPES.GET_LIB_ADD,\n\t\t\tpayload: axios.get(requestUrl)\n\t\t})\n}\n\n// axios.get(\"/SetCommon_Library_del?lbryId=\" + String(cmpntState.libId))\nexport const delLib: (lbryId) => void = \n\t(lbryId) => async (dispatch) => {\n\t\tlet requestUrl = `/SetCommon_Library_del?` + `lbryId=${lbryId}`;\n\t\tconsole.log(requestUrl);\n\t\tawait dispatch({\n\t\t\ttype: ACTION_TYPES.GET_LIB_DEL,\n\t\t\tpayload: axios.get(requestUrl)\n\t\t})\n}","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\gis\\spdc\\spdc.tsx",["886","887","888","889"],"import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport TrendSearchFilter, { ITrendSearchFilterReturn } from '../../../../shared/component/trend/trend-search-filter';\nimport { getTrendGisSpdc } from './spdc.reducer';\n\n// Hightcharts\nimport * as Highcharts from 'highcharts';\nimport { HighchartLineDefault } from 'shared/component/chart/highcharts/hightchart-line-default1';\n\nexport interface IGisSpdcTrendProps extends StateProps, DispatchProps {\n}\n\nexport const GisSpdcTrend = (props: IGisSpdcTrendProps) => {\n\n\tconst eqipType = 'GIS';\n\tconst snsrType = 'GIS_SPDC';\n\n  const searchFilterRef = useRef(null);\n\n  // 조회 필터 값\n  const [searchFilter, setSearchFilter] = useState({\n    fromDate: new Date(),\n    toDate: new Date(),\n    eqipId: '0',\n    snsrId: '0',\n\tperiod: 'year',\n\tfromDateZoom: new Date(),\t// 확대시 시작일시\n\ttoDateZoom: new Date(),\t\t// 확대시 종료일시\n  });\n\n  const filterSearchCallback = ({ fromDate, toDate, eqipId, snsrId }: ITrendSearchFilterReturn) => {\n    setSearchFilter({\n\t\t...searchFilter,\n\t\tfromDate: fromDate,\n\t\ttoDate: toDate,\n\t\teqipId: eqipId,\n\t\tsnsrId: snsrId,\n\t\tfromDateZoom: fromDate,\n\t\ttoDateZoom: toDate,\n    });\n\n\tprops.getTrendGisSpdc(\n\t\tfromDate,\n\t\ttoDate,\n\t\teqipId,\n\t\tsnsrId,\n\t\tsearchFilter.period,\n\t);\n  }\n\n    // 초기화 수행 콜백\n\tconst filterResetCallback = ({ fromDate, toDate, eqipId, snsrId }: ITrendSearchFilterReturn) => {\n\t\tsetSearchFilter({\n\t\t  ...searchFilter,\n\t\t  fromDate: fromDate,\n\t\t  toDate: toDate,\n\t\t  eqipId: eqipId,\n\t\t  snsrId: snsrId,\n\t\t  period: 'year',\n\t\t  fromDateZoom: fromDate,\n\t\t  toDateZoom: toDate,\n\t\t});\n\n\t\tprops.getTrendGisSpdc(\n\t\t\tfromDate,\n\t\t\ttoDate,\n\t\t\teqipId,\n\t\t\tsnsrId,\n\t\t\t'year',\n\t\t);\n\t  }\n\n  useEffect(() => {\n    searchFilterRef.current?.searchBtn();\n  },[]);\n\n  const zoomChart = (e) =>\n  {\n\t  if (searchFilter.period == \"day\") {\n\t\t  return;\n\t  }\n\n\t  let baseDate = searchFilter.fromDateZoom;\n\t  let minValue = Highcharts.numberFormat(e.xAxis[0].min, 0);\n\t  let maxValue = Highcharts.numberFormat(e.xAxis[0].max, 0);\n\n\t  // if (minValue === -0)\n\t  // \tminValue = 0;\n\t  // if (maxValue === -0)\n\t  // \tmaxValue = 0;\n\n\t  if ( searchFilter.period === \"year\") {\n\t\t  let currentMonth = baseDate.getMonth();\n\t\t  let fromDate = new Date(baseDate.getFullYear(), currentMonth + Number(minValue), 1, 0, 0, 0);\n\t\t  let toDate = new Date(baseDate.getFullYear(), currentMonth + Number(maxValue) + 1, 0, 23, 59, 59);\n\n\t\t  setSearchFilter({\n\t\t\t  ...searchFilter,\n\t\t\t  period: 'month',\n\t\t\t  fromDateZoom: fromDate,\n\t\t\t  toDateZoom: toDate,\n\t\t  });\n\n\t\t  props.getTrendGisSpdc(\n\t\t\t  fromDate,\n\t\t\t  toDate,\n\t\t\t  searchFilter.eqipId,\n\t\t\t  searchFilter.snsrId,\n\t\t\t  'month',\n\t\t  );\n\t  }\n\t  else if ( searchFilter.period === \"month\") {\n\t\t  let currentDate = baseDate.getDate();\n\t\t  let fromDate = new Date(baseDate.getFullYear(), baseDate.getMonth(), currentDate + Number(minValue), 0, 0, 0);\n\t\t  let toDate = new Date(baseDate.getFullYear(), baseDate.getMonth(), currentDate + Number(maxValue), 23, 59, 59);\n\n\t\t  setSearchFilter({\n\t\t\t  ...searchFilter,\n\t\t\t  period: 'day',\n\t\t\t  fromDateZoom: fromDate,\n\t\t\t  toDateZoom: toDate,\n\t\t  });\n\n\t\t  props.getTrendGisSpdc(\n\t\t\t  fromDate,\n\t\t\t  toDate,\n\t\t\t  searchFilter.eqipId,\n\t\t\t  searchFilter.snsrId,\n\t\t\t  'day',\n\t\t  );\n\t  }\n\n\t  return false; // Zoom Event 무효화\n  }\n\n  const chartOption1 = props.trendGisSpdcData == undefined ?\n  {\n\ttitle: {\n\t\ttext: '',\n\t},\n\t} : {\n\t\tchart: {\n\t\t\tmarginRight: 150,\n\t\t\tzoomType: 'x',\n\t\t\tevents: {\n\t\t\t\tselection: zoomChart\n\t\t\t}\n\t\t},\n\t\ttitle: {\n\t\t\ttext: '',\n\t\t\t// x: -20 //center\n\t\t}, credits: { enabled: false },\n\t\txAxis: {\n\t\t\tcategories: props.trendGisSpdcData.XAxisData\n\t\t},\n\t\tyAxis: {\n\t\t\tmin: 0,\n\t\t\tstartOnTick: false,\n\t\t\ttitle: {\n\t\t\t\ttext: '발생 회수'\n\t\t\t},\n\t\t\tlabels: {\n\t\t\t\tformat: '{value} 회',\n\t\t\t\tstyle: {\n\t\t\t\t\tcolor: Highcharts.getOptions().colors[1]\n\t\t\t\t}\n\t\t\t},\n\t\t\tplotLines: [{\n\t\t\t\tvalue: 0,\n\t\t\t\twidth: 1,\n\t\t\t\tcolor: '#808080'\n\t\t\t}]\n\t\t},\n\t\ttooltip: {\n\t\t\tshared: true,\n\t\t\tcrosshairs: true,\n\t\t\tpointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.f}</b><br/>'\n\t\t},\n\t\tlegend: {\n\t\t\tlayout: 'vertical',\n\t\t\talign: 'right',\n\t\t\tverticalAlign: 'middle',\n\t\t\tborderWidth: 0\n\t\t},\n\t\tplotOptions: {\n\t\t\tseries: {\n\t\t\t\tturboThreshold: 15000,\n\t\t\t\tdataGrouping: {\n\t\t\t\t\tenabled: false\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tseries: [{\n\t\t\tname: '이벤트 발생',\n\t\t\tdata: props.trendGisSpdcData.EventData,\n\t\t\tvisible: false,\n\t\t\tdataLabels: {\n\t\t\t\tenabled: false,\n\t\t\t\tformatter: function () {\n\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tname: '알람 발생',\n\t\t\tdata: props.trendGisSpdcData.AlarmData,\n\t\t\tcolor: '#FF0000',\n\t\t\tdataLabels: {\n\t\t\t\tenabled: false,\n\t\t\t\tformatter: function () {\n\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}]\n\t};\n\n\tconst chartOption2 = props.trendGisSpdcData == undefined ?\n\t{\n\t  title: {\n\t\t  text: '',\n\t  },\n\t  } : {\n        chart: {\n            zoomType: 'x',\n            marginRight: 150,\n\t\t\tevents: {\n\t\t\t\tselection: zoomChart\n\t\t\t}\n        },\n        title: {\n            text: '',\n            // x: -20 //center\n        }, credits: { enabled: false },\n        xAxis: {\n            categories: props.trendGisSpdcData.XAxisData\n        },\n        yAxis: {\n            //min: 0,\n            startOnTick: false,\n            title: {\n                text: '이벤트 회수',\n                style: {\n                    color: Highcharts.getOptions().colors[1]\n                }\n            },\n            labels: {\n                format: '{value} 회',\n                style: {\n                    color: Highcharts.getOptions().colors[1]\n                }\n            }\n        },\n        tooltip: {\n            shared: true,\n            crosshairs: true,\n            pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.1f}</b><br/>'\n        },\n        legend: {\n            layout: 'vertical',\n            align: 'right',\n            verticalAlign: 'middle',\n            borderWidth: 0\n        },\n        plotOptions: {\n            series: {\n                turboThreshold: 15000,\n                dataGrouping: {\n                    enabled: false\n                }\n            }\n        },\n        series: [{\n            name: 'Corona', //yAxis: 0,\n            data: props.trendGisSpdcData.CoronaCounts,\n            dataLabels: {\n                enabled: false,\n                formatter: function () {\n                    if (this.y < 0) {\n                        return null;\n                    } else {\n                        return Highcharts.numberFormat(this.y, 1);\n                    }\n                }\n            }\n        }, {\n            name: 'Floating', //yAxis: 0,\n            data: props.trendGisSpdcData.FloatingCounts,\n            dataLabels: {\n                enabled: false,\n                formatter: function () {\n                    if (this.y < 0) {\n                        return null;\n                    } else {\n                        return Highcharts.numberFormat(this.y, 1);\n                    }\n                }\n            }\n        }, {\n            name: 'Particle', //yAxis: 0,\n            data: props.trendGisSpdcData.ParticleCounts,\n            dataLabels: {\n                enabled: false,\n                formatter: function () {\n                    if (this.y < 0) {\n                        return null;\n                    } else {\n                        return Highcharts.numberFormat(this.y, 1);\n                    }\n                }\n            }\n        }, {\n            name: 'Void', //yAxis: 0,\n            data: props.trendGisSpdcData.VoidCounts,\n            dataLabels: {\n                enabled: false,\n                formatter: function () {\n                    if (this.y < 0) {\n                        return null;\n                    } else {\n                        return Highcharts.numberFormat(this.y, 1);\n                    }\n                }\n            }\n        }, {\n            name: 'Surface', //yAxis: 0,\n            data: props.trendGisSpdcData.SurfaceCounts,\n            visible: true,\n            showInLegend: true,\n            dataLabels: {\n                enabled: false,\n                formatter: function () {\n                    if (this.y < 0) {\n                        return null;\n                    } else {\n                        return Highcharts.numberFormat(this.y, 1);\n                    }\n                }\n            }\n        }, {\n            name: 'TtoT', //yAxis: 0,\n            data: props.trendGisSpdcData.TtotCounts,\n            visible: true,\n            showInLegend: true,\n            dataLabels: {\n                enabled: false,\n                formatter: function () {\n                    if (this.y < 0) {\n                        return null;\n                    } else {\n                        return Highcharts.numberFormat(this.y, 1);\n                    }\n                }\n            }\n        }, {\n            name: 'Noise', //yAxis: 0,\n            data: props.trendGisSpdcData.NoiseCounts,\n            dataLabels: {\n                enabled: false,\n                formatter: function () {\n                    if (this.y < 0) {\n                        return null;\n                    } else {\n                        return Highcharts.numberFormat(this.y, 1);\n                    }\n                }\n            }\n        }]\n    };\n\n\t  const chartOption3 = props.trendGisSpdcData == undefined ?\n\t  {\n\t\ttitle: {\n\t\t\ttext: '',\n\t\t},\n\t\t} : {\n\t\t\tchart: {\n\t\t\t\tmarginRight: 150,\n\t\t\t\tzoomType: 'x',\n\t\t\t\tevents: {\n\t\t\t\t\tselection: zoomChart\n\t\t\t\t}\n\t\t\t},\n\t\t\ttitle: {\n\t\t\t\ttext: '',\n\t\t\t\t// x: -20 //center\n\t\t\t}, credits: { enabled: false },\n\t\t\txAxis: {\n\t\t\t\tcategories: props.trendGisSpdcData.XAxisData\n\t\t\t},\n\t\t\tyAxis: {\n\t\t\t\tmin: 0,\n\t\t\t\tstartOnTick: false,\n\t\t\t\ttitle: {\n\t\t\t\t\ttext: '발생 회수'\n\t\t\t\t},\n\t\t\t\tlabels: {\n\t\t\t\t\tformat: '{value} 회',\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tcolor: Highcharts.getOptions().colors[1]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tplotLines: [{\n\t\t\t\t\tvalue: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\tcolor: '#808080'\n\t\t\t\t}]\n\t\t\t},\n\t\t\ttooltip: {\n\t\t\t\tshared: true,\n\t\t\t\tcrosshairs: true,\n\t\t\t\tpointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.f}</b><br/>'\n\t\t\t},\n\t\t\tlegend: {\n\t\t\t\tlayout: 'vertical',\n\t\t\t\talign: 'right',\n\t\t\t\tverticalAlign: 'middle',\n\t\t\t\tborderWidth: 0\n\t\t\t},\n\t\t\tplotOptions: {\n\t\t\t\tseries: {\n\t\t\t\t\tturboThreshold: 15000,\n\t\t\t\t\tdataGrouping: {\n\t\t\t\t\t\tenabled: false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tseries: [{\n\t\t\t\tname: '이벤트 발생',\n\t\t\t\tdata: props.trendGisSpdcData.EventData,\n\t\t\t\tvisible: false,\n\t\t\t\tdataLabels: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tname: '알람 발생',\n\t\t\t\tdata: props.trendGisSpdcData.AlarmData,\n\t\t\t\tcolor: '#FF0000',\n\t\t\t\tdataLabels: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}]\n\t\t};\n  return (\n    <>\n      <div className=\"contents-area\">\n        <section className=\"contents-header\">\n          <h2>GIS 부분 방전 진단 경향</h2>\n          <ol className=\"route\">\n            {/*<li><a href=\"\"><img src={require('assets/img/icon_home.svg').default} />&nbsp;온수 변전소</a></li>*/}\n            {/*<li><a href=\"\">GIS 설비별 진단 경향</a></li>*/}\n            {/*<li><a href=\"\">GIS 부분 방전 진단 경향</a></li>*/}\n          </ol>\n        </section>\n        <div className=\"container\">\n          <div className=\"nav-index gap30\">\n\t\t\t\t\t\t<TrendSearchFilter ref={searchFilterRef}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\teqipType={eqipType}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsnsrType={snsrType}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcallbackSearch={filterSearchCallback}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcallbackReset={filterResetCallback} />\n          </div>\n          <section className=\"gis-parts solo\">\n            {/* 그래프 3종류 */}\n            <h2 className=\"gap-up-40 gap-down-30\">알람/이벤트 발생</h2>\n            <div className=\"graph-container\">\n\t\t\t\t<HighchartLineDefault options={chartOption1} />\n            </div>\n\n            <h2 className=\"gap-up-60 gap-down-30\">이벤트 회수</h2>\n            <div className=\"graph-container\">\n\t\t\t\t<HighchartLineDefault options={chartOption2} />\n            </div>\n            <h2 className=\"gap-up-60 gap-down-30\">방전크기</h2>\n            <div className=\"graph-container\">\n\t\t\t\t<HighchartLineDefault options={chartOption3} />\n            </div>\n\n            {/* // Blank Markup\n            <h2 class=\"gap-up-60 gap-down-30\">제목 영역</h2>\n            <div class=\"graph-container\">\n                <div class=\"width-10 height-200px\" style=\"background: #eee;\">그래프 영역.<br/>배경 색상은 레이아웃 구분을 위해 삽입한 것으로, 구현 완료 후 삭제해주세요. height 길이를 바꾸려면 height-200px class명을 변경해주세요. 100px - 500px까지 5단계로 있습니다.</div>\n                <div class=\"input-legend graph block gap-up-40\">\n                    <ul>\n                        <li><i class=\"sign green\"></i>범례 01</li>\n                        <li><i class=\"sign yellow\"></i>범례 02</li>\n                        <li><i class=\"sign orange\"></i>범례 03</li>\n                        <li><i class=\"sign red\"></i>범례 04</li>\n                    </ul>\n                </div>\n            </div>*/}\n\n          </section>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ gisPdTrendData }: IRootState) => ({\n  trendGisSpdcData: gisPdTrendData.data\n});\n\nconst mapDispatchToProps = {\n  getTrendGisSpdc\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GisSpdcTrend);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\mtr\\bushing\\bushing.tsx",["890","891","892","893"],"import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport TrendSearchFilter, { ITrendSearchFilterReturn } from 'shared/component/trend/trend-search-filter';\nimport { getTrendMtrBushing } from './bushing.reducer';\n\n// Hightcharts\nimport * as Highcharts from 'highcharts';\nimport { emptyOptions, HighchartLineDefault } from 'shared/component/chart/highcharts/hightchart-line-default1';\n\nexport interface IMtrBushingTrendProps extends StateProps, DispatchProps {}\n\nexport const MtrBushingTrend = (props: IMtrBushingTrendProps) => {\n\n\tconst eqipType = 'MTR';\n\tconst snsrType = 'MTR_SBSH';\n\n\tconst searchFilterRef = useRef(null);\n\n\tconst [searchFilter, setSearchFilter] = useState( {\n\t\tfromDate: new Date(),\n\t\ttoDate: new Date(),\n\t\teqipId: '0',\n\t\tsnsrId: '0',\n\t\tperiod: 'year',\n\t\tfromDateZoom: new Date(),\t// 확대시 시작일시\n\t\ttoDateZoom: new Date(),\t\t// 확대시 종료일시\n\t});\n\n\tconst [chartData, setChartData] = useState({\n\t\toption1 : emptyOptions,\n\t\toption2 : emptyOptions,\n\t\toption3 : emptyOptions,\n\t\toption4 : emptyOptions,\n\t});\n\n\tconst filterSearchCallback = ({ fromDate, toDate, eqipId, snsrId }: ITrendSearchFilterReturn) => {\n    setSearchFilter({\n\t\t...searchFilter,\n      fromDate: fromDate,\n      toDate: toDate,\n      eqipId: eqipId,\n      snsrId: snsrId,\n\t  fromDateZoom: fromDate,\n\t  toDateZoom: toDate,\n    });\n\n\t\tprops.getTrendMtrBushing(\n\t\t\tfromDate,\n\t\t\ttoDate,\n\t\t\teqipId,\n\t\t\tsnsrId,\n\t\t\tsearchFilter.period,\n\t\t);\n  }\n\n  // 초기화 수행 콜백\n  const filterResetCallback = ({ fromDate, toDate, eqipId, snsrId }: ITrendSearchFilterReturn) => {\n    setSearchFilter({\n\t  ...searchFilter,\n      fromDate: fromDate,\n      toDate: toDate,\n      eqipId: eqipId,\n      snsrId: snsrId,\n\t\t\tperiod: 'year',\n\t\t\tfromDateZoom: fromDate,\n\t\t\ttoDateZoom: toDate,\n    });\n\n\t\tprops.getTrendMtrBushing(\n\t\t\tfromDate,\n\t\t\ttoDate,\n\t\t\teqipId,\n\t\t\tsnsrId,\n\t\t\t'year',\n\t\t);\n\t}\n\n\t// 데이터 가공\n\tuseEffect(() => {\n\t\tconst data = props.trendMtrBushingData;\n\t\tif( data == undefined )\n\t\t\treturn;\n\n\t\tif( data.length == 0 )\n\t\t\treturn;\n\n\t\tconst option1 = {\n\t\t\tchart: {\n\t\t\t\tzoomType: 'x',\n\t\t\t\tevents: {\n\t\t\t\t\tselection: zoomChart,\n\t\t\t\t}\n\t\t\t},\n\t\t\ttitle: {\n\t\t\t\ttext: '',\n\t\t\t},\n\t\t\tcredits: {\n\t\t\t\tenabled: false\n\t\t\t},\n\t\t\txAxis: {\n\t\t\t\t\tcategories: data.XAxisData\n\t\t\t},\n\t\t\tyAxis: {\n\t\t\t\t//min: 0,\n\t\t\t\tstartOnTick: false,\n\t\t\t\ttitle: {\n\t\t\t\t\t\ttext: '발생 회수'\n\t\t\t\t},\n\t\t\t\tplotLines: [{\n\t\t\t\t\t\tvalue: 0,\n\t\t\t\t\t\twidth: 1,\n\t\t\t\t\t\tcolor: '#808080'\n\t\t\t\t}]\n\t\t\t},\n\t\t\ttooltip: {\n\t\t\t\tshared: true,\n\t\t\t\tcrosshairs: true,\n\t\t\t\tpointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.f}</b><br/>'\n\t\t\t},\n\t\t\tlegend: {\n\t\t\t\tlayout: 'vertical',\n\t\t\t\talign: 'right',\n\t\t\t\tverticalAlign: 'middle',\n\t\t\t\tborderWidth: 0\n\t\t\t},\n\t\t\tplotOptions: {\n\t\t\t\tseries: {\n\t\t\t\t\tturboThreshold: 15000,\n\t\t\t\t\tdataGrouping: {\n\t\t\t\t\t\t\tenabled: false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tseries: [{\n\t\t\t\tname: '이벤트 발생',\n\t\t\t\tvisible: false,\n\t\t\t\tdata: data.EventData,\n\t\t\t\tdataLabels: {\n\t\t\t\t\t\tenabled: false,\n\t\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\tname: '알람 발생', color: '#FF0000',\n\t\t\t\tdata: data.AlarmData,\n\t\t\t\tdataLabels: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}]\n\t\t};\n\n\t\tconst option2 = {\n\t\t\tchart: {\n\t\t\t\tzoomType: 'x',\n\t\t\t\tevents: {\n\t\t\t\t\tselection: zoomChart,\n\t\t\t\t}\n\t\t\t},\n\t\t\ttitle: {\n\t\t\t\ttext: '',\n\t\t\t},\n\t\t\tcredits: {\n\t\t\t\tenabled: false\n\t\t\t},\n\t\t\txAxis: {\n\t\t\t\tcategories: data.XAxisData\n\t\t\t},\n\t\t\tyAxis: {\n\t\t\t\tmin: 0,\n\t\t\t\tstartOnTick: false,\n\t\t\t\ttitle: {\n\t\t\t\t\ttext: '발생 회수'\n\t\t\t\t},\n\t\t\t\tplotLines: [{\n\t\t\t\t\tvalue: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\tcolor: '#808080'\n\t\t\t\t}]\n\t\t\t},\n\t\t\ttooltip: {\n\t\t\t\tshared: true,\n\t\t\t\tcrosshairs: true,\n\t\t\t\tpointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.f}</b><br/>'\n\t\t\t},\n\t\t\tlegend: {\n\t\t\t\tlayout: 'vertical',\n\t\t\t\talign: 'right',\n\t\t\t\tverticalAlign: 'middle',\n\t\t\t\tborderWidth: 0\n\t\t\t},\n\t\t\tplotOptions: {\n\t\t\t\tseries: {\n\t\t\t\t\tturboThreshold: 15000,\n\t\t\t\t\tdataGrouping: {\n\t\t\t\t\t\t\tenabled: false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tseries: [{\n\t\t\t\tname: '요주의',\n\t\t\t\tdata: data.Vaution_cnt,\n\t\t\t\tdataLabels: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tname: '이상',\n\t\t\t\tdata: data.Abnormal_cnt,\n\t\t\t\tdataLabels: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tname: '위험', color: '#FF0000',\n\t\t\t\tdata: data.Danger_cnt,\n\t\t\t\tdataLabels: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}]\n\t\t};\n\n\t\tconst option3 = {\n\t\t\tchart: {\n\t\t\t\tzoomType: 'x',\n\t\t\t\tevents: {\n\t\t\t\t\tselection: zoomChart,\n\t\t\t\t}\n\t\t\t},\n\t\t\ttitle: {\n\t\t\t\t\ttext: '',\n\t\t\t},\n\t\t\tcredits: {\n\t\t\t\tenabled: false\n\t\t\t},\n\t\t\txAxis: {\n\t\t\t\tcategories: data.XAxisData\n\t\t\t},\n\t\t\tyAxis: {\n\t\t\t\t//min: 0,\n\t\t\t\tstartOnTick: false,\n\t\t\t\ttitle: {\n\t\t\t\t\t\ttext: '전류(mA)'\n\t\t\t\t},\n\t\t\t\tplotLines: [{\n\t\t\t\t\t\tvalue: 0,\n\t\t\t\t\t\twidth: 1,\n\t\t\t\t\t\tcolor: '#808080'\n\t\t\t\t}]\n\t\t\t},\n\t\t\ttooltip: {\n\t\t\t\tshared: true,\n\t\t\t\tcrosshairs: true,\n\t\t\t\tpointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.1f}</b><br/>'\n\t\t\t},\n\t\t\tplotOptions: {\n\t\t\t\tseries: {\n\t\t\t\t\tturboThreshold: 15000,\n\t\t\t\t\tdataGrouping: {\n\t\t\t\t\t\t\tenabled: false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tlegend: {\n\t\t\t\tlayout: 'vertical',\n\t\t\t\talign: 'right',\n\t\t\t\tverticalAlign: 'middle',\n\t\t\t\tborderWidth: 0\n\t\t\t},\n\t\t\tseries: [{\n\t\t\t\tname: '기준값(평균)',\n\t\t\t\tvisible: false,\n\t\t\t\tdata: data.Disp_A_AVGData,\n\t\t\t\tdataLabels: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tname: '기준값(최대)',\n\t\t\t\tdata: data.Disp_A_MAXData,\n\t\t\t\tdataLabels: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 2);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tname: '누설(평균)',\n\t\t\t\tvisible: false,\n\t\t\t\tdata: data.LeakAAvgData,\n\t\t\t\tdataLabels: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tname: '누설(최대)',\n\t\t\t\tdata: data.LeakAMaxData,\n\t\t\t\tdataLabels: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}]\n\t\t};\n\n\t\tconst option4 = {\n\t\t\tchart: {\n\t\t\t\tzoomType: 'x',\n\t\t\t\tevents: {\n\t\t\t\t\tselection: zoomChart,\n\t\t\t\t}\n\t\t\t},\n\t\t\ttitle: {\n\t\t\t\ttext: '',\n\t\t\t},\n\t\t\tcredits: {\n\t\t\t\tenabled: false\n\t\t\t},\n\t\t\txAxis: {\n\t\t\t\tcategories: data.XAxisData\n\t\t\t},\n\t\t\tyAxis: {\n\t\t\t\t//min: 0,\n\t\t\t\tstartOnTick: false,\n\t\t\t\ttitle: {\n\t\t\t\t\t\ttext: '전력(WL)'\n\t\t\t\t},\n\t\t\t\tplotLines: [{\n\t\t\t\t\t\tvalue: 0,\n\t\t\t\t\t\twidth: 1,\n\t\t\t\t\t\tcolor: '#808080'\n\t\t\t\t}]\n\t\t\t},\n\t\t\ttooltip: {\n\t\t\t\tshared: true,\n\t\t\t\tcrosshairs: true,\n\t\t\t\tpointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.1f}</b><br/>'\n\t\t\t},\n\t\t\tlegend: {\n\t\t\t\tlayout: 'vertical',\n\t\t\t\talign: 'right',\n\t\t\t\tverticalAlign: 'middle',\n\t\t\t\tborderWidth: 0\n\t\t\t},\n\t\t\tseries: [{\n\t\t\t\tname: '기준값(평균)',\n\t\t\t\tvisible: false,\n\t\t\t\tdata: data.wattlossThreAvgData,\n\t\t\t\tdataLabels: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tname: '기준값(최대)',\n\t\t\t\tdata: data.wattlossThreMaxData,\n\t\t\t\tdataLabels: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tname: '측정값(평균)',\n\t\t\t\tvisible: false,\n\t\t\t\tdata: data.WattLossAVGData,\n\t\t\t\tdataLabels: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tname: '측정값(최대)',\n\t\t\t\tdata: data.WattLossMAXData,\n\t\t\t\tdataLabels: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}]\n\t\t};\n\n\t\tsetChartData({\n\t\t\toption1 : option1,\n\t\t\toption2 : option2,\n\t\t\toption3 : option3,\n\t\t\toption4 : option4,\n\t\t});\n\n\t}, [props.trendMtrBushingData]);\n\n\tconst zoomChart = (e) =>\n  {\n\t  if (searchFilter.period == \"day\") {\n\t\t  return;\n\t  }\n\n\t  let baseDate = searchFilter.fromDateZoom;\n\t  let minValue = Highcharts.numberFormat(e.xAxis[0].min, 0);\n\t  let maxValue = Highcharts.numberFormat(e.xAxis[0].max, 0);\n\n\t  // if (minValue === -0)\n\t  // \tminValue = 0;\n\t  // if (maxValue === -0)\n\t  // \tmaxValue = 0;\n\n\t  if ( searchFilter.period === \"year\") {\n\t\t  let currentMonth = baseDate.getMonth();\n\t\t  let fromDate = new Date(baseDate.getFullYear(), currentMonth + Number(minValue), 1, 0, 0, 0);\n\t\t  let toDate = new Date(baseDate.getFullYear(), currentMonth + Number(maxValue) + 1, 0, 23, 59, 59);\n\n\t\t  setSearchFilter({\n\t\t\t  ...searchFilter,\n\t\t\t  period: 'month',\n\t\t\t  fromDateZoom: fromDate,\n\t\t\t  toDateZoom: toDate,\n\t\t  });\n\n\t\t  props.getTrendMtrBushing(\n\t\t\t  fromDate,\n\t\t\t  toDate,\n\t\t\t  searchFilter.eqipId,\n\t\t\t  searchFilter.snsrId,\n\t\t\t  'month',\n\t\t);\n\t  }\n\t  else if ( searchFilter.period === \"month\") {\n\t\t  let currentDate = baseDate.getDate();\n\t\t  let fromDate = new Date(baseDate.getFullYear(), baseDate.getMonth(), currentDate + Number(minValue), 0, 0, 0);\n\t\t  let toDate = new Date(baseDate.getFullYear(), baseDate.getMonth(), currentDate + Number(maxValue), 23, 59, 59);\n\n\t\t  setSearchFilter({\n\t\t\t  ...searchFilter,\n\t\t\t  period: 'day',\n\t\t\t  fromDateZoom: fromDate,\n\t\t\t  toDateZoom: toDate,\n\t\t  });\n\n\t\t\tprops.getTrendMtrBushing(\n\t\t\t\tfromDate,\n\t\t\t\ttoDate,\n\t\t\t\tsearchFilter.eqipId,\n\t\t\t\tsearchFilter.snsrId,\n\t\t\t\t'day',\n\t\t\t);\n\t  }\n\n\t  return false; // Zoom Event 무효화\n  }\n\n\tuseEffect(() => {\n\t\tsearchFilterRef.current?.searchBtn();\n\t},[]);\n\n  return (\n    <>\n      <div className=\"contents-area\">\n        <section className=\"contents-header\">\n          <h2>부싱누설전류 진단 경향</h2>\n          {/*<ol className=\"route\">*/}\n          {/*  <li><a href=\"\"><img src={require('assets/img/icon_home.svg').default}/>&nbsp;온수 변전소</a></li>*/}\n          {/*  <li><a href=\"\">MTR 설비별 진단 경향</a></li>*/}\n          {/*  <li><a href=\"\">부싱누설전류 진단 경향</a></li>*/}\n          {/*</ol>*/}\n        </section>\n        <div className=\"container\">\n\t\t\t\t\t<div className=\"nav-index gap30\">\n\t\t  \t\t\t<TrendSearchFilter ref={searchFilterRef}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\teqipType={eqipType}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsnsrType={snsrType}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcallbackSearch={filterSearchCallback}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcallbackReset={filterResetCallback} />\n          </div>\n\t\t\t\t\t<section className=\"gis-parts solo\">\n\t\t\t\t\t<h2 className=\"gap-up-40 gap-down-30\">이벤트/알람 발생</h2>\n\t\t\t\t\t<div className=\"graph-container\">\n\t\t\t\t\t\t<HighchartLineDefault options={chartData.option1} />\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<h2 className=\"gap-up-60 gap-down-30\">알람레벨별 건수</h2>\n\t\t\t\t\t<div className=\"graph-container\">\n\t\t\t\t\t\t<HighchartLineDefault options={chartData.option2} />\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<h2 className=\"gap-up-60 gap-down-30\">기준/누설 전류</h2>\n\t\t\t\t\t<div className=\"graph-container\">\n\t\t\t\t\t\t<HighchartLineDefault options={chartData.option3} />\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<h2 className=\"gap-up-60 gap-down-30\">WATT/LOSS</h2>\n\t\t\t\t\t<div className=\"graph-container\">\n\t\t\t\t\t\t<HighchartLineDefault options={chartData.option4} />\n\t\t\t\t\t</div>\n\n          </section>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ trendMtrBushingData }: IRootState) => ({\n\ttrendMtrBushingData: trendMtrBushingData.data,\n});\n\nconst mapDispatchToProps = {\n\tgetTrendMtrBushing,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MtrBushingTrend);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\mtr\\all\\all-trend.tsx",["894","895","896","897","898","899","900"],"import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\n\nimport { getTrendMtrAll } from './all-trend.reducer';\nimport TrendSearchFilter, { ITrendSearchFilterReturn } from 'shared/component/trend/trend-search-filter';\n\nimport * as Highcharts from 'highcharts';\nimport { HighchartLineDefault } from 'shared/component/chart/highcharts/hightchart-line-default1';\n\n\nexport interface IMtrAllTrendProps extends StateProps, DispatchProps {}\n\nexport const MtrAllTrend = (props: IMtrAllTrendProps) => {\n\n\tconst searchFilterRef = useRef(null);\n\n\tconst [Series, setSeries] = useState({\n\t\tseries1 : [],\n\t\tseries2 : [],\n\t});\n\n\t// 조회 필터 값\n\tconst [searchFilter, setSearchFilter] = useState({\n\t\tfromDate: new Date(),\n\t\ttoDate: new Date(),\n\t\teqipId: '0',\n\t\tsnsrId: '0',\n\t\tperiod: 'year',\n\t\tfromDateZoom: new Date(),\t// 확대시 시작일시\n\t\ttoDateZoom: new Date(),\t\t// 확대시 종료일시\n\t});\n\n\tconst filterSearchCallback = ({ fromDate, toDate, eqipId, snsrId }: ITrendSearchFilterReturn) => {\n\t\tsetSearchFilter({\n\t\t\t...searchFilter,\n\t\t\tfromDate: fromDate,\n\t\t\ttoDate: toDate,\n\t\t\teqipId: eqipId,\n\t\t\tsnsrId: snsrId,\n\t\t\tfromDateZoom: fromDate,\n\t\t\ttoDateZoom: toDate,\n\t\t});\n\n\t\tprops.getTrendMtrAll(\n\t\t\tfromDate,\n\t\t\ttoDate,\n\t\t\tsearchFilter.period,\n\t\t);\n\t}\n\n\t\t// 초기화 수행 콜백\n\tconst filterResetCallback = ({ fromDate, toDate, eqipId, snsrId }: ITrendSearchFilterReturn) => {\n\t\tsetSearchFilter({\n\t\t\t...searchFilter,\n\t\t\tfromDate: fromDate,\n\t\t\ttoDate: toDate,\n\t\t\teqipId: eqipId,\n\t\t\tsnsrId: snsrId,\n\t\t\tperiod: 'year',\n\t\t\tfromDateZoom: fromDate,\n\t\t\ttoDateZoom: toDate,\n\t\t});\n\n\t\tprops.getTrendMtrAll(\n\t\t\tfromDate,\n\t\t\ttoDate,\n\t\t\t'year',\n\t\t);\n\t}\n\n\tuseEffect(() => {\n\t\tlet series1 = [];\n\t\tlet series2 = [];\n\n\t\tif( props.trendMtrAllData == undefined )\n\t\t\treturn;\n\n\t\tprops.trendMtrAllData.SeriesData.forEach(function (item) {\n\n\t\t\tlet datas = item['DATA'].filter(function (x) { return x.DataName; });\n\t\t\tlet evnts = [];\n\t\t\tlet alrms = [];\n\n\t\t\tdatas.forEach(function (data) {\n\t\t\t\tvar eCnt = data.EVNT_CNT; evnts.push(eCnt);\n\t\t\t\tvar aCnt = data.ALRM_CNT; alrms.push(aCnt);\n\t\t\t});\n\n\t\t\tseries1.push({\n\t\t\t\tname: item.DataName,\n\t\t\t\tdata: evnts,\n\t\t\t\tdataLabels: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tseries2.push({\n\t\t\t\tname: item.DataName,\n\t\t\t\tdata: alrms,\n\t\t\t\tdataLabels: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tsetSeries({\n\t\t\tseries1: series1,\n\t\t\tseries2: series2,\n\t\t});\n\n\t}, [props.trendMtrAllData]);\n\n\tconst zoomChart = (e) =>\n\t{\n\t\tif (searchFilter.period == \"day\") {\n\t\t\treturn;\n\t\t}\n\n\t\tlet baseDate = searchFilter.fromDateZoom;\n\t\tlet minValue = Highcharts.numberFormat(e.xAxis[0].min, 0);\n\t\tlet maxValue = Highcharts.numberFormat(e.xAxis[0].max, 0);\n\n\t\t// if (minValue === -0)\n\t\t// \tminValue = 0;\n\t\t// if (maxValue === -0)\n\t\t// \tmaxValue = 0;\n\n\t\tif ( searchFilter.period === \"year\") {\n\t\t\tlet currentMonth = baseDate.getMonth();\n\t\t\tlet fromDate = new Date(baseDate.getFullYear(), currentMonth + Number(minValue), 1, 0, 0, 0);\n\t\t\tlet toDate = new Date(baseDate.getFullYear(), currentMonth + Number(maxValue) + 1, 0, 23, 59, 59);\n\n\t\t\tsetSearchFilter({\n\t\t\t\t...searchFilter,\n\t\t\t\tperiod: 'month',\n\t\t\t\tfromDateZoom: fromDate,\n\t\t\t\ttoDateZoom: toDate,\n\t\t\t});\n\n\t\t\tprops.getTrendMtrAll(\n\t\t\t\tfromDate,\n\t\t\t\ttoDate,\n\t\t\t\t'month',\n\t\t\t);\n\t\t}\n\t\telse if ( searchFilter.period === \"month\") {\n\t\t\tlet currentDate = baseDate.getDate();\n\t\t\tlet fromDate = new Date(baseDate.getFullYear(), baseDate.getMonth(), currentDate + Number(minValue), 0, 0, 0);\n\t\t\tlet toDate = new Date(baseDate.getFullYear(), baseDate.getMonth(), currentDate + Number(maxValue), 23, 59, 59);\n\n\t\t\tsetSearchFilter({\n\t\t\t\t...searchFilter,\n\t\t\t\tperiod: 'day',\n\t\t\t\tfromDateZoom: fromDate,\n\t\t\t\ttoDateZoom: toDate,\n\t\t\t});\n\n\t\t\tprops.getTrendMtrAll(\n\t\t\t\tfromDate,\n\t\t\t\ttoDate,\n\t\t\t\t'day',\n\t\t\t);\n\t\t}\n\n\t\treturn false; // Zoom Event 무효화\n\t}\n\n\tconst chartOption1 = props.trendMtrAllData == undefined ?\n\t{\n\t\ttitle: {\n\t\t\ttext: '',\n\t\t},\n\t} :\n\t{\n        chart: {\n            zoomType: 'x',\n            events: {\n\t\t\t\tselection : zoomChart\n\t\t\t}\n        },\n        title: {\n            text: \"\",\n            // x: -20 //center\n        }, credits: { enabled: false },\n        xAxis: {\n            categories: props.trendMtrAllData.XAxisData\n        },\n        yAxis: {\n            min: 0,\n            startOnTick: false,\n            title: {\n                text: '발생 회수'\n            },\n            plotLines: [{\n                value: 0,\n                width: 1,\n                color: '#808080'\n            }]\n        },\n        tooltip: {\n            shared: true,\n            crosshairs: true,\n            pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.f}</b><br/>'\n        },\n        legend: {\n            layout: 'vertical',\n            align: 'right',\n            verticalAlign: 'middle',\n            borderWidth: 0\n        },\n        series: Series.series1\n    };\n\n\tconst chartOption2 = props.trendMtrAllData == undefined ?\n\t{\n\t\ttitle: {\n\t\t\ttext: '',\n\t\t},\n\t} :\n\t{\n        chart: {\n            zoomType: 'x',\n            marginRight: 150,\n\t\t\tevents: {\n\t\t\t\tselection : zoomChart\n\t\t\t}\n        },\n        title: {\n            text: \"\",\n            // x: -20 //center\n        }, credits: { enabled: false },\n        xAxis: {\n            categories: props.trendMtrAllData.XAxisData\n        },\n        yAxis: {\n            //min: 0,\n            startOnTick: false,\n            title: {\n                text: '발생 회수',\n            },\n            plotLines: [{\n                value: 0,\n                width: 1,\n                color: '#808080'\n            }]\n        },\n        tooltip: {\n            shared: true,\n            crosshairs: true,\n            pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.1f}</b><br/>'\n        },\n        legend: {\n            layout: 'vertical',\n            align: 'right',\n            verticalAlign: 'middle',\n            borderWidth: 0\n        },\n        series: Series.series2\n    };\n\n\tuseEffect(() => {\n\t\tsearchFilterRef.current?.searchBtn();\n\t},[]);\n\n  return (\n    <>\n      <div className=\"contents-area\">\n        <section className=\"contents-header\">\n          <h2>MTR 설비별 진단 경향</h2>\n          {/*<ol className=\"route\">*/}\n          {/*  <li><a href=\"\"><img src={require('assets/img/icon_home.svg').default}/>&nbsp;온수 변전소</a></li>*/}\n          {/*  <li><a href=\"\">MTR 설비별 진단 경향</a></li>*/}\n          {/*</ol>*/}\n        </section>\n        <div className=\"container\">\n\t\t<div className=\"nav-index gap30\">\n            <TrendSearchFilter\n\t\t\t\tref={searchFilterRef}\n\t\t\t\tlocaleFormat='YYYY-MM-DD'\n\t\t\t\tuseEqipId={false}\n\t\t\t\tuseSnsrId={false}\n\t\t\t\tcallbackSearch={filterSearchCallback}\n\t\t\t\tcallbackReset={filterResetCallback}\n\t\t\t/>\n          </div>\n          <section className=\"gis-parts solo\">\n            <h2 className=\"gap-up-40 gap-down-30\">이벤트 발생</h2>\n            <div className=\"graph-container\">\n\t\t\t\t\t\t\t<HighchartLineDefault options={chartOption1} />\n            </div>\n\n            <h2 className=\"gap-up-60 gap-down-30\">알람 발생</h2>\n            <div className=\"graph-container\">\n\t\t\t\t\t\t\t<HighchartLineDefault options={chartOption2} />\n            </div>\n          </section>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ trendMtrAllData }: IRootState) => ({\n\ttrendMtrAllData: trendMtrAllData.data,\n  // isAuthenticated: authentication.isAuthenticated,\n  // isAdmin: hasAnyAuthority(authentication.account.authorities, [AUTHORITIES.ADMIN]),\n});\n\nconst mapDispatchToProps = {\n\tgetTrendMtrAll,\n  // getSession\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MtrAllTrend);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\gis\\all\\all-trend.tsx",["901","902","903","904","905","906","907"],"import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\n\nimport { getTrendGisAll } from './all-trend.reducer';\nimport TrendSearchFilter, { ITrendSearchFilterReturn } from 'shared/component/trend/trend-search-filter';\n\nimport * as Highcharts from 'highcharts';\nimport { HighchartLineDefault } from 'shared/component/chart/highcharts/hightchart-line-default1';\n\n\nexport interface IGisAllTrendProps extends StateProps, DispatchProps {\n}\n\nexport const GisAllTrend = (props: IGisAllTrendProps) => {\n\n\tconst searchFilterRef = useRef(null);\n\n\tconst [Series, setSeries] = useState({\n\t\tseries1 : [],\n\t\tseries2 : [],\n\t});\n\n\t// 조회 필터 값\n\tconst [searchFilter, setSearchFilter] = useState({\n\t\tfromDate: new Date(),\n\t\ttoDate: new Date(),\n\t\teqipId: '0',\n\t\tsnsrId: '0',\n\t\tperiod: 'year',\n\t\tfromDateZoom: new Date(),\t// 확대시 시작일시\n\t\ttoDateZoom: new Date(),\t\t// 확대시 종료일시\n\t});\n\n\tconst filterSearchCallback = ({ fromDate, toDate, eqipId, snsrId }: ITrendSearchFilterReturn) => {\n\t\tsetSearchFilter({\n\t\t\t...searchFilter,\n\t\t\tfromDate: fromDate,\n\t\t\ttoDate: toDate,\n\t\t\teqipId: eqipId,\n\t\t\tsnsrId: snsrId,\n\t\t\tfromDateZoom: fromDate,\n\t\t\ttoDateZoom: toDate,\n\t\t});\n\n\t\tprops.getTrendGisAll(\n\t\t\tfromDate,\n\t\t\ttoDate,\n\t\t\tsearchFilter.period,\n\t\t);\n\t}\n\n\t\t// 초기화 수행 콜백\n\tconst filterResetCallback = ({ fromDate, toDate, eqipId, snsrId }: ITrendSearchFilterReturn) => {\n\t\tsetSearchFilter({\n\t\t\t...searchFilter,\n\t\t\tfromDate: fromDate,\n\t\t\ttoDate: toDate,\n\t\t\teqipId: eqipId,\n\t\t\tsnsrId: snsrId,\n\t\t\tperiod: 'year',\n\t\t\tfromDateZoom: fromDate,\n\t\t\ttoDateZoom: toDate,\n\t\t});\n\n\t\tprops.getTrendGisAll(\n\t\t\tfromDate,\n\t\t\ttoDate,\n\t\t\t'year',\n\t\t);\n\t}\n\n  useEffect(() => {\n    searchFilterRef.current?.searchBtn();\n  },[]);\n\n\tuseEffect(() => {\n\t\tlet series1 = [];\n\t\tlet series2 = [];\n\n\t\tif( props.trendPdAllData == undefined )\n\t\t\treturn;\n\n\t\tprops.trendPdAllData.SeriesData.forEach(function (item) {\n\n\t\t\tlet datas = item['DATA'].filter(function (x) { return x.DataName; });\n\t\t\tlet evnts = [];\n\t\t\tlet alrms = [];\n\n\t\t\tdatas.forEach(function (data) {\n\t\t\t\tvar eCnt = data.EVNT_CNT; evnts.push(eCnt);\n\t\t\t\tvar aCnt = data.ALRM_CNT; alrms.push(aCnt);\n\t\t\t});\n\n\t\t\tseries1.push({\n\t\t\t\tname: item.DataName,\n\t\t\t\tdata: evnts,\n\t\t\t\tdataLabels: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tseries2.push({\n\t\t\t\tname: item.DataName,\n\t\t\t\tdata: alrms,\n\t\t\t\tdataLabels: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tsetSeries({\n\t\t\tseries1: series1,\n\t\t\tseries2: series2,\n\t\t});\n\n\t}, [props.trendPdAllData]);\n\n\tconst zoomChart = (e) =>\n\t{\n\t\tif (searchFilter.period == \"day\") {\n\t\t\treturn;\n\t\t}\n\n\t\tlet baseDate = searchFilter.fromDateZoom;\n\t\tlet minValue = Highcharts.numberFormat(e.xAxis[0].min, 0);\n\t\tlet maxValue = Highcharts.numberFormat(e.xAxis[0].max, 0);\n\n\t\t// if (minValue === -0)\n\t\t// \tminValue = 0;\n\t\t// if (maxValue === -0)\n\t\t// \tmaxValue = 0;\n\n\t\tif ( searchFilter.period === \"year\") {\n\t\t\tlet currentMonth = baseDate.getMonth();\n\t\t\tlet fromDate = new Date(baseDate.getFullYear(), currentMonth + Number(minValue), 1, 0, 0, 0);\n\t\t\tlet toDate = new Date(baseDate.getFullYear(), currentMonth + Number(maxValue) + 1, 0, 23, 59, 59);\n\n\t\t\tsetSearchFilter({\n\t\t\t\t...searchFilter,\n\t\t\t\tperiod: 'month',\n\t\t\t\tfromDateZoom: fromDate,\n\t\t\t\ttoDateZoom: toDate,\n\t\t\t});\n\n\t\t\tprops.getTrendGisAll(\n\t\t\t\tfromDate,\n\t\t\t\ttoDate,\n\t\t\t\t'month',\n\t\t\t);\n\t\t}\n\t\telse if ( searchFilter.period === \"month\") {\n\t\t\tlet currentDate = baseDate.getDate();\n\t\t\tlet fromDate = new Date(baseDate.getFullYear(), baseDate.getMonth(), currentDate + Number(minValue), 0, 0, 0);\n\t\t\tlet toDate = new Date(baseDate.getFullYear(), baseDate.getMonth(), currentDate + Number(maxValue), 23, 59, 59);\n\n\t\t\tsetSearchFilter({\n\t\t\t\t...searchFilter,\n\t\t\t\tperiod: 'day',\n\t\t\t\tfromDateZoom: fromDate,\n\t\t\t\ttoDateZoom: toDate,\n\t\t\t});\n\n\t\t\tprops.getTrendGisAll(\n\t\t\t\tfromDate,\n\t\t\t\ttoDate,\n\t\t\t\t'day',\n\t\t\t);\n\t\t}\n\n\t\treturn false; // Zoom Event 무효화\n\t}\n\n\tconst chartOption1 = props.trendPdAllData == undefined ?\n\t{\n\t\ttitle: {\n\t\t\ttext: '',\n\t\t},\n\t} :\n\t{\n        chart: {\n            zoomType: 'x',\n            events: {\n\t\t\t\tselection : zoomChart\n\t\t\t}\n        },\n        title: {\n            text: \"\",\n            // x: -20 //center\n        }, credits: { enabled: false },\n        xAxis: {\n            categories: props.trendPdAllData.XAxisData\n        },\n        yAxis: {\n            min: 0,\n            startOnTick: false,\n            title: {\n                text: '발생 회수'\n            },\n            plotLines: [{\n                value: 0,\n                width: 1,\n                color: '#808080'\n            }]\n        },\n        tooltip: {\n            shared: true,\n            crosshairs: true,\n            pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.f}</b><br/>'\n        },\n        legend: {\n            layout: 'vertical',\n            align: 'right',\n            verticalAlign: 'middle',\n            borderWidth: 0\n        },\n        series: Series.series1\n    };\n\n\tconst chartOption2 = props.trendPdAllData == undefined ?\n\t{\n\t\ttitle: {\n\t\t\ttext: '',\n\t\t},\n\t} :\n\t{\n        chart: {\n            zoomType: 'x',\n            marginRight: 150,\n\t\t\tevents: {\n\t\t\t\tselection : zoomChart\n\t\t\t}\n        },\n        title: {\n            text: \"\",\n            // x: -20 //center\n        }, credits: { enabled: false },\n        xAxis: {\n            categories: props.trendPdAllData.XAxisData\n        },\n        yAxis: {\n            //min: 0,\n            startOnTick: false,\n            title: {\n                text: '발생 회수',\n            },\n            plotLines: [{\n                value: 0,\n                width: 1,\n                color: '#808080'\n            }]\n        },\n        tooltip: {\n            shared: true,\n            crosshairs: true,\n            pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.1f}</b><br/>'\n        },\n        legend: {\n            layout: 'vertical',\n            align: 'right',\n            verticalAlign: 'middle',\n            borderWidth: 0\n        },\n        series: Series.series2\n    };\n\n\treturn (\n    <>\n      <div className=\"contents-area\">\n        <section className=\"contents-header\">\n          <h2>GIS 설비별 진단 경향</h2>\n          {/*<ol className=\"route\">*/}\n          {/*  <li><a href=\"\"><img src={require('assets/img/icon_home.svg').default} />&nbsp;온수 변전소</a></li>*/}\n          {/*  <li><a href=\"\">GIS 설비별 진단 경향</a></li>*/}\n          {/*</ol>*/}\n        </section>\n        <div className=\"container\">\n          <div className=\"nav-index gap30\">\n            <TrendSearchFilter\n\t\t\t\t\t\t\tref={searchFilterRef}\n\t\t\t\t\t\t\tlocaleFormat='YYYY-MM-DD'\n\t\t\t\t\t\t\tuseEqipId={false}\n\t\t\t\t\t\t\tuseSnsrId={false}\n\t\t\t\t\t\t\tcallbackSearch={filterSearchCallback}\n\t\t\t\t\t\t\tcallbackReset={filterResetCallback}\n\t\t\t\t\t\t/>\n          </div>\n          <section className=\"gis-parts solo\">\n            <h2 className=\"gap-up-40 gap-down-30\">이벤트 발생</h2>\n            <div className=\"graph-container\">\n\t\t\t\t<HighchartLineDefault options={chartOption1} />\n            </div>\n\n            <h2 className=\"gap-up-60 gap-down-30\">알람 발생</h2>\n            <div className=\"graph-container\">\n\t\t\t\t<HighchartLineDefault options={chartOption2} />\n            </div>\n\n\t\t\t{/* // Blank Markup\n            <h2 class=\"gap-up-60 gap-down-30\">제목 영역</h2>\n            <div class=\"graph-container\">\n                <div class=\"width-10 height-200px\" style=\"background: #eee;\">그래프 영역.<br/>배경 색상은 레이아웃 구분을 위해 삽입한 것으로, 구현 완료 후 삭제해주세요. height 길이를 바꾸려면 height-200px class명을 변경해주세요. 100px - 500px까지 5단계로 있습니다.</div>\n                <div class=\"input-legend graph block gap-up-40\">\n                    <ul>\n                        <li><i class=\"sign green\"></i>범례 01</li>\n                        <li><i class=\"sign yellow\"></i>범례 02</li>\n                        <li><i class=\"sign orange\"></i>범례 03</li>\n                        <li><i class=\"sign red\"></i>범례 04</li>\n                    </ul>\n                </div>\n            </div>*/}\n          </section>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ trendPdAllData }: IRootState) => ({\n\ttrendPdAllData: trendPdAllData.data,\n\t// isAuthenticated: authentication.isAuthenticated,\n  // isAdmin: hasAnyAuthority(authentication.account.authorities, [AUTHORITIES.ADMIN]),\n});\n\nconst mapDispatchToProps = {\n\tgetTrendGisAll,\n  // getSession\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GisAllTrend);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\mtr\\oltc-spdc\\oltc-spdc.tsx",["908","909","910","911"],"import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport TrendSearchFilter, { ITrendSearchFilterReturn } from '../../../../shared/component/trend/trend-search-filter';\nimport { getTrendOltcSpdc } from './oltc-spdc.reducer';\n\n// Hightcharts\nimport * as Highcharts from 'highcharts';\nimport { HighchartLineDefault } from 'shared/component/chart/highcharts/hightchart-line-default1';\n\nexport interface IMtrOltcSpdcTrendProps extends StateProps, DispatchProps {}\n\nexport const MtrOltcSpdcTrend = (props: IMtrOltcSpdcTrendProps) => {\n\n\tconst eqipType = 'MTR';\n\tconst snsrType = 'OLTC_SPDC';\n\n  const searchFilterRef = useRef(null);\n\n  const [searchFilter, setSearchFilter] = useState( {\n    fromDate: new Date(),\n    toDate: new Date(),\n    eqipId: '0',\n    snsrId: '0',\n\t\tperiod: 'year',\n\t\tfromDateZoom: new Date(),\t// 확대시 시작일시\n\t\ttoDateZoom: new Date(),\t\t// 확대시 종료일시\n  });\n\n  const filterSearchCallback = ({ fromDate, toDate, eqipId, snsrId }: ITrendSearchFilterReturn) => {\n    setSearchFilter({\n\t\t...searchFilter,\n\t\tfromDate: fromDate,\n\t\ttoDate: toDate,\n\t\teqipId: eqipId,\n\t\tsnsrId: snsrId,\n\t\tfromDateZoom: fromDate,\n\t\ttoDateZoom: toDate,\n    });\n\n\t\tprops.getTrendOltcSpdc(\n\t\t\tfromDate,\n\t\t\ttoDate,\n\t\t\teqipId,\n\t\t\tsnsrId,\n\t\t\tsearchFilter.period,\n\t\t);\n  }\n\n      // 초기화 수행 콜백\n\tconst filterResetCallback = ({ fromDate, toDate, eqipId, snsrId }: ITrendSearchFilterReturn) => {\n\t\tsetSearchFilter({\n\t\t  ...searchFilter,\n\t\t  fromDate: fromDate,\n\t\t  toDate: toDate,\n\t\t  eqipId: eqipId,\n\t\t  snsrId: snsrId,\n\t\t  period: 'year',\n\t\t  fromDateZoom: fromDate,\n\t\t  toDateZoom: toDate,\n\t\t});\n\n\t\tprops.getTrendOltcSpdc(\n\t\t\tfromDate,\n\t\t\ttoDate,\n\t\t\teqipId,\n\t\t\tsnsrId,\n\t\t\t'year',\n\t\t);\n\t  }\n\n  useEffect(() => {\n    searchFilterRef.current?.searchBtn();\n  },[]);\n\n  const zoomChart = (e) =>\n  {\n\t  if (searchFilter.period == \"day\") {\n\t\t  return;\n\t  }\n\n\t  let baseDate = searchFilter.fromDateZoom;\n\t  let minValue = Highcharts.numberFormat(e.xAxis[0].min, 0);\n\t  let maxValue = Highcharts.numberFormat(e.xAxis[0].max, 0);\n\n\t  // if (minValue === -0)\n\t  // \tminValue = 0;\n\t  // if (maxValue === -0)\n\t  // \tmaxValue = 0;\n\n\t  if ( searchFilter.period === \"year\") {\n\t\t  let currentMonth = baseDate.getMonth();\n\t\t  let fromDate = new Date(baseDate.getFullYear(), currentMonth + Number(minValue), 1, 0, 0, 0);\n\t\t  let toDate = new Date(baseDate.getFullYear(), currentMonth + Number(maxValue) + 1, 0, 23, 59, 59);\n\n\t\t  setSearchFilter({\n\t\t\t  ...searchFilter,\n\t\t\t  period: 'month',\n\t\t\t  fromDateZoom: fromDate,\n\t\t\t  toDateZoom: toDate,\n\t\t  });\n\n\t\t  props.getTrendOltcSpdc(\n\t\t\t  fromDate,\n\t\t\t  toDate,\n\t\t\t  searchFilter.eqipId,\n\t\t\t  searchFilter.snsrId,\n\t\t\t  'month',\n\t\t  );\n\t  }\n\t  else if ( searchFilter.period === \"month\") {\n\t\t  let currentDate = baseDate.getDate();\n\t\t  let fromDate = new Date(baseDate.getFullYear(), baseDate.getMonth(), currentDate + Number(minValue), 0, 0, 0);\n\t\t  let toDate = new Date(baseDate.getFullYear(), baseDate.getMonth(), currentDate + Number(maxValue), 23, 59, 59);\n\n\t\t  setSearchFilter({\n\t\t\t  ...searchFilter,\n\t\t\t  period: 'day',\n\t\t\t  fromDateZoom: fromDate,\n\t\t\t  toDateZoom: toDate,\n\t\t  });\n\n\t\t  props.getTrendOltcSpdc(\n\t\t\t  fromDate,\n\t\t\t  toDate,\n\t\t\t  searchFilter.eqipId,\n\t\t\t  searchFilter.snsrId,\n\t\t\t  'day',\n\t\t  );\n\t  }\n\n\t  return false; // Zoom Event 무효화\n  }\n\n  const chartOption1 = props.trendOltcSpdcData == undefined ?\n  {\n\ttitle: {\n\t\ttext: '',\n\t},\n\t} : {\n\t\tchart: {\n\t\t\tmarginRight: 150,\n\t\t\tzoomType: 'x',\n\t\t\tevents: {\n\t\t\t\tselection: zoomChart\n\t\t\t}\n\t\t},\n\t\ttitle: {\n\t\t\ttext: '',\n\t\t\t// x: -20 //center\n\t\t}, credits: { enabled: false },\n\t\txAxis: {\n\t\t\tcategories: props.trendOltcSpdcData.XAxisData\n\t\t},\n\t\tyAxis: {\n\t\t\tmin: 0,\n\t\t\tstartOnTick: false,\n\t\t\ttitle: {\n\t\t\t\ttext: '발생 회수'\n\t\t\t},\n\t\t\tlabels: {\n\t\t\t\tformat: '{value} 회',\n\t\t\t\tstyle: {\n\t\t\t\t\tcolor: Highcharts.getOptions().colors[1]\n\t\t\t\t}\n\t\t\t},\n\t\t\tplotLines: [{\n\t\t\t\tvalue: 0,\n\t\t\t\twidth: 1,\n\t\t\t\tcolor: '#808080'\n\t\t\t}]\n\t\t},\n\t\ttooltip: {\n\t\t\tshared: true,\n\t\t\tcrosshairs: true,\n\t\t\tpointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.f}</b><br/>'\n\t\t},\n\t\tlegend: {\n\t\t\tlayout: 'vertical',\n\t\t\talign: 'right',\n\t\t\tverticalAlign: 'middle',\n\t\t\tborderWidth: 0\n\t\t},\n\t\tplotOptions: {\n\t\t\tseries: {\n\t\t\t\tturboThreshold: 15000,\n\t\t\t\tdataGrouping: {\n\t\t\t\t\tenabled: false\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tseries: [{\n\t\t\tname: '이벤트 발생',\n\t\t\tdata: props.trendOltcSpdcData.EventData,\n\t\t\tvisible: false,\n\t\t\tdataLabels: {\n\t\t\t\tenabled: false,\n\t\t\t\tformatter: function () {\n\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tname: '알람 발생',\n\t\t\tdata: props.trendOltcSpdcData.AlarmData,\n\t\t\tcolor: '#FF0000',\n\t\t\tdataLabels: {\n\t\t\t\tenabled: false,\n\t\t\t\tformatter: function () {\n\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}]\n\t};\n\n\tconst chartOption2 = props.trendOltcSpdcData == undefined ?\n\t{\n\t  title: {\n\t\t  text: '',\n\t  },\n\t  } : {\n        chart: {\n            zoomType: 'x',\n            marginRight: 150,\n\t\t\tevents: {\n\t\t\t\tselection: zoomChart\n\t\t\t}\n        },\n        title: {\n            text: '',\n            // x: -20 //center\n        }, credits: { enabled: false },\n        xAxis: {\n            categories: props.trendOltcSpdcData.XAxisData\n        },\n        yAxis: {\n            //min: 0,\n            startOnTick: false,\n            title: {\n                text: '이벤트 회수',\n                style: {\n                    color: Highcharts.getOptions().colors[1]\n                }\n            },\n            labels: {\n                format: '{value} 회',\n                style: {\n                    color: Highcharts.getOptions().colors[1]\n                }\n            }\n        },\n        tooltip: {\n            shared: true,\n            crosshairs: true,\n            pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.1f}</b><br/>'\n        },\n        legend: {\n            layout: 'vertical',\n            align: 'right',\n            verticalAlign: 'middle',\n            borderWidth: 0\n        },\n        plotOptions: {\n            series: {\n                turboThreshold: 15000,\n                dataGrouping: {\n                    enabled: false\n                }\n            }\n        },\n        series: [{\n            name: 'Corona', //yAxis: 0,\n            data: props.trendOltcSpdcData.CoronaCounts,\n            dataLabels: {\n                enabled: false,\n                formatter: function () {\n                    if (this.y < 0) {\n                        return null;\n                    } else {\n                        return Highcharts.numberFormat(this.y, 1);\n                    }\n                }\n            }\n        }, {\n            name: 'Floating', //yAxis: 0,\n            data: props.trendOltcSpdcData.FloatingCounts,\n            dataLabels: {\n                enabled: false,\n                formatter: function () {\n                    if (this.y < 0) {\n                        return null;\n                    } else {\n                        return Highcharts.numberFormat(this.y, 1);\n                    }\n                }\n            }\n        }, {\n            name: 'Particle', //yAxis: 0,\n            data: props.trendOltcSpdcData.ParticleCounts,\n            dataLabels: {\n                enabled: false,\n                formatter: function () {\n                    if (this.y < 0) {\n                        return null;\n                    } else {\n                        return Highcharts.numberFormat(this.y, 1);\n                    }\n                }\n            }\n        }, {\n            name: 'Void', //yAxis: 0,\n            data: props.trendOltcSpdcData.VoidCounts,\n            dataLabels: {\n                enabled: false,\n                formatter: function () {\n                    if (this.y < 0) {\n                        return null;\n                    } else {\n                        return Highcharts.numberFormat(this.y, 1);\n                    }\n                }\n            }\n        }, {\n            name: 'Surface', //yAxis: 0,\n            data: props.trendOltcSpdcData.SurfaceCounts,\n            visible: false,\n            showInLegend: false,\n            dataLabels: {\n                enabled: false,\n                formatter: function () {\n                    if (this.y < 0) {\n                        return null;\n                    } else {\n                        return Highcharts.numberFormat(this.y, 1);\n                    }\n                }\n            }\n        }, {\n            name: 'TtoT', //yAxis: 0,\n            data: props.trendOltcSpdcData.TtotCounts,\n            visible: false,\n            showInLegend: false,\n            dataLabels: {\n                enabled: false,\n                formatter: function () {\n                    if (this.y < 0) {\n                        return null;\n                    } else {\n                        return Highcharts.numberFormat(this.y, 1);\n                    }\n                }\n            }\n        }, {\n            name: 'Noise', //yAxis: 0,\n            data: props.trendOltcSpdcData.NoiseCounts,\n            dataLabels: {\n                enabled: false,\n                formatter: function () {\n                    if (this.y < 0) {\n                        return null;\n                    } else {\n                        return Highcharts.numberFormat(this.y, 1);\n                    }\n                }\n            }\n        }]\n    };\n\n\t  const chartOption3 = props.trendOltcSpdcData == undefined ?\n\t  {\n\t\ttitle: {\n\t\t\ttext: '',\n\t\t},\n\t\t} : {\n\t\t\tchart: {\n\t\t\t\tmarginRight: 150,\n\t\t\t\tzoomType: 'x',\n\t\t\t\tevents: {\n\t\t\t\t\tselection: zoomChart\n\t\t\t\t}\n\t\t\t},\n\t\t\ttitle: {\n\t\t\t\ttext: '',\n\t\t\t\t// x: -20 //center\n\t\t\t}, credits: { enabled: false },\n\t\t\txAxis: {\n\t\t\t\tcategories: props.trendOltcSpdcData.XAxisData\n\t\t\t},\n\t\t\tyAxis: {\n\t\t\t\tmin: 0,\n\t\t\t\tstartOnTick: false,\n\t\t\t\ttitle: {\n\t\t\t\t\ttext: '발생 회수'\n\t\t\t\t},\n\t\t\t\tlabels: {\n\t\t\t\t\tformat: '{value} 회',\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tcolor: Highcharts.getOptions().colors[1]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tplotLines: [{\n\t\t\t\t\tvalue: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\tcolor: '#808080'\n\t\t\t\t}]\n\t\t\t},\n\t\t\ttooltip: {\n\t\t\t\tshared: true,\n\t\t\t\tcrosshairs: true,\n\t\t\t\tpointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.f}</b><br/>'\n\t\t\t},\n\t\t\tlegend: {\n\t\t\t\tlayout: 'vertical',\n\t\t\t\talign: 'right',\n\t\t\t\tverticalAlign: 'middle',\n\t\t\t\tborderWidth: 0\n\t\t\t},\n\t\t\tplotOptions: {\n\t\t\t\tseries: {\n\t\t\t\t\tturboThreshold: 15000,\n\t\t\t\t\tdataGrouping: {\n\t\t\t\t\t\tenabled: false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tseries: [{\n\t\t\t\tname: '이벤트 발생',\n\t\t\t\tdata: props.trendOltcSpdcData.EventData,\n\t\t\t\tvisible: false,\n\t\t\t\tdataLabels: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tname: '알람 발생',\n\t\t\t\tdata: props.trendOltcSpdcData.AlarmData,\n\t\t\t\tcolor: '#FF0000',\n\t\t\t\tdataLabels: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}]\n\t\t};\n\n  return (\n    <>\n      <div className=\"contents-area\">\n        <section className=\"contents-header\">\n          <h2>OLTC 부분 방전 진단 경향</h2>\n          {/*<ol className=\"route\">*/}\n          {/*  <li><a href=\"\"><img src={require('assets/img/icon_home.svg').default} />&nbsp;온수 변전소</a></li>*/}\n          {/*  <li><a href=\"\">MTR 설비별 진단 경향</a></li>*/}\n          {/*  <li><a href=\"\">OLTC 부분 방전 진단 경향</a></li>*/}\n          {/*</ol>*/}\n        </section>\n        <div className=\"container\">\n          <div className=\"nav-index gap30\">\n\t\t\t\t\t\t<TrendSearchFilter ref={searchFilterRef}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\teqipType={eqipType}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsnsrType={snsrType}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcallbackSearch={filterSearchCallback}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcallbackReset={filterResetCallback} />\n\t\t\t\t\t</div>\n          <section className=\"gis-parts solo\">\n            {/* 그래프 3종류 */}\n            <h2 className=\"gap-up-40 gap-down-30\">알람/이벤트 발생</h2>\n            <div className=\"graph-container\">\n\t\t\t\t\t\t\t<HighchartLineDefault options={chartOption1} />\n            </div>\n\n            <h2 className=\"gap-up-60 gap-down-30\">이벤트 회수</h2>\n            <div className=\"graph-container\">\n\t\t\t\t\t\t\t<HighchartLineDefault options={chartOption2} />\n            </div>\n            <h2 className=\"gap-up-60 gap-down-30\">방전크기</h2>\n            <div className=\"graph-container\">\n\t\t\t\t\t\t\t<HighchartLineDefault options={chartOption3} />\n            </div>\n          </section>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ oltcPdTrendData }: IRootState) => ({\n    trendOltcSpdcData: oltcPdTrendData.data\n});\n\nconst mapDispatchToProps = {\n  getTrendOltcSpdc\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MtrOltcSpdcTrend);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\mtr\\spdc\\spdc.tsx",["912","913","914","915"],"import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport TrendSearchFilter, { ITrendSearchFilterReturn } from '../../../../shared/component/trend/trend-search-filter';\nimport { getTrendMtrSpdc } from './spdc.reducer';\n\n// Hightcharts\nimport * as Highcharts from 'highcharts';\nimport { HighchartLineDefault } from 'shared/component/chart/highcharts/hightchart-line-default1';\n\nexport interface IMtrSpdcTrendProps extends StateProps, DispatchProps {}\n\nexport const MtrSpdcTrend = (props: IMtrSpdcTrendProps) => {\n\n\tconst eqipType = 'MTR';\n\tconst snsrType = 'MTR_SPDC';\n\n  const searchFilterRef = useRef(null);\n\n  const [searchFilter, setSearchFilter] = useState( {\n    fromDate: new Date(),\n    toDate: new Date(),\n    eqipId: '0',\n    snsrId: '0',\n\t\tperiod: 'year',\n\t\tfromDateZoom: new Date(),\t// 확대시 시작일시\n\t\ttoDateZoom: new Date(),\t\t// 확대시 종료일시\n  });\n\n  const filterSearchCallback = ({ fromDate, toDate, eqipId, snsrId }: ITrendSearchFilterReturn) => {\n    setSearchFilter({\n\t\t\t...searchFilter,\n\t\t\tfromDate: fromDate,\n\t\t\ttoDate: toDate,\n\t\t\teqipId: eqipId,\n\t\t\tsnsrId: snsrId,\n\t\t\tfromDateZoom: fromDate,\n\t\t\ttoDateZoom: toDate,\n    });\n\n\t\tprops.getTrendMtrSpdc(\n\t\t\tfromDate,\n\t\t\ttoDate,\n\t\t\teqipId,\n\t\t\tsnsrId,\n\t\t\tsearchFilter.period,\n\t\t);\n  }\n\n      // 초기화 수행 콜백\n\tconst filterResetCallback = ({ fromDate, toDate, eqipId, snsrId }: ITrendSearchFilterReturn) => {\n\t\tsetSearchFilter({\n\t\t  ...searchFilter,\n\t\t  fromDate: fromDate,\n\t\t  toDate: toDate,\n\t\t  eqipId: eqipId,\n\t\t  snsrId: snsrId,\n\t\t  period: 'year',\n\t\t  fromDateZoom: fromDate,\n\t\t  toDateZoom: toDate,\n\t\t});\n\n\t\tprops.getTrendMtrSpdc(\n\t\t\tfromDate,\n\t\t\ttoDate,\n\t\t\teqipId,\n\t\t\tsnsrId,\n\t\t\t'year',\n\t\t);\n\t}\n\n  useEffect(() => {\n    searchFilterRef.current?.searchBtn();\n  },[]);\n\n  const zoomChart = (e) =>\n  {\n\t  if (searchFilter.period == \"day\") {\n\t\t  return;\n\t  }\n\n\t  let baseDate = searchFilter.fromDateZoom;\n\t  let minValue = Highcharts.numberFormat(e.xAxis[0].min, 0);\n\t  let maxValue = Highcharts.numberFormat(e.xAxis[0].max, 0);\n\n\t  // if (minValue === -0)\n\t  // \tminValue = 0;\n\t  // if (maxValue === -0)\n\t  // \tmaxValue = 0;\n\n\t  if ( searchFilter.period === \"year\") {\n\t\t  let currentMonth = baseDate.getMonth();\n\t\t  let fromDate = new Date(baseDate.getFullYear(), currentMonth + Number(minValue), 1, 0, 0, 0);\n\t\t  let toDate = new Date(baseDate.getFullYear(), currentMonth + Number(maxValue) + 1, 0, 23, 59, 59);\n\n\t\t  setSearchFilter({\n\t\t\t  ...searchFilter,\n\t\t\t  period: 'month',\n\t\t\t  fromDateZoom: fromDate,\n\t\t\t  toDateZoom: toDate,\n\t\t  });\n\n\t\t  props.getTrendMtrSpdc(\n\t\t\t  fromDate,\n\t\t\t  toDate,\n\t\t\t  searchFilter.eqipId,\n\t\t\t  searchFilter.snsrId,\n\t\t\t  'month',\n\t\t  );\n\t  }\n\t  else if ( searchFilter.period === \"month\") {\n\t\t  let currentDate = baseDate.getDate();\n\t\t  let fromDate = new Date(baseDate.getFullYear(), baseDate.getMonth(), currentDate + Number(minValue), 0, 0, 0);\n\t\t  let toDate = new Date(baseDate.getFullYear(), baseDate.getMonth(), currentDate + Number(maxValue), 23, 59, 59);\n\n\t\t  setSearchFilter({\n\t\t\t  ...searchFilter,\n\t\t\t  period: 'day',\n\t\t\t  fromDateZoom: fromDate,\n\t\t\t  toDateZoom: toDate,\n\t\t  });\n\n\t\t  props.getTrendMtrSpdc(\n\t\t\t  fromDate,\n\t\t\t  toDate,\n\t\t\t  searchFilter.eqipId,\n\t\t\t  searchFilter.snsrId,\n\t\t\t  'day',\n\t\t  );\n\t  }\n\n\t  return false; // Zoom Event 무효화\n  }\n\n\tconst chartOption1 = props.trendMtrSpdcData == undefined ?\n  {\n\t\ttitle: {\n\t\t\ttext: '',\n\t\t},\n\t} : {\n\t\tchart: {\n\t\t\tmarginRight: 150,\n\t\t\tzoomType: 'x',\n\t\t\tevents: {\n\t\t\t\tselection: zoomChart\n\t\t\t}\n\t\t},\n\t\ttitle: {\n\t\t\ttext: '',\n\t\t\t// x: -20 //center\n\t\t}, credits: { enabled: false },\n\t\txAxis: {\n\t\t\tcategories: props.trendMtrSpdcData.XAxisData\n\t\t},\n\t\tyAxis: {\n\t\t\tmin: 0,\n\t\t\tstartOnTick: false,\n\t\t\ttitle: {\n\t\t\t\ttext: '발생 회수'\n\t\t\t},\n\t\t\tlabels: {\n\t\t\t\tformat: '{value} 회',\n\t\t\t\tstyle: {\n\t\t\t\t\tcolor: Highcharts.getOptions().colors[1]\n\t\t\t\t}\n\t\t\t},\n\t\t\tplotLines: [{\n\t\t\t\tvalue: 0,\n\t\t\t\twidth: 1,\n\t\t\t\tcolor: '#808080'\n\t\t\t}]\n\t\t},\n\t\ttooltip: {\n\t\t\tshared: true,\n\t\t\tcrosshairs: true,\n\t\t\tpointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.f}</b><br/>'\n\t\t},\n\t\tlegend: {\n\t\t\tlayout: 'vertical',\n\t\t\talign: 'right',\n\t\t\tverticalAlign: 'middle',\n\t\t\tborderWidth: 0\n\t\t},\n\t\tplotOptions: {\n\t\t\tseries: {\n\t\t\t\tturboThreshold: 15000,\n\t\t\t\tdataGrouping: {\n\t\t\t\t\tenabled: false\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tseries: [{\n\t\t\tname: '이벤트 발생',\n\t\t\tdata: props.trendMtrSpdcData.EventData,\n\t\t\tvisible: false,\n\t\t\tdataLabels: {\n\t\t\t\tenabled: false,\n\t\t\t\tformatter: function () {\n\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tname: '알람 발생',\n\t\t\tdata: props.trendMtrSpdcData.AlarmData,\n\t\t\tcolor: '#FF0000',\n\t\t\tdataLabels: {\n\t\t\t\tenabled: false,\n\t\t\t\tformatter: function () {\n\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}]\n\t};\n\n\tconst chartOption2 = props.trendMtrSpdcData == undefined ?\n\t{\n\t  title: {\n\t\t  text: '',\n\t  },\n\t  } : {\n        chart: {\n            zoomType: 'x',\n            marginRight: 150,\n\t\t\tevents: {\n\t\t\t\tselection: zoomChart\n\t\t\t}\n        },\n        title: {\n            text: '',\n            // x: -20 //center\n        }, credits: { enabled: false },\n        xAxis: {\n            categories: props.trendMtrSpdcData.XAxisData\n        },\n        yAxis: {\n            //min: 0,\n            startOnTick: false,\n            title: {\n                text: '이벤트 회수',\n                style: {\n                    color: Highcharts.getOptions().colors[1]\n                }\n            },\n            labels: {\n                format: '{value} 회',\n                style: {\n                    color: Highcharts.getOptions().colors[1]\n                }\n            }\n        },\n        tooltip: {\n            shared: true,\n            crosshairs: true,\n            pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.1f}</b><br/>'\n        },\n        legend: {\n            layout: 'vertical',\n            align: 'right',\n            verticalAlign: 'middle',\n            borderWidth: 0\n        },\n        plotOptions: {\n            series: {\n                turboThreshold: 15000,\n                dataGrouping: {\n                    enabled: false\n                }\n            }\n        },\n        series: [{\n            name: 'Corona', //yAxis: 0,\n            data: props.trendMtrSpdcData.CoronaCounts,\n            dataLabels: {\n                enabled: false,\n                formatter: function () {\n                    if (this.y < 0) {\n                        return null;\n                    } else {\n                        return Highcharts.numberFormat(this.y, 1);\n                    }\n                }\n            }\n        }, {\n            name: 'Floating', //yAxis: 0,\n            data: props.trendMtrSpdcData.FloatingCounts,\n            dataLabels: {\n                enabled: false,\n                formatter: function () {\n                    if (this.y < 0) {\n                        return null;\n                    } else {\n                        return Highcharts.numberFormat(this.y, 1);\n                    }\n                }\n            }\n        }, {\n            name: 'Particle', //yAxis: 0,\n            data: props.trendMtrSpdcData.ParticleCounts,\n            dataLabels: {\n                enabled: false,\n                formatter: function () {\n                    if (this.y < 0) {\n                        return null;\n                    } else {\n                        return Highcharts.numberFormat(this.y, 1);\n                    }\n                }\n            }\n        }, {\n            name: 'Void', //yAxis: 0,\n            data: props.trendMtrSpdcData.VoidCounts,\n            dataLabels: {\n                enabled: false,\n                formatter: function () {\n                    if (this.y < 0) {\n                        return null;\n                    } else {\n                        return Highcharts.numberFormat(this.y, 1);\n                    }\n                }\n            }\n        }, {\n            name: 'Surface', //yAxis: 0,\n            data: props.trendMtrSpdcData.SurfaceCounts,\n            visible: false,\n            showInLegend: false,\n            dataLabels: {\n                enabled: false,\n                formatter: function () {\n                    if (this.y < 0) {\n                        return null;\n                    } else {\n                        return Highcharts.numberFormat(this.y, 1);\n                    }\n                }\n            }\n        }, {\n            name: 'TtoT', //yAxis: 0,\n            data: props.trendMtrSpdcData.TtotCounts,\n            visible: false,\n            showInLegend: false,\n            dataLabels: {\n                enabled: false,\n                formatter: function () {\n                    if (this.y < 0) {\n                        return null;\n                    } else {\n                        return Highcharts.numberFormat(this.y, 1);\n                    }\n                }\n            }\n        }, {\n            name: 'Noise', //yAxis: 0,\n            data: props.trendMtrSpdcData.NoiseCounts,\n            dataLabels: {\n                enabled: false,\n                formatter: function () {\n                    if (this.y < 0) {\n                        return null;\n                    } else {\n                        return Highcharts.numberFormat(this.y, 1);\n                    }\n                }\n            }\n        }]\n    };\n\n\t  const chartOption3 = props.trendMtrSpdcData == undefined ?\n\t  {\n\t\ttitle: {\n\t\t\ttext: '',\n\t\t},\n\t\t} : {\n\t\t\tchart: {\n\t\t\t\tmarginRight: 150,\n\t\t\t\tzoomType: 'x',\n\t\t\t\tevents: {\n\t\t\t\t\tselection: zoomChart\n\t\t\t\t}\n\t\t\t},\n\t\t\ttitle: {\n\t\t\t\ttext: '',\n\t\t\t\t// x: -20 //center\n\t\t\t}, credits: { enabled: false },\n\t\t\txAxis: {\n\t\t\t\tcategories: props.trendMtrSpdcData.XAxisData\n\t\t\t},\n\t\t\tyAxis: {\n\t\t\t\tmin: 0,\n\t\t\t\tstartOnTick: false,\n\t\t\t\ttitle: {\n\t\t\t\t\ttext: '발생 회수'\n\t\t\t\t},\n\t\t\t\tlabels: {\n\t\t\t\t\tformat: '{value} 회',\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tcolor: Highcharts.getOptions().colors[1]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tplotLines: [{\n\t\t\t\t\tvalue: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\tcolor: '#808080'\n\t\t\t\t}]\n\t\t\t},\n\t\t\ttooltip: {\n\t\t\t\tshared: true,\n\t\t\t\tcrosshairs: true,\n\t\t\t\tpointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.f}</b><br/>'\n\t\t\t},\n\t\t\tlegend: {\n\t\t\t\tlayout: 'vertical',\n\t\t\t\talign: 'right',\n\t\t\t\tverticalAlign: 'middle',\n\t\t\t\tborderWidth: 0\n\t\t\t},\n\t\t\tplotOptions: {\n\t\t\t\tseries: {\n\t\t\t\t\tturboThreshold: 15000,\n\t\t\t\t\tdataGrouping: {\n\t\t\t\t\t\tenabled: false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tseries: [{\n\t\t\t\tname: '이벤트 발생',\n\t\t\t\tdata: props.trendMtrSpdcData.EventData,\n\t\t\t\tvisible: false,\n\t\t\t\tdataLabels: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tname: '알람 발생',\n\t\t\t\tdata: props.trendMtrSpdcData.AlarmData,\n\t\t\t\tcolor: '#FF0000',\n\t\t\t\tdataLabels: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}]\n\t\t};\n\n  return (\n    <>\n      <div className=\"contents-area\">\n        <section className=\"contents-header\">\n          <h2>MTR 부분 방전 진단 경향</h2>\n          {/*<ol className=\"route\">*/}\n          {/*  <li><a href=\"\"><img src={require('assets/img/icon_home.svg').default} />&nbsp;온수 변전소</a></li>*/}\n          {/*  <li><a href=\"\">MTR 설비별 진단 경향</a></li>*/}\n          {/*  <li><a href=\"\">MTR 부분 방전 진단 경향</a></li>*/}\n          {/*</ol>*/}\n        </section>\n        <div className=\"container\">\n          <div className=\"nav-index gap30\">\n\t\t\t\t\t\t<TrendSearchFilter ref={searchFilterRef}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\teqipType={eqipType}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsnsrType={snsrType}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcallbackSearch={filterSearchCallback}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcallbackReset={filterResetCallback} />\n          </div>\n          <section className=\"gis-parts solo\">\n            {/* 그래프 3종류 */}\n            <h2 className=\"gap-up-40 gap-down-30\">알람/이벤트 발생</h2>\n            <div className=\"graph-container\">\n\t\t\t\t\t\t\t<HighchartLineDefault options={chartOption1} />\n            </div>\n\n            <h2 className=\"gap-up-60 gap-down-30\">이벤트 회수</h2>\n             <div className=\"graph-container\">\n\t\t\t\t\t\t\t\t<HighchartLineDefault options={chartOption2} />\n            </div>\n\n            <h2 className=\"gap-up-60 gap-down-30\">방전크기</h2>\n            <div className=\"graph-container\">\n\t\t\t\t\t\t\t\t<HighchartLineDefault options={chartOption3} />\n            </div>\n          </section>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ mtrPdTrendData }: IRootState) => ({\n  trendMtrSpdcData: mtrPdTrendData.data\n});\n\nconst mapDispatchToProps = {\n  getTrendMtrSpdc\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MtrSpdcTrend);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\mtr\\oltc-ofu\\oltc-ofu.tsx",["916","917","918","919","920","921","922","923","924"],"import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\n\nimport { getTrendMtrOltc } from './oltc-ofu.reducer';\n\n// {} 안에 들어가면 이상함 mapDispatchToProps를 요구함\nimport TrendSearchFilter, { ITrendSearchFilterReturn } from 'shared/component/trend/trend-search-filter';\n\n// Hightcharts\nimport * as Highcharts from 'highcharts';\nimport { HighchartLineDefault } from 'shared/component/chart/highcharts/hightchart-line-default1';\n\nexport interface IMtrOltcOfuTrendProps extends StateProps, DispatchProps {}\n\nexport const MtrOltcOfuTrend = (props: IMtrOltcOfuTrendProps) => {\n\n\tconst eqipType = 'MTR';\n\tconst snsrType = 'MTR_OLTC';\n\n\tconst searchFilterRef = useRef(null);\n\n  useEffect(() => {\n    searchFilterRef.current?.searchBtn();\n  },[]);\n\n  const [searchFilter, setSearchFilter] = useState({\n    fromDate: new Date(),\n    toDate: new Date(),\n    eqipId: '0',\n    snsrId: '0',\n\tperiod: 'year',\n\tfromDateZoom: new Date(),\t// 확대시 시작일시\n\ttoDateZoom: new Date(),\t\t// 확대시 종료일시\n  });\n\n  // 조회 수행 콜백\n  const filterSearchCallback = ({ fromDate, toDate, eqipId, snsrId }: ITrendSearchFilterReturn) => {\n    setSearchFilter({\n\t  ...searchFilter,\n      fromDate: fromDate,\n      toDate: toDate,\n      eqipId: eqipId,\n      snsrId: snsrId,\n\t  fromDateZoom: fromDate,\n\t  toDateZoom: toDate,\n    });\n\n\t\tprops.getTrendMtrOltc(\n\t\t\tfromDate,\n\t\t\ttoDate,\n\t\t\teqipId,\n\t\t\tsnsrId,\n\t\t\tsearchFilter.period,\n\t\t);\n  }\n\n  // 초기화 수행 콜백\n  const filterResetCallback = ({ fromDate, toDate, eqipId, snsrId }: ITrendSearchFilterReturn) => {\n    setSearchFilter({\n\t  ...searchFilter,\n      fromDate: fromDate,\n      toDate: toDate,\n      eqipId: eqipId,\n      snsrId: snsrId,\n\t  period: 'year',\n\t  fromDateZoom: fromDate,\n\t  toDateZoom: toDate,\n    });\n\n\t\tprops.getTrendMtrOltc(\n\t\t\tfromDate,\n\t\t\ttoDate,\n\t\t\teqipId,\n\t\t\tsnsrId,\n\t\t\t'year',\n\t\t);\n  }\n\n  // 조회 이후 차트 다시 그리기\n  useEffect(() => {\n  }, [props.trendMtrOltcData]);\n\n\tconst zoomChart = (e) =>\n\t{\n\t\tif (searchFilter.period == \"day\") {\n\t\t\treturn;\n\t\t}\n\n\t\tlet baseDate = searchFilter.fromDateZoom;\n\t\tlet minValue = Highcharts.numberFormat(e.xAxis[0].min, 0);\n\t\tlet maxValue = Highcharts.numberFormat(e.xAxis[0].max, 0);\n\n\t\t// if (minValue === -0)\n\t\t// \tminValue = 0;\n\t\t// if (maxValue === -0)\n\t\t// \tmaxValue = 0;\n\n\t\tif ( searchFilter.period === \"year\") {\n\t\t\tlet currentMonth = baseDate.getMonth();\n\t\t\tlet fromDate = new Date(baseDate.getFullYear(), currentMonth + Number(minValue), 1, 0, 0, 0);\n\t\t\tlet toDate = new Date(baseDate.getFullYear(), currentMonth + Number(maxValue) + 1, 0, 23, 59, 59);\n\n\t\t\tsetSearchFilter({\n\t\t\t\t...searchFilter,\n\t\t\t\tperiod: 'month',\n\t\t\t\tfromDateZoom: fromDate,\n\t\t\t\ttoDateZoom: toDate,\n\t\t\t});\n\n\t\t\tprops.getTrendMtrOltc(\n\t\t\t\tfromDate,\n\t\t\t\ttoDate,\n\t\t\t\tsearchFilter.eqipId,\n\t\t\t\tsearchFilter.snsrId,\n\t\t\t\t'month',\n\t\t\t);\n\t\t}\n\t\telse if ( searchFilter.period === \"month\") {\n\t\t\tlet currentDate = baseDate.getDate();\n\t\t\tlet fromDate = new Date(baseDate.getFullYear(), baseDate.getMonth(), currentDate + Number(minValue), 0, 0, 0);\n\t\t\tlet toDate = new Date(baseDate.getFullYear(), baseDate.getMonth(), currentDate + Number(maxValue), 23, 59, 59);\n\n\t\t\tsetSearchFilter({\n\t\t\t\t...searchFilter,\n\t\t\t\tperiod: 'day',\n\t\t\t\tfromDateZoom: fromDate,\n\t\t\t\ttoDateZoom: toDate,\n\t\t\t});\n\n\t\t\tprops.getTrendMtrOltc(\n\t\t\t\tfromDate,\n\t\t\t\ttoDate,\n\t\t\t\tsearchFilter.eqipId,\n\t\t\t\tsearchFilter.snsrId,\n\t\t\t\t'day',\n\t\t\t);\n\t\t}\n\n\t\treturn false; // Zoom Event 무효화\n\t}\n\n\n  const chartOption1 = props.trendMtrOltcData == undefined ?\n  \t{\n\t\ttitle: {\n\t\t\ttext: '',\n\t\t},\n\t} : {\n\t\tchart: {\n\t\t\tzoomType: 'x',\n\t\t\tevents: {\n\t\t\t\tselection: zoomChart\n\t\t\t}\n\t\t},\n\t\ttitle: {\n\t\t\ttext: '',\n\t\t\t// x: -20 //center\n\t\t},\n\t\tcredits: { enabled: false },\n\t\txAxis: {\n\t\t\tcategories: props.trendMtrOltcData.XAxisData\n\t\t},\n\t\tyAxis: {\n\t\t\t//min: 0,\n\t\t\tstartOnTick: false,\n\t\t\ttitle: {\n\t\t\t\ttext: '발생 회수'\n\t\t\t},\n\t\t\tplotLines: [{\n\t\t\t\tvalue: 0,\n\t\t\t\twidth: 1,\n\t\t\t\tcolor: '#808080'\n\t\t\t}],\n\t\t\tlabels: {\n\t\t\t\tformat: '{value} 회',\n\t\t\t\tstyle: {\n\t\t\t\t\tcolor: Highcharts.getOptions().colors[1]\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\ttooltip: {\n\t\t\tshared: true,\n\t\t\tcrosshairs: true,\n\t\t\tpointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.f}</b><br/>'\n\t\t},\n\t\tlegend: {\n\t\t\tlayout: 'vertical',\n\t\t\talign: 'right',\n\t\t\tverticalAlign: 'middle',\n\t\t\tborderWidth: 0\n\t\t},\n\t\tplotOptions: {\n\t\t\tseries: {\n\t\t\t\tturboThreshold: 5000,\n\t\t\t\tdataGrouping: {\n\t\t\t\t\tenabled: false\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tseries: [{\n\t\t\tname: '동작',\n\t\t\tvisible: false,\n\t\t\tdata: props.trendMtrOltcData.EventData,\n\t\t\tdataLabels: {\n\t\t\t\tenabled: false,\n\t\t\t\tformatter: function () {\n\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}, {\n\t\t\tname: '알람 발생',\n\t\t\tdata: props.trendMtrOltcData.AlarmData, color: '#FF0000',\n\t\t\tdataLabels: {\n\t\t\t\tenabled: false,\n\t\t\t\tformatter: function () {\n\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}]\n\t};\n\n  const chartOption2 = props.trendMtrOltcData == undefined ?\n\t{\n\t  title: {\n\t\t  text: '',\n\t  },\n  } :{\n\tchart: {\n\t\tzoomType: 'x',\n\t\tmarginRight: 150,\n\t\tevents: {\n\t\t\tselection: zoomChart\n\t\t}\n\t},\n\ttitle: {\n\t\ttext: '',\n\t\t// x: -20 //center\n\t},\n\tcredits: { enabled: false },\n\txAxis: {\n\t\tcategories: props.trendMtrOltcData.XAxisData\n\t},\n\tyAxis: {\n\t\tmin: 0,\n\t\tstartOnTick: false,\n\t\ttitle: {\n\t\t\ttext: '발생 회수'\n\t\t},\n\t\tlabels: {\n\t\t\tformat: '{value} 회',\n\t\t\tstyle: {\n\t\t\t\tcolor: Highcharts.getOptions().colors[1]\n\t\t\t}\n\t\t},\n\t\tplotLines: [{\n\t\t\tvalue: 0,\n\t\t\twidth: 1,\n\t\t\tcolor: '#808080'\n\t\t}]\n\t},\n\ttooltip: {\n\t\tshared: true,\n\t\tcrosshairs: true,\n\t\tpointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.f}</b><br/>'\n\t},\n\tlegend: {\n\t\tlayout: 'vertical',\n\t\talign: 'right',\n\t\tverticalAlign: 'middle',\n\t\tborderWidth: 0\n\t},\n\tplotOptions: {\n\t\tseries: {\n\t\t\tturboThreshold: 5000,\n\t\t\tdataGrouping: {\n\t\t\t\tenabled: false\n\t\t\t}\n\t\t}\n\t},\n\tseries: [{\n\t\tname: '요주의',\n\t\tdata: props.trendMtrOltcData.Vaution_cnt,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\tname: '이상',\n\t\tdata: props.trendMtrOltcData.Abnormal_cnt,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\tname: '위험',\n\t\tdata: props.trendMtrOltcData.Danger_cnt,\n\t\tcolor: '#FF0000',\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t}\n\t\t}\n\t}]\n};\n\n  const chartOption3 = props.trendMtrOltcData == undefined ?\n  {\n\ttitle: {\n\t\ttext: '',\n\t},\n} : {\n\tchart: {\n\t\tzoomType: 'x',\n\t\tevents: {\n\t\t\tselection: zoomChart\n\t\t}\n\t},\n\ttitle: {\n\t\ttext: '',\n\t\t// x: -20 //center\n\t}, credits: { enabled: false },\n\txAxis: {\n\t\tcategories: props.trendMtrOltcData.XAxisData\n\t},\n\tyAxis: {\n\t\t//min: 0,\n\t\tstartOnTick: false,\n\t\ttitle: {\n\t\t\ttext: '전류'\n\t\t},\n\t\tplotLines: [{\n\t\t\tvalue: 0,\n\t\t\twidth: 1,\n\t\t\tcolor: '#808080'\n\t\t}],\n\t\tlabels: {\n\t\t\tformat: '{value} A',\n\t\t\tstyle: {\n\t\t\t\tcolor: Highcharts.getOptions().colors[1]\n\t\t\t}\n\t\t},\n\t},\n\ttooltip: {\n\t\tshared: true,\n\t\tcrosshairs: true,\n\t\tpointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.1f}</b><br/>'\n\t},\n\tlegend: {\n\t\tlayout: 'vertical',\n\t\talign: 'right',\n\t\tverticalAlign: 'middle',\n\t\tborderWidth: 0\n\t},\n\tplotOptions: {\n\t\tseries: {\n\t\t\tturboThreshold: 5000,\n\t\t\tdataGrouping: {\n\t\t\t\tenabled: false\n\t\t\t}\n\t\t}\n\t},\n\tseries: [{\n\t\tname: 'A상 평균',\n\t\tvisible: false,\n\t\tdata: props.trendMtrOltcData.RUSH_CURR_A_AVG,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tname: 'A상 최대',\n\t\tdata: props.trendMtrOltcData.PEAK_CURR_A_MAX,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tname: 'B상 평균',\n\t\tvisible: false,\n\t\tdata: props.trendMtrOltcData.RUSH_CURR_B_AVG,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tname: 'B상 최대',\n\t\tdata: props.trendMtrOltcData.PEAK_CURR_B_MAX,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tname: 'C상 평균',\n\t\tvisible: false,\n\t\tdata: props.trendMtrOltcData.RUSH_CURR_C_AVG,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tname: 'C상 최대',\n\t\tdata: props.trendMtrOltcData.PEAK_CURR_C_MAX,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t}\n\t\t}\n\t}]\n};\n\nconst chartOption4 = props.trendMtrOltcData == undefined ?\n{\n  title: {\n\t  text: '',\n  },\n} : {\n\tchart: {\n\t\tzoomType: 'x',\n\t\tevents: {\n\t\t\tselection: zoomChart\n\t\t}\n\t},\n\ttitle: {\n\t\ttext: '',\n\t\tx: -20 //center\n\t}, credits: { enabled: false },\n\txAxis: {\n\t\tcategories: props.trendMtrOltcData.XAxisData\n\t},\n\tyAxis: {\n\t\t//min: 0,\n\t\tstartOnTick: false,\n\t\ttitle: {\n\t\t\ttext: '전류'\n\t\t},\n\t\tplotLines: [{\n\t\t\tvalue: 0,\n\t\t\twidth: 1,\n\t\t\tcolor: '#808080'\n\t\t}],\n\t\tlabels: {\n\t\t\tformat: '{value} A',\n\t\t\tstyle: {\n\t\t\t\tcolor: Highcharts.getOptions().colors[1]\n\t\t\t}\n\t\t},\n\t},\n\ttooltip: {\n\t\tshared: true,\n\t\tcrosshairs: true,\n\t\tpointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.1f}</b><br/>'\n\t},\n\tlegend: {\n\t\tlayout: 'vertical',\n\t\talign: 'right',\n\t\tverticalAlign: 'middle',\n\t\tborderWidth: 0\n\t},\n\tplotOptions: {\n\t\tseries: {\n\t\t\tturboThreshold: 5000,\n\t\t\tdataGrouping: {\n\t\t\t\tenabled: false\n\t\t\t}\n\t\t}\n\t},\n\tseries: [{\n\t\tname: 'A상 평균',\n\t\tvisible: false,\n\t\tdata: props.trendMtrOltcData.AVG_CURR_A_AVG,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tname: 'A상 최대',\n\t\tdata: props.trendMtrOltcData.AVG_CURR_A_MAX,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tname: 'B상 평균',\n\t\tvisible: false,\n\t\tdata: props.trendMtrOltcData.AVG_CURR_B_AVG,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tname: 'B상 최대',\n\t\tdata: props.trendMtrOltcData.AVG_CURR_B_MAX,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tname: 'C상 평균',\n\t\tvisible: false,\n\t\tdata: props.trendMtrOltcData.AVG_CURR_C_AVG,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tname: 'C상 최대',\n\t\tdata: props.trendMtrOltcData.AVG_CURR_C_MAX,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t}\n\t\t}\n\t}]\n};\n\nconst chartOption5 = props.trendMtrOltcData == undefined ?\n{\n  title: {\n\t  text: '',\n  },\n} : {\n\tchart: {\n\t\tzoomType: 'x',\n\t\tevents: {\n\t\t\tselection: zoomChart\n\t\t}\n\t},\n\ttitle: {\n\t\ttext: '',\n\t\t// x: -20 //center\n\t}, credits: { enabled: false },\n\txAxis: {\n\t\tcategories: props.trendMtrOltcData.XAxisData\n\t},\n\tyAxis: {\n\t\t//min: 0,\n\t\tstartOnTick: false,\n\t\ttitle: {\n\t\t\ttext: '시간'\n\t\t},\n\t\tplotLines: [{\n\t\t\tvalue: 0,\n\t\t\twidth: 1,\n\t\t\tcolor: '#808080'\n\t\t}],\n\t\tlabels: {\n\t\t\tformat: '{value} ms',\n\t\t\tstyle: {\n\t\t\t\tcolor: Highcharts.getOptions().colors[1]\n\t\t\t}\n\t\t},\n\t},\n\ttooltip: {\n\t\tshared: true,\n\t\tcrosshairs: true,\n\t\tpointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.1f}</b><br/>'\n\t},\n\tlegend: {\n\t\tlayout: 'vertical',\n\t\talign: 'right',\n\t\tverticalAlign: 'middle',\n\t\tborderWidth: 0\n\t},\n\tplotOptions: {\n\t\tseries: {\n\t\t\tturboThreshold: 5000,\n\t\t\tdataGrouping: {\n\t\t\t\tenabled: false\n\t\t\t}\n\t\t}\n\t},\n\tseries: [{\n\t\tname: '동작시간 평균',\n\t\tvisible: false,\n\t\tdata: props.trendMtrOltcData.OP_TIME_AVG,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tname: '동작시간 최대',\n\t\tdata: props.trendMtrOltcData.OP_TIME_MAX,\n\t\tcolor: '#00FF00',\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t}\n\t\t}\n\t}]\n};\n\n\n  return (\n    <>\n      <div className=\"contents-area\">\n        <section className=\"contents-header\">\n          <h2>OLTC 모터 동작 진단 경향</h2>\n          {/*<ol className=\"route\">*/}\n          {/*  <li><a href=\"\"><img src={require('assets/img/icon_home.svg').default}/>&nbsp;온수 변전소</a></li>*/}\n          {/*  <li><a href=\"\">MTR 설비별 진단 경향</a></li>*/}\n          {/*  <li><a href=\"\">OLTC 모터 동작 진단 경향</a></li>*/}\n          {/*</ol>*/}\n        </section>\n        <div className=\"container\">\n          <div className=\"nav-index gap30\">\n\t\t  \t\t\t<TrendSearchFilter ref={searchFilterRef}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\teqipType={eqipType}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsnsrType={snsrType}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcallbackSearch={filterSearchCallback}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcallbackReset={filterResetCallback} />\n\t\t\t\t\t</div>\n          <section className=\"gis-parts solo\">\n            <h2 className=\"gap-up-40 gap-down-30\">동작/알람 발생</h2>\n            <div className=\"graph-container\">\n\t\t\t\t\t\t\t<HighchartLineDefault options={chartOption1} />\n            </div>\n            <h2 className=\"gap-up-60 gap-down-30\">알람레벨별 건수</h2>\n            <div className=\"graph-container\">\n\t\t\t\t\t\t\t<HighchartLineDefault options={chartOption2} />\n            </div>\n            <h2 className=\"gap-up-60 gap-down-30\">모터 돌입전류</h2>\n            <div className=\"graph-container\">\n\t\t\t\t\t\t\t<HighchartLineDefault options={chartOption3} />\n            </div>\n            <h2 className=\"gap-up-60 gap-down-30\">모터 정상전류</h2>\n            <div className=\"graph-container\">\n\t\t\t\t\t\t\t<HighchartLineDefault options={chartOption4} />\n            </div>\n            <h2 className=\"gap-up-60 gap-down-30\">모터 동작시간</h2>\n            <div className=\"graph-container\">\n\t\t\t\t\t\t\t<HighchartLineDefault options={chartOption5} />\n            </div>\n          </section>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ trendMtrOltcData }: IRootState) => ({\n\ttrendMtrOltcData : trendMtrOltcData.data\n});\n\nconst mapDispatchToProps = {\n\tgetTrendMtrOltc,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MtrOltcOfuTrend);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\alarm\\alarm-list.tsx",["925","926","927","928","929","930","931","932"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport moment from 'moment';\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\nimport { getAlarmList, getAlarmTypeList, setAlarmCheck, setAlarmRecognition, setAlarmReset } from './alarm.reducer';\nimport SelectBox from '../../shared/component/control/select-box';\nimport Pager from '../../shared/component/pager/Pager';\n\nexport interface IAlarmListProps extends StateProps, DispatchProps {}\n\nexport const AlarmList = (props: IAlarmListProps) => {\n\n  const [searchFilter, setSearchFilter] = useState({\n    fromDate: moment(),\n    toDate: moment(),\n    alarmGubun: '1',    // 알람구분 (1 알람, 2 이벤트)\n    alarmType: '0',     // 알람대상 (알람 타입 API 응답 리스트)\n    ackKind: '0',       // 인지여부 (0 전체, 1 인지, 2 미인지)\n    checkKind: '0',     // 확인여부 (0 전체, 1 인지, 2 미인지)\n  })\n  const [pageInfo, setPageInfo] = useState({\n    activePageEvent: 1,     // 현재 페이지\n    itemsCountPerPage: 10,  // 페이지당 개수\n  });\n\n  useEffect(() => {\n    props.getAlarmTypeList(); // 알람대상 리스트 조회\n    // searchAlarmList();\n  }, []);\n\n  // 페이지 정보 변경 시 리스트 조회\n  useEffect(() => {\n    searchAlarmList();\n  }, [pageInfo]);\n\n  // 알람목록 조회\n  const searchAlarmList = () => {\n    props.getAlarmList(\n      searchFilter.fromDate,\n      searchFilter.toDate,\n      searchFilter.alarmGubun,\n      searchFilter.alarmType,\n      searchFilter.ackKind,\n      searchFilter.checkKind,\n      pageInfo.activePageEvent,\n      pageInfo.itemsCountPerPage\n    )\n  }\n\n  // 알람 상세 오픈\n  const showAlarmDetail = (alarmDetailId) => {\n    let isSameDetail = $(`#${alarmDetailId}`).is(':visible');\n    $('.alarm-info').hide();\n    if (!isSameDetail) {\n      $(`#${alarmDetailId}`).show();\n    }\n  }\n\n  const alarmRecognition = async (alarmId) => { // 알람 상태 업데이트 (미인지 => 인지)\n    await props.setAlarmRecognition(props.account.USER_ID, alarmId);\n    await searchAlarmList();\n  }\n  const alarmCheck = async (alarmId) => {       // 알람 상태 업데이트 (인지 => 확인)\n    await props.setAlarmCheck(props.account.USER_ID, alarmId);\n    await searchAlarmList();\n  }\n  const alarmRest = async (alarmId) => {        // 알람 상태 업데이트 (확인 => 미인지)\n    await props.setAlarmReset(alarmId);\n    await searchAlarmList();\n  }\n\n  return (\n    <>\n      <div className='contents-area none-aside'>\n        <section className='contents-header'>\n          <h2>알람 목록</h2>\n          <ol className='route'>\n            <li><a href=''><img src={require('assets/img/icon_home.svg').default} />&nbsp;온수 변전소</a></li>\n            <li><a href=''>GIS</a></li>\n            <li><a href=''>부분방전 현황</a></li>\n          </ol>\n        </section>\n        <div className='container'>\n          <div className='nav-index gap30'>\n            <div className='obj-wrapper'>\n              <ul>\n                <li className='obj-term width-15'>\n                  <span>시작 일시</span>\n                  <div className='obj-calendar'>\n                    <i className='icon-calendar'></i>\n                    <DateRangePicker\n                      onApply={(event, picker) => {\n                        setSearchFilter({\n                          ...searchFilter,\n                          fromDate: picker.startDate,\n                        });\n                      }}\n                      initialSettings={{\n                        singleDatePicker: true,\n                        timePicker: true,\n                        timePicker24Hour: true,\n                        startDate: moment().startOf('hour'),\n                        endDate: moment().startOf('hour').add(32, 'hour'),\n                        locale: {\n                          format: 'YYYY-MM-DD hh:mm A',\n                        },\n                      }}>\n                      <input type='text' name='datetimes' />\n                    </DateRangePicker>\n                  </div>\n                </li>\n                <li className='obj-term width-15'>\n                  <span>종료 일시</span>\n                  <div className='obj-calendar'>\n                    <i className='icon-calendar'></i>\n                    <DateRangePicker\n                      onApply={(event, picker) => {\n                        setSearchFilter({\n                          ...searchFilter,\n                          fromDate: picker.startDate,\n                        });\n                      }}\n                      initialSettings={{\n                        singleDatePicker: true,\n                        timePicker: true,\n                        timePicker24Hour: true,\n                        startDate: moment().startOf('hour'),\n                        endDate: moment().startOf('hour').add(32, 'hour'),\n                        locale: {\n                          format: 'YYYY-MM-DD hh:mm A',\n                        },\n                      }}>\n                      <input type='text' name='datetimes' />\n                    </DateRangePicker>\n                  </div>\n                </li>\n                <li className='width-1'>\n                  <span>알람/이벤트</span>\n                  <SelectBox defaultValue={searchFilter.alarmGubun} elementName=\"alarmGubun\" placeholder=\"알람 구분\"\n                             options={[\n                               {key: '1', value: '알람'},\n                               {key: '2', value: '이벤트'}\n                             ]}\n                             callback={(args) => setSearchFilter({...searchFilter, alarmGubun: args.selected})} />\n                </li>\n                <li className='width-15'>\n                  <span>알람 대상</span>\n                  <SelectBox defaultValue={searchFilter.alarmType} elementName=\"alarmType\" placeholder=\"알람 대상\"\n                             options={[\n                               {key: '0', value: '전체'},\n                               ...props.alarmTypeList.map(alarmType => {\n                                 return {key: alarmType.COMM_CD, value: alarmType.COMM_CD_NM};\n                               })\n                             ]}\n                             callback={(args) => setSearchFilter({...searchFilter, alarmType: args.selected})} />\n                </li>\n                <li className='width-1'>\n                  <span>인지 여부</span>\n                  <SelectBox defaultValue={searchFilter.ackKind} elementName=\"ackKind\" placeholder=\"인지 여부\"\n                             options={[\n                               {key: '0', value: '전체'},\n                               {key: '1', value: '인지'},\n                               {key: '2', value: '미인지'}\n                             ]}\n                             callback={(args) => setSearchFilter({...searchFilter, ackKind: args.selected})} />\n                </li>\n                <li className='width-1'>\n                  <span>점검완료 여부</span>\n                  <SelectBox defaultValue={searchFilter.checkKind} elementName=\"checkKind\" placeholder=\"점검완료 여부\"\n                             options={[\n                               {key: '0', value: '전체'},\n                               {key: '1', value: '점검완료'},\n                               {key: '2', value: '미점검'}\n                             ]}\n                             callback={(args) => setSearchFilter({...searchFilter, checkKind: args.selected})} />\n                </li>\n                <li><span>&nbsp;</span>\n                  <div style={{ marginTop: '5px' }}>\n                    <a className=\"btn submit\" onClick={() => setPageInfo({...pageInfo, activePageEvent: 1})}>조회</a>\n                  </div>\n                </li>\n              </ul>\n            </div>\n          </div>\n          <section className='gis-parts solo'>\n            <div className='contents-table'>\n              <table className='table-db fold-db'>\n                <colgroup>\n                  <col style={{ width: '120px' }} />\n                </colgroup>\n                <thead>\n                <tr>\n                  <th>&nbsp;</th>\n                  <th>설비명</th>\n                  <th>센서명</th>\n                  <th>발생일시</th>\n                  <th>알람대상</th>\n                  <th>메세지</th>\n                  <th>확인시간</th>\n                  <th>확인자</th>\n                  <th style={{width: '200px'}}>\n                    <label className={`obj-text-box ${props.account?.AUTH_LVL > 1 && 'all'}`}\n                           onClick={() => {\n                             if (props.account?.AUTH_LVL > 1) {\n                               alarmRecognition(0);\n                             }\n                           }}>전체인지</label>&nbsp;\n                    <label className={`obj-text-box ${props.account?.AUTH_LVL > 1 && 'all'}`}\n                           onClick={() => {\n                             if (props.account?.AUTH_LVL > 1) {\n                               alarmCheck(0);\n                             }\n                           }}>전체확인</label>\n                  </th>\n                </tr>\n                </thead>\n                {\n                  props.alarmList.length ?\n                    props.alarmList.map((alarm, index) => {\n                      return (\n                        <tbody key={index}>\n                          {/* 알람 Row */}\n                          <tr>\n                            <th><a className='call-popup btn white narrow'\n                                   onClick={() => showAlarmDetail(`alarm_${index}`)}>상세</a></th>\n                            <td><span>{alarm.EQIP_NM}</span></td>\n                            <td><span>{alarm.SNSR_NM}</span></td>\n                            <td><span>{moment(alarm.OCCR_TIME).format('YYYY-MM-DD HH:mm:ss.SSS')}</span></td>\n                            <td><span>{alarm.ALRM_TYPE_NM}</span></td>\n                            {/*<td><span className='txt-color pink'>[주의]</span><span>메시지 내용 - MLU03 (OLTC-Motor) 에서 OLTC 알람</span></td>*/}\n                            <td><span>{alarm.MESSAGE}</span></td>\n                            <td><span>{alarm.CHECK_TIME ? moment(alarm.CHECK_TIME).format('YYYY-MM-DD HH:mm:ss.SSS') : '없음'}</span></td>\n                            <td><span>{alarm.CHECK_USER ? alarm.CHECK_USER : '없음'}</span></td>\n                            <td>\n                              <label className={`obj-text-box ${props.account && 'one'}`}\n                                     onClick={() => {\n                                       if (props.account?.AUTH_LVL) {\n                                         if (alarm.CHECK_USER) {        // 확인상태 (확인자 있는경우)\n                                           alarmRest(alarm.ALRM_ID);\n                                         } else if (alarm.ACK_USER) {   // 인지상태 (인지자 있는경우)\n                                           alarmCheck(alarm.ALRM_ID);\n                                         } else {                       // 미인지 상태\n                                           alarmRecognition(alarm.ALRM_ID);\n                                         }\n\n                                       }\n                                     }}>{alarm.CHECK_USER ? '미인지' : alarm.ACK_USER ? '확인' : '인지'}</label>\n                            </td>\n                          </tr>\n                          {/* 알람 상세 Row */}\n                          <tr id={`alarm_${index}`} className='alarm-info' style={{opacity: 1}}>\n                            <td colSpan={10}>\n                              <h3 className='gap-down-30'>알람 원인</h3>\n                              <div className='user-info'>\n                                <ul>\n                                  <li><span className='tit'>인지자</span><span className='tag'>{alarm.ACK_USER ? alarm.ACK_USER : '없음'}</span></li>\n                                  <li><span className='tit'>인지시간</span><span className='tag'>\n                                    {alarm.ACK_TIME ? moment(alarm.ACK_TIME).format('YYYY-MM-DD HH:mm:ss.SSS') : '없음'}\n                                  </span></li>\n                                </ul>\n                              </div>\n                              <div className='notify-info'>\n                                <ul className='list-up'>\n                                  <li>{alarm.ALRM_DATA}</li>\n                                </ul>\n                              </div>\n                            </td>\n                          </tr>\n                        </tbody>\n                      )\n                    })\n                    :\n                    <tr>\n                      <td colSpan={9}>조회된 알람 목록이 없습니다. (2021-02-22 이전날짜 데이터 있음)</td>\n                    </tr>\n                }\n              </table>\n              <Pager\n                handlePageChange={(newPage) => setPageInfo({...pageInfo, activePageEvent:newPage})}\n                activePage={pageInfo.activePageEvent}\n                totalItemsCount={props.alarmListTotalCount}\n                itemsCountPerPage={pageInfo.itemsCountPerPage}\n              />\n            </div>\n          </section>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ authentication, alarm, substation }: IRootState) => ({\n  account: authentication.account,\n  alarmTypeList: alarm.alarmTypeList,\n  alarmList: alarm.alarmList,\n  alarmListTotalCount: alarm.alarmListTotalCount,\n  allSensorList: substation.allSensorList,\n});\n\nconst mapDispatchToProps = {\n  getAlarmTypeList,\n  getAlarmList,\n  setAlarmRecognition,\n  setAlarmCheck,\n  setAlarmReset,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AlarmList);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\gis\\scbr\\scbr.tsx",["933","934","935","936","937","938","939","940","941"],"import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport TrendSearchFilter, { ITrendSearchFilterReturn } from '../../../../shared/component/trend/trend-search-filter';\nimport { getTrendGisScbr } from './scbr.reducer';\n\n// Hightcharts\nimport * as Highcharts from 'highcharts';\nimport { HighchartLineDefault } from 'shared/component/chart/highcharts/hightchart-line-default1';\n\nexport interface IGisScbrTrendProps extends StateProps, DispatchProps {}\n\nexport const GisScbrTrend = (props: IGisScbrTrendProps) => {\n\n\tconst eqipType = 'GIS';\n\tconst snsrType = 'GIS_SCBR';\n\n  const searchFilterRef = useRef(null);\n\n  const [searchFilter, setSearchFilter] = useState( {\n\t\tfromDate: new Date(),\n\t\ttoDate: new Date(),\n\t\teqipId: '0',\n\t\tsnsrId: '0',\n\t\tperiod: 'year',\n\t\tfromDateZoom: new Date(),\t// 확대시 시작일시\n\t\ttoDateZoom: new Date(),\t\t// 확대시 종료일시\n\t\tselListCnt: 10,\t\t\t// 그래프가 갱신되어야 하므로\n\t});\n\n    // trip코일전류, close코일전류, 차단시간, 투입시간 그래프에서 사용될 개체\n\tconst [Series, setSeries] = useState({\n\t\ttripXseries: [],\n\t\tCloseXseries: [],\n\t\ttrip1Series: [],\n\t\ttrip2Series: [],\n\t\tOpn_Time_A: [],\n\t\tOpn_Time_B: [],\n\t\tOpn_Time_C: [],\n\t\tCls_Time_A: [],\n\t\tCls_Time_C: [],\n\t\tCls_Time_B: [],\n\t\tCls_Peak : [],\n\t\tContact_A: [],\n\t\tContact_B: [],\n\t});\n\n  const filterSearchCallback = ({ fromDate, toDate, eqipId, snsrId }: ITrendSearchFilterReturn) => {\n    setSearchFilter({\n\t\t...searchFilter,\n      fromDate: fromDate,\n      toDate: toDate,\n      eqipId: eqipId,\n      snsrId: snsrId,\n\t  fromDateZoom: fromDate,\n\t  toDateZoom: toDate,\n    });\n\n\tprops.getTrendGisScbr(\n\t\tfromDate,\n\t\ttoDate,\n\t\teqipId,\n\t\tsnsrId,\n\t\tsearchFilter.period,\n\t\tsearchFilter.selListCnt,\n\t);\n  }\n\n  // 초기화 수행 콜백\n  const filterResetCallback = ({ fromDate, toDate, eqipId, snsrId }: ITrendSearchFilterReturn) => {\n    setSearchFilter({\n\t  ...searchFilter,\n      fromDate: fromDate,\n      toDate: toDate,\n      eqipId: eqipId,\n      snsrId: snsrId,\n\t\t\tperiod: 'year',\n\t\t\tfromDateZoom: fromDate,\n\t\t\ttoDateZoom: toDate,\n    });\n\n\t\tprops.getTrendGisScbr(\n\t\t\tfromDate,\n\t\t\ttoDate,\n\t\t\teqipId,\n\t\t\tsnsrId,\n\t\t\t'year',\n\t\t\tsearchFilter.selListCnt,\n\t\t);\n  }\n\n  useEffect(() => {\n\n\tlet seriesData = props.trendScbrData;\n\n\tif( seriesData == undefined )\n\t\treturn;\n\n\tlet tripXseries = [];\n    let CloseXseries = [];\n    let trip1Series = [];\n    let trip2Series = [];\n    let Opn_Time_A = [];\n    let Opn_Time_B = [];\n    let Opn_Time_C = [];\n    let Cls_Time_A = [];\n    let Cls_Time_B = [];\n    let Cls_Time_C = [];\n    let Cls_Peak = [];\n    let Contact_A = [];\n    let Contact_B = [];\n\n    if (seriesData.data2.datasets != \"undefined\") {\n        for (var i = 0; i < seriesData.data2.xTimeString.length; i++) {\n\n\t\t\t\t\ttripXseries.push(seriesData.data2.xTimeString[i]);\n\t\t\t\t\ttrip1Series.push(seriesData.data2.datasets[0].datas[i]);\n\t\t\t\t\ttrip2Series.push(seriesData.data2.datasets[1].datas[i]);\n\t\t\t\t\tOpn_Time_A.push(seriesData.data2.datasets[2].datas[i]);\n\t\t\t\t\tOpn_Time_B.push(seriesData.data2.datasets[3].datas[i]);\n\t\t\t\t\tOpn_Time_C.push(seriesData.data2.datasets[4].datas[i]);\n\t\t\t\t\tif (seriesData.data2.datasets[5].datas[i] < seriesData.data2.datasets[6].datas[i])\n\t\t\t\t\t\t\tContact_B.push(seriesData.data2.datasets[5].datas[i]);\n\t\t\t\t\telse\n\t\t\t\t\t\t\tContact_B.push(seriesData.data2.datasets[6].datas[i]);\n\n        }\n        for (var j = 0; j < seriesData.data3.xTimeString.length; j++) {\n\n\t\t\tCloseXseries.push(seriesData.data3.xTimeString[j]);\n            Cls_Peak.push(seriesData.data3.datasets[0].datas[j]);\n            Cls_Time_A.push(seriesData.data3.datasets[1].datas[j]);\n            Cls_Time_B.push(seriesData.data3.datasets[2].datas[j]);\n            Cls_Time_C.push(seriesData.data3.datasets[3].datas[j]);\n\n\t\t\tif (seriesData.data3.datasets[4].datas[j] < seriesData.data3.datasets[5].datas[j])\n                Contact_A.push(seriesData.data3.datasets[4].datas[j]);\n            else\n                Contact_A.push(seriesData.data3.datasets[5].datas[j]);\n        }\n    }\n\n\tsetSeries({\n\t\ttripXseries: tripXseries,\n\t\tCloseXseries: CloseXseries,\n\t\ttrip1Series: trip1Series,\n\t\ttrip2Series: trip2Series,\n\t\tOpn_Time_A: Opn_Time_A,\n\t\tOpn_Time_B: Opn_Time_B,\n\t\tOpn_Time_C: Opn_Time_C,\n\t\tCls_Time_A: Cls_Time_A,\n\t\tCls_Time_B: Cls_Time_B,\n\t\tCls_Time_C: Cls_Time_C,\n\t\tCls_Peak : Cls_Peak,\n\t\tContact_A: Contact_A,\n\t\tContact_B: Contact_B,\n\t});\n\n  }, [props.trendScbrData]);\n\n\n  const zoomChart = (e) =>\n  {\n\t  if (searchFilter.period == \"day\") {\n\t\t  return;\n\t  }\n\n\t  let baseDate = searchFilter.fromDateZoom;\n\t  let minValue = Highcharts.numberFormat(e.xAxis[0].min, 0);\n\t  let maxValue = Highcharts.numberFormat(e.xAxis[0].max, 0);\n\n\t  // if (minValue === -0)\n\t  // \tminValue = 0;\n\t  // if (maxValue === -0)\n\t  // \tmaxValue = 0;\n\n\t  if ( searchFilter.period === \"year\") {\n\t\t  let currentMonth = baseDate.getMonth();\n\t\t  let fromDate = new Date(baseDate.getFullYear(), currentMonth + Number(minValue), 1, 0, 0, 0);\n\t\t  let toDate = new Date(baseDate.getFullYear(), currentMonth + Number(maxValue) + 1, 0, 23, 59, 59);\n\n\t\t  setSearchFilter({\n\t\t\t  ...searchFilter,\n\t\t\t  period: 'month',\n\t\t\t  fromDateZoom: fromDate,\n\t\t\t  toDateZoom: toDate,\n\t\t  });\n\n\t\t  props.getTrendGisScbr(\n\t\t\t  fromDate,\n\t\t\t  toDate,\n\t\t\t  searchFilter.eqipId,\n\t\t\t  searchFilter.snsrId,\n\t\t\t  'month',\n\t\t\t  searchFilter.selListCnt,\n\t\t);\n\t  }\n\t  else if ( searchFilter.period === \"month\") {\n\t\t  let currentDate = baseDate.getDate();\n\t\t  let fromDate = new Date(baseDate.getFullYear(), baseDate.getMonth(), currentDate + Number(minValue), 0, 0, 0);\n\t\t  let toDate = new Date(baseDate.getFullYear(), baseDate.getMonth(), currentDate + Number(maxValue), 23, 59, 59);\n\n\t\t  setSearchFilter({\n\t\t\t  ...searchFilter,\n\t\t\t  period: 'day',\n\t\t\t  fromDateZoom: fromDate,\n\t\t\t  toDateZoom: toDate,\n\t\t  });\n\n\t\t  props.getTrendGisScbr(\n\t\t\t  fromDate,\n\t\t\t  toDate,\n\t\t\t  searchFilter.eqipId,\n\t\t\t  searchFilter.snsrId,\n\t\t\t  'day',\n\t\t\t  searchFilter.selListCnt,\n\t\t);\n\t  }\n\n\t  return false; // Zoom Event 무효화\n  }\n\n\n  const chartOption1 = props.trendScbrData == undefined ?\n  \t{\n\t\ttitle: {\n\t\t\ttext: '',\n\t\t},\n\t} : {\n        chart: {\n            zoomType: 'x',\n            events: {\n                selection: zoomChart,\n            }\n        },\n        title: {\n            text: '',\n            x: -20 //center\n        }, credits: { enabled: false },\n        xAxis: {\n            categories: props.trendScbrData.data1.XAxisData\n        },\n        yAxis: {\n            //min: 0,\n            startOnTick: false,\n            title: {\n                text: '발생 회수'\n            },\n            labels: {\n                format: '{value} 회',\n                style: {\n                    color: Highcharts.getOptions().colors[1]\n                }\n            },\n            plotLines: [{\n                value: 0,\n                width: 1,\n                color: '#808080'\n            }]\n        },\n        tooltip: {\n            shared: true,\n            crosshairs: true, pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.f}</b><br/>'\n        },\n        legend: {\n            layout: 'vertical',\n            align: 'right',\n            verticalAlign: 'middle',\n            borderWidth: 0\n        },\n        plotOptions: {\n            series: {\n                turboThreshold: 15000,\n                dataGrouping: {\n                    enabled: false\n                }\n            }\n        },\n        series: [{\n            name: '동작',\n            visible: false,\n            data: props.trendScbrData.data1.EventData,\n            dataLabels: {\n                enabled: false,\n                formatter: function () {\n                    if (this.y < 0) {\n                        return null;\n                    } else {\n                        return Highcharts.numberFormat(this.y, 0);\n                    }\n                }\n            }\n        }, {\n            name: '알람 발생',\n            data: props.trendScbrData.data1.AlarmData,\n            dataLabels: {\n                enabled: false,\n                formatter: function () {\n                    if (this.y < 0) {\n                        return null;\n                    } else {\n                        return Highcharts.numberFormat(this.y, 0);\n                    }\n                }\n            }\n        }]\n    };\n\n\n\n\tconst chartOption2 = props.trendScbrData == undefined ?\n\t{\n\t  title: {\n\t\t  text: '',\n\t  },\n  } : {\n\tchart: {\n\t\tzoomType: 'x',\n\t\tevents: {\n\t\t\tselection: zoomChart,\n\t\t}\n\t  //  marginRight: 150\n\t},\n\ttitle: {\n\t\ttext: '',\n\t\t// x: -20 //center\n\t}, credits: { enabled: false },\n\txAxis: {\n\t\tcategories: props.trendScbrData.data1.XAxisData\n\t},\n\tyAxis: {\n\t\t//min: 0,\n\t\tstartOnTick: false,\n\t\ttitle: {\n\t\t\ttext: '발생 회수'\n\t\t},\n\t\tlabels: {\n\t\t\tformat: '{value} 회',\n\t\t\tstyle: {\n\t\t\t\tcolor: Highcharts.getOptions().colors[1]\n\t\t\t}\n\t\t},\n\t\tplotLines: [{\n\t\t\tvalue: 0,\n\t\t\twidth: 1,\n\t\t\tcolor: '#808080'\n\t\t}]\n\t},\n\ttooltip: {\n\t\tshared: true,\n\t\tcrosshairs: true,\n\t\tpointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.f}</b><br/>'\n\t},\n\tlegend: {\n\t\tlayout: 'vertical',\n\t\talign: 'right',\n\t\tverticalAlign: 'middle',\n\t\tborderWidth: 0\n\t},\n\tplotOptions: {\n\t\tseries: {\n\t\t\tturboThreshold: 15000,\n\t\t\tdataGrouping: {\n\t\t\t\tenabled: false\n\t\t\t}\n\t\t}\n\t},\n\tseries: [{\n\t\tname: '요주의',\n\t\tdata: props.trendScbrData.data1.Vaution_cnt,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\tif (this.y < 0) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\tname: '이상',\n\t\tdata: props.trendScbrData.data1.Abnormal_cnt,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\tif (this.y < 0) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t{\n\t\tname: '위험',\n\t\tdata: props.trendScbrData.data1.Danger_cnt,\n\t\tcolor: '#FF0000',\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\tif (this.y < 0) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}]\n};\n\nconst chartOption3 = props.trendScbrData == undefined ?\n{\n  title: {\n\t  text: '',\n  },\n} : {\n\tchart: {\n\t\tzoomType: 'x'\n\t},\n\ttitle: {\n\t\ttext: '',\n\t\tx: -20 //center\n\t}, credits: { enabled: false },\n\txAxis: {\n\t\ttitle: {\n\t\t\ttext: '동작횟수'\n\t\t},\n\t\t//categories: tripXseries\n\t\tcategories: props.trendScbrData.data2.xTimeString\n\t},\n\tyAxis: {\n\t\t//min: 0,\n\t\tstartOnTick: false,\n\t\ttitle: {\n\t\t\ttext: '전류'\n\t\t},\n\t\tplotLines: [{\n\t\t\tvalue: 0,\n\t\t\twidth: 1,\n\t\t\tcolor: '#808080'\n\t\t}],\n\t\tlabels: {\n\t\t\tformat: '{value} A',\n\t\t\tstyle: {\n\t\t\t\tcolor: Highcharts.getOptions().colors[1]\n\t\t\t}\n\t\t},\n\t},\n\ttooltip: {\n\t\tshared: true,\n\t\tcrosshairs: true, pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.1f}</b><br/>'\n\t},\n\tlegend: {\n\t\tlayout: 'vertical',\n\t\talign: 'right',\n\t\tverticalAlign: 'middle',\n\t\tborderWidth: 0\n\t},\n\tplotOptions: {\n\t\tseries: {\n\t\t\tturboThreshold: 15000,\n\t\t\tdataGrouping: {\n\t\t\t\tenabled: false\n\t\t\t}\n\t\t}\n\t},\n\tseries: [{\n\t\tname: '차단1 최대전류',\n\t\t//data: seriesData.TRIP2_PEAK_MAX,\n\t\tdata: Series.trip1Series,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\tif (this.y < 0) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tname: '차단2 최대전류',\n\t\tdata: Series.trip2Series,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\tif (this.y < 0) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}]\n};\n\nconst chartOption4 = props.trendScbrData == undefined ?\n{\n  title: {\n\t  text: '',\n  },\n} :{\n\tchart: {\n\t\tzoomType: 'x'\n\t},\n\ttitle: {\n\t\ttext: '',\n\t\t// x: -20 //center\n\t}, credits: { enabled: false },\n\txAxis: {\n\t\ttitle: {\n\t\t\ttext: '동작횟수'\n\t\t},\n\t\tcategories: props.trendScbrData.data3.xTimeString\n\t},\n\tyAxis: {\n\t\t//min: 0,\n\t\tstartOnTick: false,\n\t\ttitle: {\n\t\t\ttext: '전류'\n\t\t},\n\t\tplotLines: [{\n\t\t\tvalue: 0,\n\t\t\twidth: 1,\n\t\t\tcolor: '#808080'\n\t\t}],\n\t\tlabels: {\n\t\t\tformat: '{value} A',\n\t\t\tstyle: {\n\t\t\t\tcolor: Highcharts.getOptions().colors[1]\n\t\t\t}\n\t\t},\n\t},\n\ttooltip: {\n\t\tshared: true,\n\t\tcrosshairs: true, pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.1f}</b><br/>'\n\t},\n\tlegend: {\n\t\tlayout: 'vertical',\n\t\talign: 'right',\n\t\tverticalAlign: 'middle',\n\t\tborderWidth: 0\n\t},\n\tseries: [{\n\t\tname: ' 투입 최대전류',\n\t\t//data: seriesData.TRIP2_PEAK_MAX,\n\t\tdata: Series.Cls_Peak,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\tif (this.y < 0) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}]\n};\n\n\n\nconst chartOption5 = props.trendScbrData == undefined ?\n{\n  title: {\n\t  text: '',\n  },\n} : {\n\tchart: {\n\t\tzoomType: 'x'\n\t},\n\ttitle: {\n\t\ttext: '',\n\t\t// x: -20 //center\n\t}, credits: { enabled: false },\n\txAxis: {\n\t\tcategories: props.trendScbrData.data2.xTimeString\n\t},\n\tyAxis: {\n\t\t//min: 0,\n\t\tstartOnTick: false,\n\t\ttitle: {\n\t\t\ttext: '차단시간'\n\t\t},\n\t\tplotLines: [{\n\t\t\tvalue: 0,\n\t\t\twidth: 1,\n\t\t\tcolor: '#808080'\n\t\t}],\n\t\tlabels: {\n\t\t\tformat: '{value} ms',\n\t\t\tstyle: {\n\t\t\t\tcolor: Highcharts.getOptions().colors[1]\n\t\t\t}\n\t\t},\n\t},\n\ttooltip: {\n\t\tshared: true,\n\t\tcrosshairs: true, pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.1f}</b><br/>'\n\t},\n\tlegend: {\n\t\tlayout: 'vertical',\n\t\talign: 'right',\n\t\tverticalAlign: 'middle',\n\t\tborderWidth: 0\n\t},\n\tseries: [{\n\t\tname: '차단 시간 A상',\n\t\tdata: Series.Opn_Time_A,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\tif (this.y < 0) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tname: '차단 시간 B상',\n\t\tdata: Series.Opn_Time_B,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\tif (this.y < 0) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tname: '차단 시간 C상',\n\t\tdata: Series.Opn_Time_C,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\tif (this.y < 0) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tname: '접점동작시간',\n\t\tdata: Series.Contact_B,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\tif (this.y < 0) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t]\n};\n\nconst chartOption6 = props.trendScbrData == undefined ?\n{\n  title: {\n\t  text: '',\n  },\n} :  {\n\tchart: {\n\t\tzoomType: 'x'\n\t},\n\ttitle: {\n\t\ttext: '',\n\t\t// x: -20 //center\n\t}, credits: { enabled: false },\n\txAxis: {\n\t\tcategories: props.trendScbrData.data3.xTimeString\n\t},\n\tyAxis: {\n\t\t//min: 0,\n\t\tstartOnTick: false,\n\t\ttitle: {\n\t\t\ttext: '투입시간'\n\t\t},\n\t\tplotLines: [{\n\t\t\tvalue: 0,\n\t\t\twidth: 1,\n\t\t\tcolor: '#808080'\n\t\t}],\n\t\tlabels: {\n\t\t\tformat: '{value} ms',\n\t\t\tstyle: {\n\t\t\t\tcolor: Highcharts.getOptions().colors[1]\n\t\t\t}\n\t\t},\n\t},\n\ttooltip: {\n\t\tshared: true,\n\t\tcrosshairs: true, pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.1f}</b><br/>'\n\t},\n\tlegend: {\n\t\tlayout: 'vertical',\n\t\talign: 'right',\n\t\tverticalAlign: 'middle',\n\t\tborderWidth: 0\n\t},\n\tseries: [{\n\t\tname: '투입 시간 A상',\n\t\tdata: Series.Cls_Time_A,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\tif (this.y < 0) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tname: '투입 시간 B상',\n\t\tdata: Series.Cls_Time_B,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\tif (this.y < 0) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tname: '투입 시간 C상',\n\t\tdata: Series.Cls_Time_C,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\tif (this.y < 0) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tname: '접점동작시간',\n\t\tdata: Series.Contact_A,\n\t\tdataLabels: {\n\t\t\tenabled: false,\n\t\t\tformatter: function () {\n\t\t\t\tif (this.y < 0) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\treturn Highcharts.numberFormat(this.y, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t]\n};\n\n  const changeSelection = (value) =>\n  {\n\t  let cnt = Number(value);\n\n\t\tsetSearchFilter({\n\t\t\t...searchFilter,\n\t\t\tselListCnt: cnt,\n\t\t});\n\n\t\tprops.getTrendGisScbr(\n\t\t\tsearchFilter.fromDateZoom,\n\t\t\tsearchFilter.toDateZoom,\n\t\t\tsearchFilter.eqipId,\n\t\t\tsearchFilter.snsrId,\n\t\t\tsearchFilter.period,\n\t\t\tcnt,\n\t\t);\n  }\n\n  useEffect(() => {\n    searchFilterRef.current?.searchBtn();\n  },[]);\n\n  return (\n    <>\n      <div className=\"contents-area\">\n        <section className=\"contents-header\">\n          <h2>차단기 동작특성 진단경향</h2>\n          <ol className=\"route\">\n            {/*<li><a href=\"\"><img src={require('assets/img/icon_home.svg').default}/>&nbsp;온수 변전소</a></li>*/}\n            {/*<li><a href=\"\">GIS 설비별 진단 경향</a></li>*/}\n            {/*<li><a href=\"\">차단기 동작특성 진단경향</a></li>*/}\n          </ol>\n        </section>\n        <div className=\"container\">\n          <div className=\"nav-index gap30\">\n\t\t  \t\t\t<TrendSearchFilter\n\t\t\t\t\t\t\tref={searchFilterRef}\n\t\t\t\t\t\t\teqipType={eqipType}\n\t\t\t\t\t\t\tsnsrType={snsrType}\n\t\t\t\t\t\t\tcallbackSearch={filterSearchCallback}\n\t\t\t\t\t\t\tcallbackReset={filterResetCallback}\n\t\t\t\t\t\t/>\n          </div>\n          <section className=\"gis-parts solo\">\n            {/* 그래프 6종류 */}\n          \t<h2 className=\"gap-up-40 gap-down-30\">동작/알람 발생</h2>\n\t\t   \t\t\t<div className=\"graph-container\">\n\t\t\t\t\t\t\t<HighchartLineDefault options={chartOption1} />\n            </div>\n\n            <h2 className=\"gap-up-40 gap-down-30\">알람레벨별 건수</h2>\n            <div className=\"graph-container\">\n\t\t\t\t\t\t\t<HighchartLineDefault options={chartOption2} />\n            </div>\n\n            <select value={searchFilter.selListCnt} onChange={ (e) => changeSelection( e.target.value )}>\n                <option value=\"10\">10</option>\n                <option value=\"20\">20</option>\n                <option value=\"50\">50</option>\n                <option value=\"100\">100</option>\n                <option value=\"200\">200</option>\n            </select>\n\n            <h2 className=\"gap-up-40 gap-down-30\">Trip 코일전류</h2>\n            <div className=\"graph-container\">\n\t\t\t\t\t\t\t<HighchartLineDefault options={chartOption3} />\n            </div>\n\n            <h2 className=\"gap-up-40 gap-down-30\">Close 코일전류</h2>\n\t\t\t\t\t\t<div className=\"graph-container\">\n\t\t\t\t\t\t\t<HighchartLineDefault options={chartOption4} />\n            </div>\n\n            <h2 className=\"gap-up-40 gap-down-30\">차단시간</h2>\n            <div className=\"graph-container\">\n\t\t\t\t\t\t\t<HighchartLineDefault options={chartOption5} />\n            </div>\n\n            <h2 className=\"gap-up-60 gap-down-30\">투입시간</h2>\n            <div className=\"graph-container\">\n\t\t\t\t\t\t\t<HighchartLineDefault options={chartOption6} />\n            </div>\n\n           {/* // Blank Markup\n            <h2 class=\"gap-up-60 gap-down-30\">제목 영역</h2>\n            <div class=\"graph-container\">\n                <div class=\"width-10 height-200px\" style=\"background: #eee;\">그래프 영역.<br/>배경 색상은 레이아웃 구분을 위해 삽입한 것으로, 구현 완료 후 삭제해주세요. height 길이를 바꾸려면 height-200px class명을 변경해주세요. 100px - 500px까지 5단계로 있습니다.</div>\n                <div class=\"input-legend graph block gap-up-40\">\n                    <ul>\n                        <li><i class=\"sign green\"></i>범례 01</li>\n                        <li><i class=\"sign yellow\"></i>범례 02</li>\n                        <li><i class=\"sign orange\"></i>범례 03</li>\n                        <li><i class=\"sign red\"></i>범례 04</li>\n                    </ul>\n                </div>\n            </div>*/}\n          </section>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ gisCbTrendData }: IRootState) => ({\n  trendScbrData: gisCbTrendData.data,\n});\n\nconst mapDispatchToProps = {\n  getTrendGisScbr,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GisScbrTrend);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\bushing\\bushing.tsx",["942"],"import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { getStatusMtrBushingCompare, getStatusMtrBushingEvent } from './bushing.reducer';\nimport StatusSearchFilter, { IStatusSearchFilterReturn } from '../../../../shared/component/status/status-search-filter';\nimport StatusBushingList from '../../../../shared/component/status/bushinglist/satus-bushing-list';\nimport { ModalBushingCompare } from '../../../../shared/component/popup/bushing/modal-bushingcompare';\n\nexport interface IMtrBushingStatusProps extends StateProps, DispatchProps {}\n\nexport const MtrBushingStatus = (props: IMtrBushingStatusProps) => {\n\tconst eqipType = 'MTR';\n\tconst snsrType = 'MTR_SBSH';\n\n  const statusSearchFilterRef = useRef(null);\n  const statusBushingListRef = useRef(null);\n\n  // 상세\n  // const [isShowModalBushingDetail, setIsShowModalBushingDetail] = useState(false);\n\n  // 비교하기\n\tconst [compareProps, setCompareProps] = useState({\n\t\tisOpen: false,\n\t\teventId: 0,\n\t\toccrTime: null,\n\t});\n\n\t// 비교하기창 닫기\n\tconst closeCompareModal = () => {\n\t\tsetCompareProps({\n\t\t\t...compareProps,\n\t\t\tisOpen: false,\n\t\t});\n\t}\n\n  // 조회 필터 값\n  const [isSearchFilterUpdate, setIsSearchFilterUpdate] = useState(false);\n  const [searchFilter, setSearchFilter] = useState({\n    fromDate: new Date(),\n    toDate: new Date(),\n    eqipId: '0',\n    snsrId: '0',\n    diagCont: '',\n  });\n\n  // 조회 수행 콜백\n  const filterSearchCallback = ({fromDate, toDate, eqipId, snsrId, diagCont}: IStatusSearchFilterReturn) => {\n    setSearchFilter({\n      fromDate: fromDate,\n      toDate: toDate,\n      eqipId: eqipId,\n      snsrId: snsrId,\n      diagCont: diagCont,\n    })\n  }\n\n  // 초기 DOM 렌더링 후 수행\n  useEffect(() => {\n    statusSearchFilterRef.current?.searchBtn();   // 상단 필터컴포넌트 조회 기능 작동\n  }, []);\n\n  // 조회 필터값 변경 시 리스트 조회\n  useEffect(() => {\n    if (isSearchFilterUpdate) {\n      statusBushingListRef.current?.search();\n    } else {\n      setIsSearchFilterUpdate(true);\n    }\n  }, [searchFilter]);\n\n  // Bushing 상세보기\n  /*const clickBushingDetail = ( eventProps ) => {\n    setIsShowModalBushingDetail(true);\n  }*/\n\n  // Bushing 비교하기\n  const clickBushingCompare = ( eventProps ) => {\n\n\t\t// console.log('비교하기 클릭');\n\t\t// console.log(eventProps);\n\t\tsetCompareProps({\n\t\t\t...compareProps,\n\t\t\tisOpen: true,\n\t\t\teventId: eventProps.evntId,\n\t\t\toccrTime: eventProps.occrTime,\n\t\t});\n\n\t\t// 비교하기 데이터 요청\n\t\tprops.getStatusMtrBushingCompare(Number(eventProps.evntId));\n\t}\n\n  return (\n    <>\n      <div className=\"contents-area\">\n        <section className=\"contents-header\">\n          <h2>부싱누설전류 현황</h2>\n          {/*<ol className=\"route\">*/}\n          {/*  <li><a href=\"\"><img src={require('assets/img/icon_home.svg').default}/>&nbsp;온수 변전소</a></li>*/}\n          {/*  <li><a href=\"\">GIS</a></li>*/}\n          {/*  <li><a href=\"\">부싱누설전류 현황</a></li>*/}\n          {/*</ol>*/}\n        </section>\n        <div className=\"container\">\n          <div className=\"nav-index gap-up-30\">\n\t\t\t\t\t\t<StatusSearchFilter ref={statusSearchFilterRef}\n\t\t\t\t\t\t\t\teqipType={eqipType}\n\t\t\t\t\t\t\t\tsnsrType={snsrType}\n\t\t\t\t\t\t\t\tuseDiagCont={false}\n\t\t\t\t\t\t\t\tcallback={filterSearchCallback}/>\n          </div>\n          <section className=\"gis-parts solo\">\n            <StatusBushingList\n              ref={statusBushingListRef}\n              fromDate={searchFilter.fromDate}\n              toDate={searchFilter.toDate}\n              eqipId={searchFilter.eqipId}\n              snsrId={searchFilter.snsrId}\n              diagCont={searchFilter.diagCont}\n              /*onClickDetail={'#'}*/\n              onClickCompare={clickBushingCompare}\n            />\n          </section>\n        </div>\n      </div>\n      {\n        compareProps.isOpen && <ModalBushingCompare\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclose={closeCompareModal}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchartData={props.bushingCompareList}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\teventId={compareProps.eventId}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toccrTime={compareProps.occrTime} />\n      }\n    </>\n  );\n}\n\nconst mapStateToProps = ({ mtrBushingEvent }: IRootState) => ({\n  bushingEventList: mtrBushingEvent.bushingEventList,\n  bushingEventListTotalCount: mtrBushingEvent.bushingEventListTotalCount,\n\tbushingCompareList: mtrBushingEvent.bushingCompareList,\n});\n\nconst mapDispatchToProps = {\n  getStatusMtrBushingEvent,\n\tgetStatusMtrBushingCompare,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MtrBushingStatus);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\gis\\scbr\\scbr.tsx",["943"],"import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { getStatusGisScbrEvent } from './scbr.reducer';\nimport StatusSearchFilter, { IStatusSearchFilterReturn } from '../../../../shared/component/status/status-search-filter';\nimport StatusCbList from '../../../../shared/component/status/cdlist/satus-cb-list';\nimport ModalCbDetail from '../../../../shared/component/popup/cbevent/modal-cbdetail';\n\nexport interface IGisScbrStatusProps extends StateProps, DispatchProps {}\n\nexport const GisScbrStatus = (props: IGisScbrStatusProps) => {\n\n\tconst eqipType = 'GIS';\n\tconst snsrType = 'GIS_SCBR';\n\n  const statusSearchFilterRef = useRef(null);\n  const statusCbListRef = useRef(null);\n\n  // 상세\n\tconst [detailProps, setDetailProps] = useState({\n\t\tisOpen: false,\n\t\teventId: 0,\n\t\teventType: \"Close\",\n\t});\n\n\t// 상세창 닫기\n\tconst closeDetailModal = () => {\n\t\tsetDetailProps({\n\t\t\t...detailProps,\n\t\t\tisOpen: false,\n\t\t});\n\t}\n\n\tconst openDetailModal = (args) => {\n\t\tsetDetailProps({\n\t\t\t...detailProps,\n\t\t\tisOpen: true,\n\t\t\teventId: args.eventId,\n\t\t\teventType: args.eventType,\n\t\t})\n\t}\n\n  // 조회 필터 값\n  const [isSearchFilterUpdate, setIsSearchFilterUpdate] = useState(false);\n  const [searchFilter, setSearchFilter] = useState({\n    fromDate: new Date(),\n    toDate: new Date(),\n    eqipId: '0',\n    snsrId: '0',\n    diagCont: '',\n  });\n\n  // 조회 수행 콜백\n  const filterSearchCallback = ({fromDate, toDate, eqipId, snsrId, diagCont}: IStatusSearchFilterReturn) => {\n    setSearchFilter({\n      fromDate: fromDate,\n      toDate: toDate,\n      eqipId: eqipId,\n      snsrId: snsrId,\n      diagCont: diagCont,\n    })\n  }\n\n  // 초기 DOM 렌더링 후 수행\n  useEffect(() => {\n    statusSearchFilterRef.current?.searchBtn();   // 상단 필터컴포넌트 조회 기능 작동\n  }, []);\n\n  // 조회 필터값 변경 시 리스트 조회\n  useEffect(() => {\n    if (isSearchFilterUpdate) {\n      statusCbListRef.current?.search();\n    } else {\n      setIsSearchFilterUpdate(true);\n    }\n  }, [searchFilter]);\n\n  return (\n    <>\n      <div className=\"contents-area\">\n        <section className=\"contents-header\">\n          <h2>차단기 동작특성 현황</h2>\n          {/*<ol className=\"route\">*/}\n          {/*  /!*<li><a href=\"\"><img src=\"../../img/icon_home.svg\">&nbsp;온수 변전소</a></li>*!/*/}\n          {/*  <li><a href=\"\"><img src={require('assets/img/icon_home.svg').default}/>&nbsp;온수 변전소</a></li>*/}\n          {/*  <li><a href=\"\">GIS 설비종합 현황</a></li>*/}\n          {/*  <li><a href=\"\">차단기 동작특성 현황</a></li>*/}\n          {/*</ol>*/}\n        </section>\n        <div className=\"container\">\n          <div className=\"nav-index gap-up-30\">\n\t\t\t\t\t<StatusSearchFilter ref={statusSearchFilterRef}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\teqipType={eqipType}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsnsrType={snsrType}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tuseDiagCont={false}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcallback={filterSearchCallback}/>\n          </div>\n          <section className=\"gis-parts solo\">\n            <StatusCbList\n              ref={statusCbListRef}\n              fromDate={searchFilter.fromDate}\n              toDate={searchFilter.toDate}\n              eqipId={searchFilter.eqipId}\n              snsrId={searchFilter.snsrId}\n              diagCont={searchFilter.diagCont}\n              onClickDetail={openDetailModal}\n            />\n          </section>\n        </div>\n      </div>\n      {\n        detailProps.isOpen && <ModalCbDetail\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclose={closeDetailModal}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\teventType={detailProps.eventType}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\teventId={detailProps.eventId} />\n      }\n    </>\n  );\n}\n\nconst mapStateToProps = ({gisCbEvent, substation}: IRootState) => ({\n  scbrEventList: gisCbEvent.scbrEventList,\n  scbrEventListTotalCount: gisCbEvent.scbrEventListTotalCount,\n});\n\nconst mapDispatchToProps = {\n  getStatusGisScbrEvent,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GisScbrStatus);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\oltc-ofu\\oltc-ofu.tsx",["944"],"import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { getStatusMtrOltcOfuEvent } from './oltc-ofu.reducer';\nimport StatusSearchFilter, { IStatusSearchFilterReturn } from '../../../../shared/component/status/status-search-filter';\nimport StatusOfuList from '../../../../shared/component/status/ofulist/satus-oltc-ofu-list';\nimport ModalOfuDetail from '../../../../shared/component/popup/ofudetail/modal-ofudetail';\n\nexport interface IMtrOltcOfuStatusProps extends StateProps, DispatchProps {\n}\n\nexport const MtrOltcOfuStatus = (props: IMtrOltcOfuStatusProps) => {\n\tconst eqipType = 'MTR';\n\tconst snsrType = 'MTR_OLTC';\n\n  const statusSearchFilterRef = useRef(null);\n  const statusOltcOfuListRef = useRef(null);\n\n\tconst [modalOfuProps, setModalOfuProps] = useState({\n\t\tisOpen: false,\n\t\tevent: null,\n\t})\n\n  // 조회 필터 값\n  const [isSearchFilterUpdate, setIsSearchFilterUpdate] = useState(false);\n  const [searchFilter, setSearchFilter] = useState({\n    fromDate: new Date(),\n    toDate: new Date(),\n    eqipId: '0',\n    snsrId: '0',\n    diagCont: '',\n  });\n\n  // 조회 수행 콜백\n  const filterSearchCallback = ({fromDate, toDate, eqipId, snsrId, diagCont}: IStatusSearchFilterReturn) => {\n    setSearchFilter({\n      fromDate: fromDate,\n      toDate: toDate,\n      eqipId: eqipId,\n      snsrId: snsrId,\n      diagCont: diagCont,\n    })\n  }\n\n  // 초기 DOM 렌더링 후 수행\n  useEffect(() => {\n    statusSearchFilterRef.current?.searchBtn();   // 상단 필터컴포넌트 조회 기능 작동\n  }, []);\n\n  // 조회 필터값 변경 시 리스트 조회\n  useEffect(() => {\n    if (isSearchFilterUpdate) {\n      statusOltcOfuListRef.current?.search();\n    } else {\n      setIsSearchFilterUpdate(true);\n    }\n  }, [searchFilter]);\n\n  // ofu 상세보기\n  const clickOfuDetail = ( eventProps ) => {\n\t\tsetModalOfuProps({\n\t\t\tisOpen: true,\n\t\t\tevent: eventProps,\n\t\t})\n  }\n\n\tconst closeOfuModal = () => {\n\t\tsetModalOfuProps({\n\t\t\tisOpen: false,\n\t\t\tevent: null,\n\t\t})\n\t}\n\n  return (\n    <>\n      <div className=\"contents-area\">\n        <section className=\"contents-header\">\n          <h2>OLTC 모터 동작 현황</h2>\n          {/*<ol className=\"route\">*/}\n          {/*  <li><a href=\"\"><img src={require('assets/img/icon_home.svg').default}/>&nbsp;온수 변전소</a></li>*/}\n          {/*  <li><a href=\"\">MTR 설비종합 현황</a></li>*/}\n          {/*  <li><a href=\"\">OLTC 모터 동작 현황</a></li>*/}\n          {/*</ol>*/}\n        </section>\n        <div className=\"container\">\n          <div className=\"nav-index gap-up-30\">\n\t\t\t\t\t\t<StatusSearchFilter ref={statusSearchFilterRef}\n\t\t\t\t\t\t\t\teqipType={eqipType}\n\t\t\t\t\t\t\t\tsnsrType={snsrType}\n\t\t\t\t\t\t\t\tuseDiagCont={false}\n\t\t\t\t\t\t\t\tcallback={filterSearchCallback}/>\n          </div>\n          <section className=\"gis-parts solo\">\n            <StatusOfuList\n              ref={statusOltcOfuListRef}\n              fromDate={searchFilter.fromDate}\n              toDate={searchFilter.toDate}\n              eqipId={searchFilter.eqipId}\n              snsrId={searchFilter.snsrId}\n              diagCont={searchFilter.diagCont}\n              onClickDetail={clickOfuDetail}\n            />\n          </section>\n        </div>\n      </div>\n      {\n        modalOfuProps.isOpen && <ModalOfuDetail close={closeOfuModal}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tevent={modalOfuProps.event} />\n      }\n    </>\n  );\n}\n\nconst mapStateToProps = ({mtrOltcOfuEvent, substation}: IRootState) => ({\n  oltcOfuEventList: mtrOltcOfuEvent.oltcOfuEventList,\n  oltcOfuEventListTotalCount: mtrOltcOfuEvent.oltcOfuEventListTotalCount\n});\n\nconst mapDispatchToProps = {\n  getStatusMtrOltcOfuEvent,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MtrOltcOfuStatus);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\oltc-spdc\\oltc-spdc.tsx",["945","946","947","948","949"],"import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { getStatusMtrOltcPdCumulate, getStatusMtrOltcPdEvent } from './oltc-spdc.reducer';\nimport StatusSearchFilter, { IStatusSearchFilterReturn } from '../../../../shared/component/status/status-search-filter';\nimport { PrpsFile } from '../../../../shared/component/file/prpsfile';\nimport axios from 'axios';\nimport { layer_open } from '../../../../shared/util/publish-utils';\nimport StatusPdList from '../../../../shared/component/status/pdlist/status-oltc-pd-list';\nimport { PrpdChart } from '../../../../shared/component/chart/prpd/prpd-chart';\nimport { ModalPdEvent } from '../../../../shared/component/popup/pdevent/modal-pdevent';\nimport { ModalPdLibaray } from '../../../../shared/component/popup/pdlibrary/modal-pdlibrary';\nimport ModalRealtime from '../../../../shared/component/popup/realtime/modal-realtime';\nimport { PrpdChartImprove } from '../../../../shared/component/chart/prpd/prpd-chart-improve';\nimport { getPrpd } from '../../../../shared/reducers/prpd.reducer';\nimport { ISpdcEvent } from 'shared/model/spdc-event.model';\n\nexport interface IMtrOltcSpdcStatusProps extends StateProps, DispatchProps {}\n\nexport const MtrOltcSpdcStatus = (props: IMtrOltcSpdcStatusProps) => {\n\n\tconst eqipType = 'MTR';\n\tconst snsrType = 'OLTC_SPDC';\n\n  const statusSearchFilterRef = useRef(null);\n  const statusPdListRef = useRef(null);\n  const prpdRef = useRef(null);\n\n  const [isShowModalPdEvent, setIsShowModalPdEvent] = useState(false);\n  const [isShowModalPdLibaray, setIsShowModalPdLibaray] = useState(false);\n  const [isShowModalRealtime, setIsShowModalRealtime] = useState(false);\n\n  // 조회 필터 값\n  const [isSearchFilterUpdate, setIsSearchFilterUpdate] = useState(false);\n  const [searchFilter, setSearchFilter] = useState({\n    fromDate: new Date(),\n    toDate: new Date(),\n    eqipId: '0',\n    snsrId: '0',\n    diagCont: '',\n  });\n  // 조회 수행 콜백\n  const filterSearchCallback = ({ fromDate, toDate, eqipId, snsrId, diagCont }: IStatusSearchFilterReturn) => {\n    setSearchFilter({\n      fromDate: fromDate,\n      toDate: toDate,\n      eqipId: eqipId,\n      snsrId: snsrId,\n      diagCont: diagCont,\n    })\n  }\n\n  // PRPD 관련\n\n  // 초기 DOM 렌더링 후 수행\n  useEffect(() => {\n    // searchPdEvent();\n    statusSearchFilterRef.current?.searchBtn();   // 상단 필터컴포넌트 조회 기능 작동\n    prpdRef.current.clear();\n  }, []);\n\n  // 조회 필터값 변경 시 리스트 조회\n  useEffect(() => {\n    if (isSearchFilterUpdate) {\n      statusPdListRef.current?.search();\n    } else {\n      setIsSearchFilterUpdate(true);\n    }\n  }, [searchFilter]);\n\n  // PRPD\n  const [eventRow, setEventRow] = useState<ISpdcEvent>(null);\n  const setEventIdForPrpd = ( event : ISpdcEvent ) => {\n\t\tsetEventRow(event);\n\n    props.getPrpd(event.EVNT_ID);\n  }\n\n  // 3D PRPS 보기\n  const click3dPrps = ( event : ISpdcEvent  ) => {\n\t\tsetEventRow(event);\n    setIsShowModalPdEvent(true);\n  }\n\n  // Library 보기\n  const clickLibrary = ( event : ISpdcEvent ) => {\n\t\tsetEventRow(event);\n    setIsShowModalPdLibaray(true);\n  }\n\n  // 리얼타임 보기\n  const clickRealtime = ( event : ISpdcEvent ) => {\n    setIsShowModalRealtime(true);\n  }\n\n  return (\n    <>\n      <div className=\"contents-area\">\n        <section className=\"contents-header\">\n          <h2>OLTC 부분방전 현황</h2>\n          {/*<ol className=\"route\">*/}\n          {/*  <li><a href=\"\"><img src={require('assets/img/icon_home.svg').default}/>&nbsp;온수 변전소</a></li>*/}\n          {/*  <li><a href=\"\">MTR 설비종합 현황</a></li>*/}\n          {/*  <li><a href=\"\">OLTC 부분방전 현황</a></li>*/}\n          {/*</ol>*/}\n        </section>\n        <div className=\"container\">\n          <div className=\"nav-index gap-up-30 gap-down-10\">\n\t\t\t\t\t\t<StatusSearchFilter ref={statusSearchFilterRef}\n\t\t\t\t\t\t\t\teqipType={eqipType}\n\t\t\t\t\t\t\t\tsnsrType={snsrType}\n\t\t\t\t\t\t\t\tcallback={filterSearchCallback}/>\n          </div>\n          <section className=\"gis-parts left\">\n            <StatusPdList\n              ref={statusPdListRef}\n              fromDate={searchFilter.fromDate}\n              toDate={searchFilter.toDate}\n              eqipId={searchFilter.eqipId}\n              snsrId={searchFilter.snsrId}\n              diagCont={searchFilter.diagCont}\n              onClickRow={setEventIdForPrpd}\n              onClick3D={click3dPrps}\n              onClickL={clickLibrary}\n              onClickRT={clickRealtime}\n            />\n          </section>\n          <section className=\"gis-parts right\">\n            <h2 className=\"gap-down-20\">{eventRow?.SNSR_LOC_NM ?? null}</h2>\n            <div className=\"input graph\">\n              <div className=\"input group\">\n                <input type=\"checkbox\" id=\"toggle-radio\"/>\n                <label htmlFor=\"toggle-radio\">\n                  <div className=\"label-btn\">\n                    <div className=\"jog\"></div>\n                  </div>\n                  Noise Gate\n                </label>\n                <span>offset&nbsp;</span>\n                <input type=\"text\" id=\"offset\" className=\"graph-btn disabled narrow\" defaultValue=\"0\"/>\n                <span>Phase&nbsp;</span>\n                <input type=\"text\" id=\"phase\" className=\"graph-btn disabled narrow\" defaultValue=\"0\"/>\n              </div>\n            </div>\n            <div className=\"graph-inner\">\n              <div style={{width:'400px', height:'390px'}}>\n                <PrpdChartImprove ref={prpdRef} chartData={props.prpd}\n                                  width={480} height={480} chart_width={450} chart_height={450} />\n              </div>\n            </div>\n          </section>\n        </div>\n      </div>\n\n      {\n        isShowModalPdEvent && <ModalPdEvent\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\teventRow={eventRow}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclose={() => setIsShowModalPdEvent(false)} />\n\t\t\t}\n      {\n        isShowModalPdLibaray && <ModalPdLibaray\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\teventRow={eventRow}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclose={() => setIsShowModalPdLibaray(false)} />\n      }\n      {\n        isShowModalRealtime && <ModalRealtime\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclose={() => setIsShowModalRealtime(false)} />\n      }\n    </>\n  );\n}\n\nconst mapStateToProps = ({mtrOltcPdEvent, prpd}: IRootState) => ({\n  oltcSpdcEventList: mtrOltcPdEvent.oltcSpdcEventList,\n  oltcSpdcEventListTotalCount: mtrOltcPdEvent.oltcSpdcEventListTotalCount,\n  oltcSpdcComulateList: mtrOltcPdEvent.oltcSpdcComulateList,\n  oltcSpdcComulateListTotalCount: mtrOltcPdEvent.oltcSpdcEventListTotalCount,\n  prpd: prpd.prpd,\n});\n\nconst mapDispatchToProps = {\n  getStatusMtrOltcPdEvent,\n  getStatusMtrOltcPdCumulate,\n  getPrpd,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MtrOltcSpdcStatus);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\spdc\\spdc.tsx",["950","951","952","953","954"],"import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { getStatusMtrSpdcCumulate, getStatusMtrSpdcEvent } from './spdc.reducer';\nimport StatusSearchFilter, { IStatusSearchFilterReturn } from '../../../../shared/component/status/status-search-filter';\nimport { PrpsFile } from '../../../../shared/component/file/prpsfile';\nimport axios from 'axios';\nimport StatusPdList from '../../../../shared/component/status/pdlist/status-mtr-pd-list';\nimport { layer_open } from '../../../../shared/util/publish-utils';\nimport { PrpdChart } from '../../../../shared/component/chart/prpd/prpd-chart';\nimport { ModalPdEvent } from '../../../../shared/component/popup/pdevent/modal-pdevent';\nimport { ModalPdLibaray } from '../../../../shared/component/popup/pdlibrary/modal-pdlibrary';\nimport ModalRealtime from '../../../../shared/component/popup/realtime/modal-realtime';\nimport { PrpdChartImprove } from '../../../../shared/component/chart/prpd/prpd-chart-improve';\nimport { getPrpd } from '../../../../shared/reducers/prpd.reducer';\nimport { ISpdcEvent } from 'shared/model/spdc-event.model';\n\nexport interface IMtrSpdcStatusProps extends StateProps, DispatchProps {}\n\nexport const MtrSpdcStatus = (props: IMtrSpdcStatusProps) => {\n\n\tconst eqipType = 'MTR';\n\tconst snsrType = 'MTR_SPDC';\n\n  const statusSearchFilterRef = useRef(null);\n  const statusPdListRef = useRef(null);\n  const prpdRef = useRef(null);\n\n  const [isShowModalPdEvent, setIsShowModalPdEvent] = useState(false);\n  const [isShowModalPdLibaray, setIsShowModalPdLibaray] = useState(false);\n  const [isShowModalRealtime, setIsShowModalRealtime] = useState(false);\n\n  // 조회 필터 값\n  const [isSearchFilterUpdate, setIsSearchFilterUpdate] = useState(false);\n  const [searchFilter, setSearchFilter] = useState({\n    fromDate: new Date(),\n    toDate: new Date(),\n    eqipId: '0',\n    snsrId: '0',\n    diagCont: '',\n  });\n  // 조회 수행 콜백\n  const filterSearchCallback = ({fromDate, toDate, eqipId, snsrId, diagCont}: IStatusSearchFilterReturn) => {\n    setSearchFilter({\n      fromDate: fromDate,\n      toDate: toDate,\n      eqipId: eqipId,\n      snsrId: snsrId,\n      diagCont: diagCont,\n    })\n  }\n\n  // PRPD 관련\n\n  // 초기 DOM 렌더링 후 수행\n  useEffect(() => {\n    // searchPdEvent();\n    statusSearchFilterRef.current?.searchBtn(); // 상단 필터컴포넌트 조회 기능 작동\n    prpdRef.current.clear();\n  }, []);\n\n  // 조회 필터값 변경 시 리스트 조회\n  useEffect(() => {\n    if (isSearchFilterUpdate) {\n      statusPdListRef.current?.search();\n    } else {\n      setIsSearchFilterUpdate(true);\n    }\n  }, [searchFilter]);\n\n  // PRPD\n  const [eventRow, setEventRow] = useState<ISpdcEvent>(null);\n  const setEventIdForPrpd = ( event : ISpdcEvent ) => {\n\t\tsetEventRow(event);\n    props.getPrpd(event.EVNT_ID);\n  }\n\n  // 3D PRPS 보기\n  const click3dPrps = ( event : ISpdcEvent  ) => {\n\t\tsetEventRow(event);\n    setIsShowModalPdEvent(true);\n  }\n\n  // Library 보기\n  const clickLibrary = ( event : ISpdcEvent ) => {\n\t\tsetEventRow(event);\n    setIsShowModalPdLibaray(true);\n  }\n\n  // 리얼타임 보기\n  const clickRealtime = ( event : ISpdcEvent ) => {\n    setIsShowModalRealtime(true);\n  }\n  return (\n    <>\n      <div className=\"contents-area\">\n        <section className=\"contents-header\">\n          <h2>MTR 부분방전 현황</h2>\n          {/*<ol className=\"route\">*/}\n          {/*  <li><a href=\"\"><img src={require('assets/img/icon_home.svg').default}/>&nbsp;온수 변전소</a></li>*/}\n          {/*  <li><a href=\"\">MTR 설비종합 현황</a></li>*/}\n          {/*  <li><a href=\"\">MTR 부분방전 현황</a></li>*/}\n          {/*</ol>*/}\n        </section>\n        <div className='container'>\n          <div className=\"nav-index gap-up-30 gap-down-10\">\n\t\t\t\t\t\t<StatusSearchFilter ref={statusSearchFilterRef}\n\t\t\t\t\t\t\t\teqipType={eqipType}\n\t\t\t\t\t\t\t\tsnsrType={snsrType}\n\t\t\t\t\t\t\t\tcallback={filterSearchCallback}/>\n          </div>\n          <section className=\"gis-parts left\">\n            <StatusPdList\n              ref={statusPdListRef}\n              fromDate={searchFilter.fromDate}\n              toDate={searchFilter.toDate}\n              eqipId={searchFilter.eqipId}\n              snsrId={searchFilter.snsrId}\n              diagCont={searchFilter.diagCont}\n              onClickRow={setEventIdForPrpd}\n              onClick3D={click3dPrps}\n              onClickL={clickLibrary}\n              onClickRT={clickRealtime}\n            />\n          </section>\n          <section className=\"gis-parts right\">\n            <h2 className=\"gap-down-20\">{eventRow?.SNSR_LOC_NM ?? null}</h2>\n            <div className=\"input graph\">\n              <div className=\"input group\">\n                <input type=\"checkbox\" id=\"toggle-radio\" />\n                <label htmlFor=\"toggle-radio\">\n                  <div className=\"label-btn\">\n                    <div className=\"jog\"></div>\n                  </div>\n                  Noise Gate\n                </label>\n                <span>offset&nbsp;</span>\n                <input type=\"text\" id=\"offset\" className=\"graph-btn disabled narrow\" defaultValue=\"0\"/>\n                <span>Phase&nbsp;</span>\n                <input type=\"text\" id=\"phase\" className=\"graph-btn disabled narrow\" defaultValue=\"0\"/>\n              </div>\n            </div>\n            <div className=\"graph-inner\">\n              <div style={{width:'400px', height:'390px'}}>\n                <PrpdChartImprove ref={prpdRef} chartData={props.prpd}\n                                  width={480} height={480} chart_width={450} chart_height={450} />\n            </div>\n            </div>\n          </section>\n        </div>\n      </div>\n\n      {\n        isShowModalPdEvent && <ModalPdEvent\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\teventRow={eventRow}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclose={() => setIsShowModalPdEvent(false)} />\n      }\n      {\n        isShowModalPdLibaray && <ModalPdLibaray\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\teventRow={eventRow}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclose={() => setIsShowModalPdLibaray(false)} />\n      }\n      {\n        isShowModalRealtime && <ModalRealtime\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclose={() => setIsShowModalRealtime(false)} />\n      }\n    </>\n  );\n}\n\nconst mapStateToProps = ({mtrPdEvent, prpd}: IRootState) => ({\n  spdcEventList: mtrPdEvent.spdcEventList,\n  spdcEventListTotalCount: mtrPdEvent.spdcEventListTotalCount,\n  spdcComulateList: mtrPdEvent.spdcComulateList,\n  spdcComulateListTotalCount: mtrPdEvent.spdcEventListTotalCount,\n  prpd: prpd.prpd,\n});\n\nconst mapDispatchToProps = {\n  getStatusMtrSpdcEvent,\n  getStatusMtrSpdcCumulate,\n  getPrpd,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MtrSpdcStatus);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\dga\\dga.tsx",["955","956","957","958","959","960","961","962","963","964"],"import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport moment, { Moment } from 'moment';\nimport { getStatusMtrDgaEvent, getDgaSelectRow, getDgaStandard } from './dga.reducer';\nimport Pager from '../../../../shared/component/pager/Pager';\nimport StatusSearchFilter, { IStatusSearchFilterReturn } from '../../../../shared/component/status/status-search-filter';\nimport StatusDgaList from '../../../../shared/component/status/dgalist/status-dga-list'\nimport { IDgaEvent } from 'shared/model/dga-event.model';\n\ninterface linearGauge {\n\tvalue: number,\n\tdiscription: string,\n\tcolor: string,\n\tbarWidth: number,\n}\n\nconst defaultValue: linearGauge = {\n\tvalue: 0,\n\tdiscription: '양호',\n\tcolor: 'graph green',\n\tbarWidth: 0,\n}\n\nexport interface IMtrDgaStatusProps extends StateProps, DispatchProps {}\n\nexport const MtrDgaStatus = (props: IMtrDgaStatusProps) => {\n\tconst eqipType = 'MTR';\n\tconst snsrType = 'MTR_SIML';\n\n  const statusSearchFilterRef = useRef(null);\n  const statusDgaListRef = useRef(null);\n\n  // 조회 필터 값\n  const [isSearchFilterUpdate, setIsSearchFilterUpdate] = useState(false);\n  const [searchFilter, setSearchFilter] = useState({\n    fromDate: new Date(),\n    toDate: new Date(),\n    eqipId: '0',\n    snsrId: '0',\n    diagCont: '',\n  });\n\n  // 조회 수행 콜백\n  const filterSearchCallback = ({fromDate, toDate, eqipId, snsrId, diagCont}: IStatusSearchFilterReturn) => {\n    setSearchFilter({\n      fromDate: fromDate,\n      toDate: toDate,\n      eqipId: eqipId,\n      snsrId: snsrId,\n      diagCont: diagCont,\n    })\n  }\n\n  // 초기 DOM 렌더링 후 수행\n  useEffect(() => {\n    // searchPdEvent();\n    statusSearchFilterRef.current?.searchBtn();   // 상단 필터컴포넌트 조회 기능 작동\n\t\tprops.getDgaStandard('0');\t\t\t// 센서별 기준값\n  }, []);\n\n\tuseEffect(() => {\n\t\t// 기준값이 혹시 변경된다면 다시 할 것\n\t}, [props.dgaStandard]);\n\n  // 조회 필터값 변경 시 리스트 조회\n  useEffect(() => {\n    if (isSearchFilterUpdate) {\n      statusDgaListRef.current?.search();\n    } else {\n      setIsSearchFilterUpdate(true);\n    }\n  }, [searchFilter]);\n\n\n\n\n\n  // Dga CheckBox 우측 리니어 게이지 eventId\n\tconst [maxData, setMaxData] = useState({\n\t\th20: defaultValue,\n\t\th2: defaultValue,\n\t\tco: defaultValue,\n\t\tc2h2: defaultValue,\n\t});\n\n  const [eventData, setEventData] = useState({\n\t\th20: defaultValue,\n\t\th2: defaultValue,\n\t\tco: defaultValue,\n\t\tc2h2: defaultValue,\n\t});\n\n\tconst getLinearGauge = ( value: number, normal: number, notice: number, abnormal: number, danger: number, ) => {\n\t\tconst gaugeWidth = 53.8;\n\n\t\tif( value <= normal){\n\t\t\t// 양호\n\t\t\tconst width = value / normal * gaugeWidth;\n\n\t\t\treturn \t{\n\t\t\t\tvalue: value,\n\t\t\t\tdiscription: '양호',\n\t\t\t\tcolor: 'graph green',\n\t\t\t\tbarWidth: width,\n\t\t\t};\n\t\t} else if( value <= notice ) {\n\t\t\t// 관찰\n\t\t\tconst width = (1 + (value - normal) / (notice - normal)) * gaugeWidth;\n\n\t\t\treturn \t{\n\t\t\t\tvalue: value,\n\t\t\t\tdiscription: '관찰',\n\t\t\t\tcolor: 'graph yellow',\n\t\t\t\tbarWidth: width,\n\t\t\t};\n\t\t} else if( value <= abnormal ) {\n\t\t\t// 요주의\n\t\t\tconst width = (2 + (value - notice) / (abnormal - notice)) * gaugeWidth;\n\n\t\t\treturn \t{\n\t\t\t\tvalue: value,\n\t\t\t\tdiscription: '요주의',\n\t\t\t\tcolor: 'graph gold',\n\t\t\t\tbarWidth: width,\n\t\t\t};\n\t\t} else if( value <= danger ) {\n\t\t\t// 심각\n\t\t\tconst width = (3 + (value - danger) / (danger - abnormal)) * gaugeWidth;\n\n\t\t\treturn \t{\n\t\t\t\tvalue: value,\n\t\t\t\tdiscription: '심각',\n\t\t\t\tcolor: 'graph orange',\n\t\t\t\tbarWidth: width,\n\t\t\t};\n\t\t} else {\n\t\t\t// 고장위험\n\t\t\tconst width = Math.min( 5, (4 + (value - danger) / (danger - abnormal)) ) * gaugeWidth;\n\n\t\t\treturn \t{\n\t\t\t\tvalue: value,\n\t\t\t\tdiscription: '고장위험',\n\t\t\t\tcolor: 'graph pink',\n\t\t\t\tbarWidth: width,\n\t\t\t};\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\n\t\t// 전날 최대치 갱신\n\t\tif( !props.dgaStandard )\n\t\t\treturn;\n\n\t\t// h20, h2, co, c2h2\n\t\tconst h20 = getLinearGauge( props.dgaMaxValue.h2oMax,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.H2oNormalThreshold,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.H2oNoticeThreshold,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.H2oAbnormalThreshold,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.H2oDangerThreshold );\n\n\t\tconst h2 = getLinearGauge( props.dgaMaxValue.h2Max,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.H2NormalThreshold,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.H2NoticeThreshold,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.H2AbnormalThreshold,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.H2DangerThreshold );\n\n\t\tconst co = getLinearGauge( props.dgaMaxValue.coMax,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.CoNormalThreshold,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.CoNoticeThreshold,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.CoAbnormalThreshold,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.CoDangerThreshold );\n\n\t\tconst c2h2 = getLinearGauge( props.dgaMaxValue.c2h2Max,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.C2h2NormalThreshold,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.C2h2NoticeThreshold,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.C2h2AbnormalThreshold,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.C2h2DangerThreshold );\n\n\t\tsetMaxData({\n\t\t\th20: h20,\n\t\t\th2: h2,\n\t\t\tco: co,\n\t\t\tc2h2: c2h2,\n\t\t});\n\n\t}, [props.dgaMaxValue]);\n\n  const setEventIdForDga = ( event : IDgaEvent ) => {\n\n\t\tif( !props.dgaStandard )\n\t\t\treturn;\n\n\t\t// h20, h2, co, c2h2\n\t\tconst h20 = getLinearGauge( event.H2O,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.H2oNormalThreshold,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.H2oNoticeThreshold,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.H2oAbnormalThreshold,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.H2oDangerThreshold );\n\n\t\tconst h2 = getLinearGauge( event.H2,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.H2NormalThreshold,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.H2NoticeThreshold,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.H2AbnormalThreshold,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.H2DangerThreshold );\n\n\t\tconst co = getLinearGauge( event.CO,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.CoNormalThreshold,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.CoNoticeThreshold,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.CoAbnormalThreshold,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.CoDangerThreshold );\n\n\t\tconst c2h2 = getLinearGauge( event.C2H2,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.C2h2NormalThreshold,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.C2h2NoticeThreshold,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.C2h2AbnormalThreshold,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.dgaStandard.C2h2DangerThreshold );\n\n\t\tsetEventData({\n\t\t\th20: h20,\n\t\t\th2: h2,\n\t\t\tco: co,\n\t\t\tc2h2: c2h2,\n\t\t});\n\n\t\tprops.getDgaSelectRow(event.OCCR_TIME);\t\t// 전날 최대치\n\t\t// props.getDgaStandard(event.SNSR_ID);\t\t\t// 센서별 기준값\n  }\n\n  return (\n    <>\n      <div className=\"contents-area\">\n        <section className=\"contents-header\">\n          <h2>유중가스 현황</h2>\n          {/*<ol className=\"route\">*/}\n          {/*  <li><a href=\"\"><img src={require('assets/img/icon_home.svg').default}/>&nbsp;온수 변전소</a></li>*/}\n          {/*  <li><a href=\"\">MTR 설비 현황</a></li>*/}\n          {/*  <li><a href=\"\">유중가스 현황</a></li>*/}\n          {/*</ol>*/}\n        </section>\n        <div className=\"container\">\n          <div className=\"nav-index gap-up-30 gap-down-10\">\n\t\t\t\t\t\t<StatusSearchFilter ref={statusSearchFilterRef}\n\t\t\t\t\t\t\t\teqipType={eqipType}\n\t\t\t\t\t\t\t\tsnsrType={snsrType}\n\t\t\t\t\t\t\t\tuseDiagCont={false}\n\t\t\t\t\t\t\t\tcallback={filterSearchCallback}/>\n          </div>\n          <section className=\"gis-parts left\">\n            <StatusDgaList\n              ref={statusDgaListRef}\n              fromDate={searchFilter.fromDate}\n              toDate={searchFilter.toDate}\n              eqipId={searchFilter.eqipId}\n              snsrId={searchFilter.snsrId}\n              diagCont={searchFilter.diagCont}\n              onClickRow={setEventIdForDga}\n            />\n          </section>\n\n          {/* TODO - DGA리니어게이지 */}\n          <section className=\"gis-parts right graph\">\n            <div className=\"row header\">\n              <div className=\"width-5\">측정값(ppm)</div>\n              <div className=\"width-5 param\">\n                <div className=\"bg green\">양호</div>\n                <div className=\"bg yellow\">관찰</div>\n                <div className=\"bg gold\">요주의</div>\n                <div className=\"bg orange\">심각</div>\n                <div className=\"bg pink\">고장위험</div>\n              </div>\n            </div>\n            <div className=\"row data\">\n              <div className=\"div-data\">\n                <div className=\"dga-tag\">H2O\n                  <a href=\"\" className=\"bubble tooltip\">\n                    <i className=\"icon-question\"></i>\n                    <span className=\"tooltip-text\">DGA 수분 기준치 : 정상 ＜ 40ppm ≤ 요주의 ＜ 50ppm ≤ 이상</span>\n                  </a>\n                </div>\n                {/* <!-- // span 태그의 id명은 css속성이 붙어있지 않습니다.\n                        필요 없을 경우 삭제해주세요. --> */}\n                <div className=\"dga-ppm\">\n                  <div className=\"dga-result\">\n                    현재 <span id=\"h2-today-digits\">{eventData.h20.value}</span>\n                  </div>\n                  <div className=\"dga-result\">\n                    전날 최대 <span id=\"h2-yesterday-digits\">{maxData.h20.value}</span>\n                  </div>\n                </div>\n              </div>\n              <div className=\"div-data graph\">\n                {/* <!-- // span 태그의 id명은 데이터 송신시 구분을 위해 붙여놓은 태그로\n                        CSS속성은 없습니다. 필요 없으면 삭제해주세요.\n                     // 양호: green | 관찰: yellow | 주의: gold | 심각: orange | 위험 : pink -->\n                <!-- // 그래프의 Width 값은 인라인에 삽입하는 구조입니다. --> */}\n                <div className=\"row graph\">\n                  <span>{eventData.h20.discription}</span>\n                  <div className=\"graph-wrap\">\n                    <span className={eventData.h20.color} style={{width: eventData.h20.barWidth+'px'}}></span>\n                  </div>\n                </div>\n                <div className=\"row graph\">\n                  <span>{maxData.h20.discription}</span>\n                  <div className=\"graph-wrap\">\n                    <span className={maxData.h20.color} style={{width: maxData.h20.barWidth+'px'}}></span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"row data\">\n              <div className=\"div-data\">\n                <div className=\"dga-tag\">H2\n                  <a href=\"\" className=\"bubble tooltip\">\n                    <i className=\"icon-question\"></i>\n                    <span className=\"tooltip-text\">기준치 : 정상 ＜ 200ppm ≤ 요주의 ＜ 400ppm ≤ 이상 ＜ 800ppm ≤ 위험</span>\n                  </a>\n                </div>\n                <div className=\"dga-ppm\">\n                  <div className=\"dga-result\">\n                    현재 <span id=\"h2-today-digits\">{eventData.h2.value}</span>\n                  </div>\n                  <div className=\"dga-result\">\n                    전날 최대 <span id=\"h2-yesterday-digits\">{maxData.h2.value}</span>\n                  </div>\n                </div>\n              </div>\n              <div className=\"div-data graph\">\n                <div className=\"row graph\">\n                  <span>{eventData.h2.discription}</span>\n                  <div className=\"graph-wrap\">\n                    <span className={eventData.h2.color} style={{width: eventData.h2.barWidth+'px'}}></span>\n                  </div>\n                </div>\n                <div className=\"row graph\">\n\t\t\t\t\t\t\t\t\t<span>{maxData.h2.discription}</span>\n                  <div className=\"graph-wrap\">\n                    <span className={maxData.h2.color} style={{width: maxData.h2.barWidth+'px'}}></span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"row data\">\n              <div className=\"div-data\">\n                <div className=\"dga-tag\">CO\n                  <a href=\"\" className=\"bubble tooltip\">\n                    <i className=\"icon-question\"></i>\n                    <span className=\"tooltip-text\">DGA 일산화탄소 기준치 : 정상 ＜ 400ppm ≤ 요주의 ＜ 800ppm ≤ 이상</span>\n                  </a>\n                </div>\n                <div className=\"dga-ppm\">\n                  <div className=\"dga-result\">\n                    현재 <span id=\"h2-today-digits\">{eventData.co.value}</span>\n                  </div>\n                  <div className=\"dga-result\">\n                    전날 최대 <span id=\"h2-yesterday-digits\">{maxData.co.value}</span>\n                  </div>\n                </div>\n              </div>\n              <div className=\"div-data graph\">\n                <div className=\"row graph\">\n                  <span id=\"h2-status-today\">{eventData.co.discription}</span>\n                  <div className=\"graph-wrap\">\n                    <span className={eventData.co.color} style={{width: eventData.co.barWidth+'px'}}></span>\n                  </div>\n                </div>\n                <div className=\"row graph\">\n\t\t\t\t\t\t\t\t\t<span>{maxData.co.discription}</span>\n                  <div className=\"graph-wrap\">\n                    <span className={maxData.co.color} style={{width: maxData.co.barWidth+'px'}}></span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"row data\">\n              <div className=\"div-data\">\n                <div className=\"dga-tag\">C2H2\n                  <a href=\"\" className=\"bubble tooltip\">\n                    <i className=\"icon-question\"></i>\n                    <span className=\"tooltip-text\">DGA 아세틸렌 기준치 : 정상 ＜ 0.5ppm ≤ 요주의 ＜ 0.8ppm ≤ 이상 ＜ 1ppm ≤ 위험</span>\n                  </a>\n                </div>\n                <div className=\"dga-ppm\">\n                  <div className=\"dga-result\">\n                    현재 <span id=\"h2-today-digits\">{eventData.c2h2.value}</span>\n                  </div>\n                  <div className=\"dga-result\">\n                    전날 최대 <span id=\"h2-yesterday-digits\">{maxData.co.value}</span>\n                  </div>\n                </div>\n              </div>\n              <div className=\"div-data graph\">\n                <div className=\"row graph\">\n                  <span id=\"h2-status-today\">{eventData.c2h2.discription}</span>\n                  <div className=\"graph-wrap\">\n                    <span className={eventData.c2h2.color} style={{width: eventData.c2h2.barWidth+'px'}}></span>\n                  </div>\n                </div>\n                <div className=\"row graph\">\n\t\t\t\t\t\t\t\t<span>{maxData.c2h2.discription}</span>\n                  <div className=\"graph-wrap\">\n                    <span className={maxData.c2h2.color} style={{width: maxData.c2h2.barWidth+'px'}}></span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </section>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({mtrDgaEvent, substation}: IRootState) => ({\n  dgaEventList: mtrDgaEvent.dgaEventList,\n  dgaEventListTotalCount: mtrDgaEvent.dgaEventListTotalCount,\n\tdgaStandard: mtrDgaEvent.dgaStandard,\n\tdgaMaxValue: mtrDgaEvent.dgaSelectRow,\n});\n\nconst mapDispatchToProps = {\n  getStatusMtrDgaEvent,\n\tgetDgaSelectRow,\n\tgetDgaStandard,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MtrDgaStatus);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\gis\\all\\all.tsx",["965","966"],"import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport GisAllEqipStatus from './all-eqip';\nimport GisSpdcAllStatus from './all-spdc';\nimport GisScbrAllStatus from './all-scbr';\n\nexport interface IGisAllStatusProps extends StateProps, DispatchProps {}\n\nexport const GisAllStatus = (props: IGisAllStatusProps) => {\n\n  const [isShowGisPd, setIsShowGisPd] = useState(true);\n\n  const [eqipId, setEqipId] = useState(0);\n\n  return (\n    <>\n      <div className='contents-area'>\n        <section className='contents-header'>\n          <h2>GIS 설비 종합 현황</h2>\n          {/*<ol className='route'>*/}\n          {/*  <li><a href=''><img src={require('assets/img/icon_home.svg').default} />&nbsp;온수 변전소</a></li>*/}\n          {/*  <li><a href=''>GIS</a></li>*/}\n          {/*</ol>*/}\n        </section>\n        <div className='container'>\n          <section className='gis-all left'>\n            <div className='nav-sub-horizon gap50'>\n              <ul>\n                <li><a onClick={() => setIsShowGisPd(true)} className={isShowGisPd ? 'on' : ''}>GIS 부분방전</a></li>\n                <li><a onClick={() => setIsShowGisPd(false)} className={isShowGisPd ? '' : 'on'}>차단기 동작특성</a></li>\n              </ul>\n            </div>\n\n            {\n              isShowGisPd ?\n                <GisSpdcAllStatus eqipId={eqipId} />\n                :\n                <GisScbrAllStatus eqipId={eqipId} />\n            }\n\n\n          </section>\n          <section className=\"gis-all right\">\n            <GisAllEqipStatus eqipIdReturnCallback={(eqipId) => setEqipId(eqipId)} />\n          </section>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ authentication }: IRootState) => ({\n  // isAuthenticated: authentication.isAuthenticated,\n  // isAdmin: hasAnyAuthority(authentication.account.authorities, [AUTHORITIES.ADMIN]),\n});\n\nconst mapDispatchToProps = {\n  // getSession\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GisAllStatus);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\gis\\spdc\\spdc.tsx",["967","968","969","970"],"import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { getStatusGisSpdcCumulate, getStatusGisSpdcEvent } from './spdc.reducer';\nimport StatusSearchFilter, { IStatusSearchFilterReturn } from '../../../../shared/component/status/status-search-filter';\nimport { PrpdChart } from 'shared/component/chart/prpd/prpd-chart';\nimport axios from 'axios';\nimport StatusPdList from '../../../../shared/component/status/pdlist/status-pd-list';\nimport { PrpsFile } from 'shared/component/file/prpsfile';\nimport { ModalPdEvent } from 'shared/component/popup/pdevent/modal-pdevent';\nimport { ModalPdLibaray } from 'shared/component/popup/pdlibrary/modal-pdlibrary';\nimport ModalRealtime from 'shared/component/popup/realtime/modal-realtime';\nimport { getPrpd } from '../../../../shared/reducers/prpd.reducer';\nimport { PrpdChartImprove } from '../../../../shared/component/chart/prpd/prpd-chart-improve';\nimport { get3DPrps } from '../../../../shared/reducers/3d-prps.reducer';\nimport { ISpdcEvent } from 'shared/model/spdc-event.model';\n\nexport interface IGisSpdcStatusProps extends StateProps, DispatchProps {}\n\nexport const GisSpdcStatus = (props: IGisSpdcStatusProps) => {\n\n\tconst eqipType = 'GIS';\n\tconst snsrType = 'GIS_SPDC';\n\n  const statusSearchFilterRef = useRef(null);\n  const statusPdListRef = useRef(null);\n  const prpdRef = useRef(null);\n\n  const [isShowModalPdEvent, setIsShowModalPdEvent] = useState(false);\n  const [isShowModalPdLibaray, setIsShowModalPdLibaray] = useState(false);\n  const [isShowModalRealtime, setIsShowModalRealtime] = useState(false);\n\n  // 조회 필터 값\n  const [isSearchFilterUpdate, setIsSearchFilterUpdate] = useState(false);\n  const [searchFilter, setSearchFilter] = useState({\n    fromDate: new Date(),\n    toDate: new Date(),\n    eqipId: '0',\n    snsrId: '0',\n    diagCont: '',\n  });\n  // 조회 수행 콜백\n  const filterSearchCallback = ({ fromDate, toDate, eqipId, snsrId, diagCont }: IStatusSearchFilterReturn) => {\n    setSearchFilter({\n      fromDate: fromDate,\n      toDate: toDate,\n      eqipId: eqipId,\n      snsrId: snsrId,\n      diagCont: diagCont,\n    })\n  }\n\n  // PRPD 관련\n\n  // 초기 DOM 렌더링 후 수행\n  useEffect(() => {\n    // searchPdEvent();\n    statusSearchFilterRef.current?.searchBtn();   // 상단 필터컴포넌트 조회 기능 작동\n    prpdRef.current.clear();\n  }, []);\n\n  // 조회 필터값 변경 시 리스트 조회\n  useEffect(() => {\n    if (isSearchFilterUpdate) {\n      statusPdListRef.current?.search();\n    } else {\n      setIsSearchFilterUpdate(true);\n    }\n  }, [searchFilter]);\n\n  // PRPD\n  const [eventRow, setEventRow] = useState<ISpdcEvent>(null);\n  const setEventIdForPrpd = ( event : ISpdcEvent ) => {\n\t\tsetEventRow(event);\n\n    props.getPrpd(event.EVNT_ID);\n  }\n\n  // 3D PRPS 보기\n  const click3dPrps = ( event : ISpdcEvent  ) => {\n\t\tsetEventRow(event);\n    setIsShowModalPdEvent(true);\n  }\n\n  // Library 보기\n  const clickLibrary = ( event : ISpdcEvent ) => {\n\t\tsetEventRow(event);\n    setIsShowModalPdLibaray(true);\n  }\n\n  // 리얼타임 보기\n  const clickRealtime = ( event : ISpdcEvent ) => {\n    setIsShowModalRealtime(true);\n  }\n\n  return (\n    <>\n      <div className='contents-area'>\n        <section className='contents-header'>\n          <h2>GIS 부분방전 현황</h2>\n          {/*<ol className='route'>*/}\n          {/*  /!*<li><a href=\"\"><img src=\"../../img/icon_home.svg\"/>&nbsp;온수 변전소</a></li>*!/*/}\n          {/*  <li><a href=''><img src={require('assets/img/icon_home.svg').default} />&nbsp;온수 변전소</a></li>*/}\n          {/*  <li><a href=''>GIS 설비종합 현황</a></li>*/}\n          {/*  <li><a href=''>GIS 부분방전 현황</a></li>*/}\n          {/*</ol>*/}\n        </section>\n        <div className='container'>\n          <div className=\"nav-index gap-up-30 gap-down-10\">\n\t\t\t\t\t\t<StatusSearchFilter ref={statusSearchFilterRef}\n\t\t\t\t\t\t\t\teqipType={eqipType}\n\t\t\t\t\t\t\t\tsnsrType={snsrType}\n\t\t\t\t\t\t\t\tcallback={filterSearchCallback}/>\n          </div>\n          <section className=\"gis-parts left\">\n            <StatusPdList\n              ref={statusPdListRef}\n              fromDate={searchFilter.fromDate}\n              toDate={searchFilter.toDate}\n              eqipId={searchFilter.eqipId}\n              snsrId={searchFilter.snsrId}\n              diagCont={searchFilter.diagCont}\n              onClickRow={setEventIdForPrpd}\n              onClick3D={click3dPrps}\n              onClickL={clickLibrary}\n\t\t\t\t      onClickRT={clickRealtime}\n            />\n          </section>\n          <section className=\"gis-parts right\">\n            <h2 className=\"gap-down-20\">{eventRow?.SNSR_LOC_NM ?? null}</h2>\n            <div className=\"input graph\">\n              <div className=\"input group\">\n                <input type=\"checkbox\" id=\"toggle-radio\"/>\n                <label htmlFor=\"toggle-radio\">\n                  <div className=\"label-btn\">\n                    <div className=\"jog\"></div>\n                  </div>\n                  Noise Gate\n                </label>\n                <span>offset&nbsp;</span>\n                <input type=\"text\" id=\"offset\" className=\"graph-btn disabled narrow\" defaultValue=\"0\"/>\n                <span>Phase&nbsp;</span>\n                <input type=\"text\" id=\"phase\" className=\"graph-btn disabled narrow\" defaultValue=\"0\"/>\n              </div>\n            </div>\n            <div className=\"graph-inner\">\n            \t<div style={{width:'400px', height:'390px'}}>\n                <PrpdChartImprove ref={prpdRef} chartData={props.prpd}\n                                  width={480} height={480} chart_width={450} chart_height={450} />\n\t\t\t\t      </div>\n            </div>\n          </section>\n        </div>\n      </div>\n\n      {\n        isShowModalPdEvent && <ModalPdEvent\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\teventRow={eventRow}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclose={() => setIsShowModalPdEvent(false)} />\n\t\t\t}\n      {\n        isShowModalPdLibaray && <ModalPdLibaray\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\teventRow={eventRow}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclose={() => setIsShowModalPdLibaray(false)} />\n      }\n      {\n        isShowModalRealtime && <ModalRealtime\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclose={() => setIsShowModalRealtime(false)} />\n      }\n    </>\n  );\n}\n\nconst mapStateToProps = ({ gisPdEvent, prpd, prps3D }: IRootState) => ({\n  spdcEventList: gisPdEvent.spdcEventList,\n  spdcEventListTotalCount: gisPdEvent.spdcEventListTotalCount,\n  spdcComulateList: gisPdEvent.spdcComulateList,\n  spdcComulateListTotalCount: gisPdEvent.spdcComulateListTotalCount,\n  prpd: prpd.prpd,\n  eventPrps: prps3D.eventPrps,\n  noisePrps: prps3D.noisePrps,\n});\n\nconst mapDispatchToProps = {\n  getStatusGisSpdcEvent,\n  getStatusGisSpdcCumulate,\n  getPrpd,\n  get3DPrps,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GisSpdcStatus);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\trend\\mtr\\dga\\dga.tsx",["971","972","973","974"],"import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport TrendSearchFilter, { ITrendSearchFilterReturn } from 'shared/component/trend/trend-search-filter';\nimport { getTrendMtrDga } from './dga.reducer';\n\n// Hightcharts\nimport * as Highcharts from 'highcharts';\nimport { emptyOptions, HighchartLineDefault } from 'shared/component/chart/highcharts/hightchart-line-default1';\n\nexport interface IMtrDgaTrendProps extends StateProps, DispatchProps {}\n\nexport const MtrDgaTrend = (props: IMtrDgaTrendProps) => {\n\n\tconst eqipType = 'MTR';\n\tconst snsrType = 'MTR_SIML';\n\n  const searchFilterRef = useRef(null);\n\n\tconst [searchFilter, setSearchFilter] = useState( {\n\t\tfromDate: new Date(),\n\t\ttoDate: new Date(),\n\t\teqipId: '0',\n\t\tsnsrId: '0',\n\t\tperiod: 'year',\n\t\tfromDateZoom: new Date(),\t// 확대시 시작일시\n\t\ttoDateZoom: new Date(),\t\t// 확대시 종료일시\n\t});\n\n\tconst [chartData, setChartData] = useState({\n\t\txSeries: [],\n\t\toption1 : emptyOptions,\n\t\toption2 : emptyOptions,\n\t\toption3 : emptyOptions,\n\t});\n\n  const filterSearchCallback = ({ fromDate, toDate, eqipId, snsrId }: ITrendSearchFilterReturn) => {\n    setSearchFilter({\n\t\t...searchFilter,\n      fromDate: fromDate,\n      toDate: toDate,\n      eqipId: eqipId,\n      snsrId: snsrId,\n\t  fromDateZoom: fromDate,\n\t  toDateZoom: toDate,\n    });\n\n\t\tprops.getTrendMtrDga(\n\t\t\tfromDate,\n\t\t\ttoDate,\n\t\t\teqipId,\n\t\t\tsnsrId,\n\t\t\tsearchFilter.period,\n\t\t);\n  }\n\n  // 초기화 수행 콜백\n  const filterResetCallback = ({ fromDate, toDate, eqipId, snsrId }: ITrendSearchFilterReturn) => {\n    setSearchFilter({\n\t  ...searchFilter,\n      fromDate: fromDate,\n      toDate: toDate,\n      eqipId: eqipId,\n      snsrId: snsrId,\n\t\t\tperiod: 'year',\n\t\t\tfromDateZoom: fromDate,\n\t\t\ttoDateZoom: toDate,\n    });\n\n\t\tprops.getTrendMtrDga(\n\t\t\tfromDate,\n\t\t\ttoDate,\n\t\t\teqipId,\n\t\t\tsnsrId,\n\t\t\t'year',\n\t\t\t);\n\t}\n\n  useEffect(() => {\n\t\tconst data = props.trendMtrDgaData;\n\t\tif( data == undefined )\n\t\t\treturn;\n\n\t\tif( data.length == 0 )\n\t\t\treturn;\n\n\t\tconst series = data[0].XAxisData;\n\t\tconst option1 = {\n\t\t\tchart: {\n\t\t\t\t\tzoomType: 'x',\n\t\t\t\t\tevents: {\n\t\t\t\t\t\t\tselection: zoomChart,\n\t\t\t\t\t\t\taddSeries: function () {\n\t\t\t\t\t\t\t\t\tvar label = this.renderer.label('A series was added, about to redraw chart', 100, 120)\n\t\t\t\t\t\t\t\t\t\t\t.attr({\n\t\t\t\t\t\t\t\t\t\t\t\t\tfill: Highcharts.getOptions().colors[0],\n\t\t\t\t\t\t\t\t\t\t\t\t\tpadding: 10,\n\t\t\t\t\t\t\t\t\t\t\t\t\tr: 5,\n\t\t\t\t\t\t\t\t\t\t\t\t\tzIndex: 8\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t.css({\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: '#FFFFFF'\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t.add();\n\n\t\t\t\t\t\t\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel.fadeOut();\n\t\t\t\t\t\t\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tplotOptions: {\n\t\t\t\t\tseries: {\n\t\t\t\t\t\t\tturboThreshold: 15000,\n\t\t\t\t\t\t\tdataGrouping: {\n\t\t\t\t\t\t\t\t\tenabled: false\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t},\n\t\t\ttitle: {\n\t\t\t\t\ttext: '',\n\t\t\t\t\t// x: -20 //center\n\t\t\t},\n\t\t\tcredits: { enabled: false },\n\t\t\txAxis: {\n\t\t\t\t\tcategories: series\n\t\t\t},\n\t\t\tyAxis: {\n\t\t\t\t\tmin: 0,\n\t\t\t\t\tstartOnTick: false,\n\t\t\t\t\ttitle: {\n\t\t\t\t\t\t\ttext: '발생 회수'\n\t\t\t\t\t},\n\t\t\t\t\tplotLines: [{\n\t\t\t\t\t\t\tvalue: 0,\n\t\t\t\t\t\t\twidth: 1,\n\t\t\t\t\t\t\tcolor: '#808080'\n\t\t\t\t\t}]\n\t\t\t},\n\t\t\ttooltip: {\n\t\t\t\t\tshared: true,\n\t\t\t\t\tcrosshairs: true,\n\t\t\t\t\tpointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.f}</b><br/>'\n\t\t\t},\n\t\t\tlegend: {\n\t\t\t\t\tlayout: 'vertical',\n\t\t\t\t\talign: 'right',\n\t\t\t\t\tverticalAlign: 'middle',\n\t\t\t\t\tborderWidth: 0\n\t\t\t},\n\t\t\tseries: []\n\t\t};\n\n\t\tconst option2 = {\n\t\t\tchart: {\n\t\t\t\tzoomType: 'x',\n\t\t\t\tevents: {\n\t\t\t\t\tselection: zoomChart,\n\t\t\t\t}\n\t\t\t},\n\t\t\tplotOptions: {\n\t\t\t\tseries: {\n\t\t\t\t\tturboThreshold: 15000,\n\t\t\t\t\tdataGrouping: {\n\t\t\t\t\t\t\tenabled: false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\ttitle: {\n\t\t\t\ttext: '',\n\t\t\t\t// x: -20 //center\n\t\t\t},\n\t\t\tcredits: {\n\t\t\t\tenabled: false\n\t\t\t},\n\t\t\txAxis: {\n\t\t\t\tcategories: series,\n\t\t\t},\n\t\t\tyAxis: {\n\t\t\t\tmin: 0,\n\t\t\t\tstartOnTick: false,\n\t\t\t\ttitle: {\n\t\t\t\t\t\ttext: '발생 회수'\n\t\t\t\t},\n\t\t\t\tplotLines: [{\n\t\t\t\t\t\tvalue: 0,\n\t\t\t\t\t\twidth: 1,\n\t\t\t\t\t\tcolor: '#808080'\n\t\t\t\t}]\n\t\t\t},\n\t\t\ttooltip: {\n\t\t\t\tshared: true,\n\t\t\t\tcrosshairs: true,\n\t\t\t\tpointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.f}</b><br/>'\n\t\t\t},\n\t\t\tlegend: {\n\t\t\t\tlayout: 'vertical',\n\t\t\t\talign: 'right',\n\t\t\t\tverticalAlign: 'middle',\n\t\t\t\tborderWidth: 0\n\t\t\t},\n\t\t\tseries: []\n\t\t};\n\n\t\tconst option3 = {\n\t\t\tchart: {\n\t\t\t\tzoomType: 'x',\n\t\t\t\tevents: {\n\t\t\t\t\t\tselection: zoomChart,\n\t\t\t\t}\n\t\t\t},\n\t\t\tplotOptions: {\n\t\t\t\tseries: {\n\t\t\t\t\tturboThreshold: 15000,\n\t\t\t\t\tdataGrouping: {\n\t\t\t\t\t\t\tenabled: false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\ttitle: {\n\t\t\t\ttext: '',\n\t\t\t\t// x: -20 //center\n\t\t\t},\n\t\t\tcredits: {\n\t\t\t\tenabled: false\n\t\t\t},\n\t\t\txAxis: {\n\t\t\t\tcategories: series.XAxisData\n\t\t\t},\n\t\t\tyAxis: {\n\t\t\t\t//min: 0,\n\t\t\t\tstartOnTick: false,\n\t\t\t\ttitle: {\n\t\t\t\t\t\ttext: '함유량(ppm)'\n\t\t\t\t},\n\t\t\t\tplotLines: [{\n\t\t\t\t\t\tvalue: 0,\n\t\t\t\t\t\twidth: 1,\n\t\t\t\t\t\tcolor: '#808080'\n\t\t\t\t}]\n\t\t\t},\n\t\t\ttooltip: {\n\t\t\t\tshared: true,\n\t\t\t\tcrosshairs: true,\n\t\t\t\tpointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.1f}</b><br/>'\n\t\t\t},\n\t\t\tlegend: {\n\t\t\t\tlayout: 'vertical',\n\t\t\t\talign: 'right',\n\t\t\t\tverticalAlign: 'middle',\n\t\t\t\tborderWidth: 0\n\t\t\t},\n\t\t\tseries: []\n\t\t};\n\n\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\t//option1\n\t\t\toption1.series.push({\n\t\t\t\tname: data[i].SnsrName + '-이벤트 발생',\n\t\t\t\tvisible: false,\n\t\t\t\tdata: data[i].EventData,\n\t\t\t\tdataLabels: {\n\t\t\t\t\t\tenabled: false,\n\t\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\toption1.series.push({\n\t\t\t\tname: data[i].SnsrName + '-알람 발생',\n\t\t\t\tdata: data[i].AlarmData,\n\t\t\t\tdataLabels: {\n\t\t\t\t\t\tenabled: false,\n\t\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t//option2\n\t\t\toption2.series.push({\n\t\t\t\tname: data[i].SnsrName + '-요주의',\n\t\t\t\tdata: data[i].Vaution_cnt,\n\t\t\t\tdataLabels: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\toption2.series.push({\n\t\t\t\tname: data[i].SnsrName + '-이상',\n\t\t\t\tdata: data[i].Abnormal_cnt,\n\t\t\t\tdataLabels: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\toption2.series.push({\n\t\t\t\tname: data[i].SnsrName + '-위험', color: '#FF0000',\n\t\t\t\tdata: data[i].Danger_cnt,\n\t\t\t\tdataLabels: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\t\tif (this.y < 0) {\n\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn Highcharts.numberFormat(this.y, 0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// option3\n\t\t\toption3.series.push({\n\t\t\t    name: data[i].SnsrName + '-H2O',\n\t\t\t    data: data[i].H2OMaxData,\n\t\t\t    dataLabels: {\n\t\t\t        enabled: false,\n\t\t\t        formatter: function () {\n\t\t\t            if (this.y < 0) {\n\t\t\t                return null;\n\t\t\t            } else {\n\t\t\t                return Highcharts.numberFormat(this.y, 2);\n\t\t\t            }\n\t\t\t        }\n\t\t\t    }\n\t\t\t});\n\t\t\toption3.series.push({\n\t\t\t    name: data[i].SnsrName + '-H2',\n\t\t\t    data: data[i].H2MaxData,\n\t\t\t    dataLabels: {\n\t\t\t        enabled: false,\n\t\t\t        formatter: function () {\n\t\t\t            if (this.y < 0) {\n\t\t\t                return null;\n\t\t\t            } else {\n\t\t\t                return Highcharts.numberFormat(this.y, 2);\n\t\t\t            }\n\t\t\t        }\n\t\t\t    }\n\t\t\t});\n    }\n\n\t\tsetChartData({\n\t\t\txSeries: series,\n\t\t\toption1 : option1,\n\t\t\toption2 : option2,\n\t\t\toption3 : option3,\n\t\t});\n\n\t}, [props.trendMtrDgaData]);\n\n  const zoomChart = (e) =>\n  {\n\t  if (searchFilter.period == \"day\") {\n\t\t  return;\n\t  }\n\n\t  let baseDate = searchFilter.fromDateZoom;\n\t  let minValue = Highcharts.numberFormat(e.xAxis[0].min, 0);\n\t  let maxValue = Highcharts.numberFormat(e.xAxis[0].max, 0);\n\n\t  // if (minValue === -0)\n\t  // \tminValue = 0;\n\t  // if (maxValue === -0)\n\t  // \tmaxValue = 0;\n\n\t  if ( searchFilter.period === \"year\") {\n\t\t  let currentMonth = baseDate.getMonth();\n\t\t  let fromDate = new Date(baseDate.getFullYear(), currentMonth + Number(minValue), 1, 0, 0, 0);\n\t\t  let toDate = new Date(baseDate.getFullYear(), currentMonth + Number(maxValue) + 1, 0, 23, 59, 59);\n\n\t\t  setSearchFilter({\n\t\t\t  ...searchFilter,\n\t\t\t  period: 'month',\n\t\t\t  fromDateZoom: fromDate,\n\t\t\t  toDateZoom: toDate,\n\t\t  });\n\n\t\t  props.getTrendMtrDga(\n\t\t\t  fromDate,\n\t\t\t  toDate,\n\t\t\t  searchFilter.eqipId,\n\t\t\t  searchFilter.snsrId,\n\t\t\t  'month',\n\t\t);\n\t  }\n\t  else if ( searchFilter.period === \"month\") {\n\t\t  let currentDate = baseDate.getDate();\n\t\t  let fromDate = new Date(baseDate.getFullYear(), baseDate.getMonth(), currentDate + Number(minValue), 0, 0, 0);\n\t\t  let toDate = new Date(baseDate.getFullYear(), baseDate.getMonth(), currentDate + Number(maxValue), 23, 59, 59);\n\n\t\t  setSearchFilter({\n\t\t\t  ...searchFilter,\n\t\t\t  period: 'day',\n\t\t\t  fromDateZoom: fromDate,\n\t\t\t  toDateZoom: toDate,\n\t\t  });\n\n\t\t\tprops.getTrendMtrDga(\n\t\t\t\tfromDate,\n\t\t\t\ttoDate,\n\t\t\t\tsearchFilter.eqipId,\n\t\t\t\tsearchFilter.snsrId,\n\t\t\t\t'day',\n\t\t\t);\n\t  }\n\n\t  return false; // Zoom Event 무효화\n  }\n\n\tuseEffect(() => {\n\t\tsearchFilterRef.current?.searchBtn();\n\t},[]);\n\n  return (\n    <>\n      <div className=\"contents-area\">\n        <section className=\"contents-header\">\n          <h2>유중가스 진단 경향</h2>\n          {/*<ol className=\"route\">*/}\n          {/*  <li><a href=\"\"><img src={require('assets/img/icon_home.svg').default}/>&nbsp;온수 변전소</a></li>*/}\n          {/*  <li><a href=\"\">MTR 설비별 진단 경향</a></li>*/}\n          {/*  <li><a href=\"\">유중가스 진단 경향</a></li>*/}\n          {/*</ol>*/}\n        </section>\n        <div className=\"container\">\n\t\t\t\t\t<div className=\"nav-index gap30\">\n\t\t  \t\t\t<TrendSearchFilter ref={searchFilterRef}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\teqipType={eqipType}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsnsrType={snsrType}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcallbackSearch={filterSearchCallback}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcallbackReset={filterResetCallback} />\n          </div>\n          <section className=\"gis-parts solo\">\n            <h2 className=\"gap-up-40 gap-down-30\">이벤트/알람 발생</h2>\n\t\t\t\t\t\t<div className=\"graph-container\">\n\t\t\t\t\t\t\t<HighchartLineDefault options={chartData.option1} />\n            </div>\n\n            <h2 className=\"gap-up-60 gap-down-30\">알람레벨별 건수</h2>\n            <div className=\"graph-container\">\n\t\t\t\t\t\t\t<HighchartLineDefault options={chartData.option2} />\n            </div>\n\n            <h2 className=\"gap-up-60 gap-down-30\">절연유 가스함유량</h2>\n            <div className=\"graph-container\">\n\t\t\t\t\t\t\t<HighchartLineDefault options={chartData.option3} />\n            </div>\n          </section>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ trendMtrDgaData }: IRootState) => ({\n\ttrendMtrDgaData: trendMtrDgaData.data,\n});\n\nconst mapDispatchToProps = {\n\tgetTrendMtrDga,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MtrDgaTrend);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\all\\all.tsx",["975","976","977","978","979","980"],"import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { Link } from 'react-router-dom';\nimport MtrAllEqipStatus from './all-eqip';\nimport MtrAllMtrSpdcStatus from './all-mtr-spdc';\nimport MtrAllOltcSpdcStatus from './all-oltc-spdc';\nimport MtrAllOltcOfuStatus from './all-oltc-ofu';\nimport MtrAllDgaStatus from './all-dga';\nimport MtrAllBushingStatus from './all-bushing';\n\nexport interface IMtrAllStatusProps extends StateProps, DispatchProps {}\n\nexport const MtrAllStatus = (props: IMtrAllStatusProps) => {\n\n  const [selectedType, setSelectedType] = useState('spdc');\n\n  const [eqipId, setEqipId] = useState(0);\n\n  return (\n    <>\n      <div className='contents-area'>\n        <section className='contents-header'>\n          <h2>MTR 설비 종합 현황</h2>\n          {/*<ol className='route'>*/}\n          {/*  <li><a href=''><i className='icon-home'></i>&nbsp;온수 변전소</a></li>*/}\n          {/*  <li><a href=''>MTR</a></li>*/}\n          {/*</ol>*/}\n        </section>\n        <div className='container'>\n          <section className='gis-all left'>\n            <div className='nav-sub-horizon gap50'>\n              <ul>\n                <li><a onClick={() => setSelectedType('spdc')} className={selectedType === 'spdc' ? 'on' : ''}>MTR 부분방전</a></li>\n                <li><a onClick={() => setSelectedType('oltc-spdc')} className={selectedType === 'oltc-spdc' ? 'on' : ''}>OLTC 부분방전</a></li>\n                <li><a onClick={() => setSelectedType('oltc-ofu')} className={selectedType === 'oltc-ofu' ? 'on' : ''}>OLTC 모터</a></li>\n                <li><a onClick={() => setSelectedType('dga')} className={selectedType === 'dga' ? 'on' : ''}>유중가스</a></li>\n                <li><a onClick={() => setSelectedType('bushing')} className={selectedType === 'bushing' ? 'on' : ''}>Bushing</a></li>\n              </ul>\n            </div>\n            {\n              selectedType === 'spdc' ?\n                <MtrAllMtrSpdcStatus eqipId={eqipId} /> :\n              selectedType === 'oltc-spdc' ?\n                <MtrAllOltcSpdcStatus eqipId={eqipId} /> :\n              selectedType === 'oltc-ofu' ?\n                <MtrAllOltcOfuStatus eqipId={eqipId} /> :\n              selectedType === 'dga' ?\n                <MtrAllDgaStatus eqipId={eqipId} /> :\n              selectedType === 'bushing' ?\n                <MtrAllBushingStatus eqipId={eqipId} /> : ''\n            }\n          </section>\n          <section className=\"gis-all right\">\n            <MtrAllEqipStatus eqipIdReturnCallback={(eqipId) => setEqipId(eqipId)} />\n          </section>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ authentication }: IRootState) => ({\n  // isAuthenticated: authentication.isAuthenticated,\n  // isAdmin: hasAnyAuthority(authentication.account.authorities, [AUTHORITIES.ADMIN]),\n});\n\nconst mapDispatchToProps = {\n  // getSession\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MtrAllStatus);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\history\\setting-history.tsx",["981","982","983","984","985","986"],"import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport moment from 'moment';\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\nimport Pager from '../../../shared/component/pager/Pager';\nimport settingHistory, { getSettingHistory } from './setting-history.reducer';\nimport SelectBox from '../../../shared/component/control/select-box';\n\nexport interface ISettingHistoryProps extends StateProps, DispatchProps {}\n\nexport const SettingHistory = (props: ISettingHistoryProps) => {\n\n  const listCountRef = useRef(null);\n  const [searchFilter, setSearchFilter] = useState({\n    fromDate: moment(),\n    toDate: moment(),\n    eqipId: '0',      // 설비 ID\n    snsrId: '0',      // 센서 ID\n  })\n  const [pageInfo, setPageInfo] = useState({\n    activePageEvent: 1,\n    itemsCountPerPage: 10,\n  });\n\n  useEffect(() => {\n  }, []);\n\n  useEffect(() => {\n    searchSettingHistory();\n  }, [pageInfo]);\n\n  const searchSettingHistory = () => {\n    props.getSettingHistory(\n      searchFilter.fromDate,\n      searchFilter.toDate,\n      searchFilter.eqipId,\n      searchFilter.snsrId,\n      pageInfo.activePageEvent,\n      pageInfo.itemsCountPerPage\n    )\n  }\n\n  return (\n    <>\n      <div className='contents-area none-aside setting'>\n        <section className='contents-header none-border'>\n          <h2>설정 변경자 확인</h2>\n          {/*<ol className='route'>*/}\n          {/*  <li><a href=''><img src={require('assets/img/icon_home.svg').default} />&nbsp;온수 변전소</a></li>*/}\n          {/*  <li><a href=''>설정</a></li>*/}\n          {/*  <li><a href=''>설정 변경자 확인</a></li>*/}\n          {/*</ol>*/}\n        </section>\n        <div className='container'>\n          <section className='gis-parts solo'>\n            <div className='section-box'>\n              <div className='nav-index'>\n                <div className='obj-wrapper'>\n                  <ul>\n                    <li className='obj-term width-2'>\n                      <span>시작 일시</span>\n                      <div className='obj-calendar'>\n                        <i className='icon-calendar'></i>\n                        <DateRangePicker\n                          onApply={(event, picker) => {\n                            setSearchFilter({\n                              ...searchFilter,\n                              fromDate: picker.startDate,\n                            });\n                          }}\n                          initialSettings={{\n                            singleDatePicker: true,\n                            timePicker: true,\n                            timePicker24Hour: true,\n                            startDate: moment().startOf('hour'),\n                            endDate: moment().startOf('hour').add(32, 'hour'),\n                            locale: {\n                              format: 'YYYY-MM-DD hh:mm A',\n                            },\n                          }}>\n                          <input type='text' name='datetimes' />\n                        </DateRangePicker>\n                      </div>\n                    </li>\n                    <li className='obj-term width-2'>\n                      <span>종료 일시</span>\n                      <div className='obj-calendar'>\n                        <i className='icon-calendar'></i>\n                        <DateRangePicker\n                          onApply={(event, picker) => {\n                            setSearchFilter({\n                              ...searchFilter,\n                              fromDate: picker.startDate,\n                            });\n                          }}\n                          initialSettings={{\n                            singleDatePicker: true,\n                            timePicker: true,\n                            timePicker24Hour: true,\n                            startDate: moment().startOf('hour'),\n                            endDate: moment().startOf('hour').add(32, 'hour'),\n                            locale: {\n                              format: 'YYYY-MM-DD hh:mm A',\n                            },\n                          }}>\n                          <input type='text' name='datetimes' />\n                        </DateRangePicker>\n                      </div>\n                    </li>\n                    <li className='width-15'>\n                      <span>설비</span>\n                      <SelectBox defaultValue={searchFilter.eqipId} elementName=\"equipmentList\" placeholder=\"설비\"\n                                 options={[\n                                   {key: '0', value: '전체'},\n                                   ...props.equipmentList.map(eqip => {\n                                     return {key: eqip.ID, value: eqip.EQIP_NM};\n                                   })\n                                 ]}\n                                 callback={(args) => setSearchFilter({...searchFilter, eqipId: args.selected, snsrId: '0'})} />\n                    </li>\n                    <li className='width-15'>\n                      <span>센서</span>\n                      <SelectBox defaultValue={searchFilter.snsrId} elementName=\"snsrList\" placeholder=\"센서\"\n                                 options={[\n                                   {key: '0', value: '전체'},\n                                   ...props.allSensorList\n                                     .filter(sensor => {  // 설비가 선택되지 않으면 모두 리턴, 선택되면 하위의 센서만 리턴\n                                       return searchFilter.eqipId == '0' ? true : sensor.EQIP_ID == searchFilter.eqipId;\n                                     })\n                                     .map(sensor => {\n                                       return {key: sensor.ID, value: sensor.SNSR_NM};\n                                     })\n                                 ]}\n                                 callback={(args) => setSearchFilter({...searchFilter, snsrId: args.selected})} />\n                    </li>\n                    <li className=''><span>&nbsp;</span>\n                      <div style={{ marginTop: '5px' }}>\n                        <a className='btn submit' onClick={() => setPageInfo({...pageInfo, activePageEvent: 1})}>조회</a>\n                      </div>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n              <div className='contents-table'>\n                <div className='contents-tabmenu' style={{ marginTop: '-25px' }}>\n                  <div className='obj-select option'>\n                    <form className='select-cover'>\n                      <div className='select-box'>\n                        <input type='checkbox' id=\"select-setting-history\" ref={listCountRef} />\n                        <label className='select small' htmlFor='select-setting-history'>{pageInfo.itemsCountPerPage}</label>\n                        <div className='option small'>\n                          {\n                            [10, 25, 50, 100].map((value, index) =>\n                              <a key={index}\n                                 onClick={() => {\n                                   setPageInfo({...pageInfo, itemsCountPerPage: value});\n                                   listCountRef.current.checked = false;\n                                 }}\n                              >{value}</a>\n                            )\n                          }\n                        </div>\n                      </div>\n                    </form>\n                  </div>\n                </div>\n                <table className='table-db'>\n                  <colgroup>\n                    {/*<col style={{ width: '150px' }} />*/}\n                    <col style={{ width: '150px' }} />\n                    <col style={{ width: '150px' }} />\n                    <col style={{ width: '150px' }} />\n                    <col style={{ width: '' }} />\n                    <col style={{ width: '150px' }} />\n                    <col style={{ width: '150px' }} />\n                    <col style={{ width: '250px' }} />\n                  </colgroup>\n                  <thead>\n                  <tr>\n                    {/*<th>변전소명</th>*/}\n                    <th>설비명</th>\n                    <th>센서명</th>\n                    <th>센서 구분</th>\n                    <th>설정명</th>\n                    <th>설정값</th>\n                    <th>변경자 ID</th>\n                    <th>변경일자</th>\n                  </tr>\n                  </thead>\n                  <tbody>\n                  {\n                    props.settingHistoryList.length ?\n                      props.settingHistoryList.map((history, index) => {\n                        return (\n                          <tr key={index}>\n                            {/*<td><span>방어진변전소</span></td>*/}\n                            <td><span>{history.EQIP_NM}</span></td>\n                            <td><span>{history.SNSR_NM}</span></td>\n                            <td><span>{history.SNSR_KIND}</span></td>\n                            <td><span>{history.SET_NAME}</span></td>\n                            <td><span>{history.SET_VALUE}</span></td>\n                            <td><span>{history.USER_ID}</span></td>\n                            <td><span>{moment(history.LAST_UPDATE_TIME).format('YYYY-MM-DD HH:mm:ss')}</span></td>\n                          </tr>\n                        )\n                      })\n                      :\n                      <tr>\n                        <td colSpan={8}><span>데이터가 없습니다. (2021.08.01 조회시 데이터 있음)</span></td>\n                      </tr>\n                  }\n                  </tbody>\n                </table>\n                <Pager\n                  handlePageChange={(newPage) => setPageInfo({...pageInfo, activePageEvent:newPage})}\n                  activePage={pageInfo.activePageEvent}\n                  totalItemsCount={props.settingHistoryListTotalCount}\n                  itemsCountPerPage={pageInfo.itemsCountPerPage}\n                />\n              </div>\n            </div>\n          </section>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ settingHistory, substation }: IRootState) => ({\n  settingHistoryList: settingHistory.settingHistoryList,\n  settingHistoryListTotalCount: settingHistory.settingHistoryListTotalCount,\n  equipmentList: substation.equipmentList,\n  allSensorList: substation.allSensorList,\n});\n\nconst mapDispatchToProps = {\n  getSettingHistory\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingHistory);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\user\\user-mgmt.tsx",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\setup\\pd\\setup-pd.tsx",["987","988","989","990","991","992","993","994","995","996","997"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { Link } from 'react-router-dom';\nimport setupPd, { getSettingPD, resetSettingPD } from './setup-pd.reducer';\nimport { setSettingAdd, setSettingsUpdate, setSettingUpdate } from '../../../../shared/reducers/setup';\nimport { getAllSensorList } from '../../../../shared/reducers/substation';\n\nexport interface ISetupPdProps extends StateProps, DispatchProps {\n}\n\nexport const SetupPd = (props: ISetupPdProps) => {\n\n  const [willUpdateSettings, setWillUpdateSettings] = useState(new Map());\n\n  useEffect(() => {\n    props.getSettingPD();\n  }, []);\n\n  const dummyChange = (snsrId, set_comm_cd, setValue) => {\n    const nextSettings = new Map(willUpdateSettings);\n    nextSettings.set(JSON.stringify({ snsrId: snsrId, set_comm_cd: set_comm_cd }), setValue);\n    setWillUpdateSettings(nextSettings);\n  }\n\n  const updatePdSettings = async () => {\n    await props.setSettingsUpdate(willUpdateSettings);\n    await props.resetSettingPD();\n    await props.getSettingPD();\n  }\n\n  //PD 센서 설정 이벤트 페이지 변경\n\n  return (\n    <>\n      <div className=\"contents-area none-aside setting\">\n        <section className=\"contents-header none-border\">\n          <h2>PD 센서 설정</h2>\n          {/*<ol className=\"route\">*/}\n          {/*  <li><a href=\"\"><img src={require('assets/img/icon_home.svg').default}/>&nbsp;온수 변전소</a></li>*/}\n          {/*  <li><a href=\"\">설정</a></li>*/}\n          {/*  <li><a href=\"\">설비별 환경설정</a></li>*/}\n          {/*</ol>*/}\n        </section>\n        <div className='container'>\n          <section className='gis-parts solo'>\n            <nav className='sub-setup'>\n              <ul>\n                <li className={'on'}><Link to={'/settings/setup/set-pd'}>PD 센서 설정</Link></li>\n                <li><Link to={'/settings/setup/set-scbr'}>차단기 센서 설정</Link></li>\n                <li><Link to={'/settings/setup/set-oltc'}>OLTC 센서 설정</Link></li>\n                <li><Link to={'/settings/setup/set-bushing'}>Bushing 센서 설정</Link></li>\n                <li><Link to={'/settings/setup/set-dga'}>DGA 센서 설정</Link></li>\n              </ul>\n            </nav>\n            <div className='section-box setup'>\n              {/* // 디자인 페이지에는 없는 내용이나\n                      필요할것 같아서 마크업만 삽입해두었습니다.\n                   // 사용할 경우 주석 해제해서 쓰시면 됩니다.\n              <div class=\"nav-index\">\n                  <div class=\"obj-wrapper\">\n                      <ul>\n                          <li class=\"width-15\">\n                              <span>LU 선택</span>\n                              <select class=\"lookup\">\n                                  <option value=\"1\">GLU01</option>\n                                  <option value=\"2\">GLU02</option>\n                                  <option value=\"3\">GLU03</option>\n                                  <option value=\"4\">GLU04</option>\n                                  <option value=\"5\">MLU01-1</option>\n                                  <option value=\"6\">MLU02-1</option>\n                                  <option value=\"7\">MLU03-1</option>\n                              </select>\n                          </li>\n                          <li class=\"width-15\">\n                              <span>센서 선택</span>\n                              <select class=\"lookup\">\n                                  <option value=\"1\">GPD-01</option>\n                                  <option value=\"3\">GPD-02</option>\n                                  <option value=\"4\">GPD-04</option>\n                                  <option value=\"5\">GPD-05</option>\n                                  <option value=\"6\">GPD-07</option>\n                              </select>\n                          </li>\n                          <li class=\"width-15\">\n                              <span>노이즈 센서명 선택</span>\n                              <select class=\"lookup\">\n                                  <option value=\"216\">GLU01 : EGB-FR-11</option>\n                                  <option value=\"217\">GLU01 : EBG-FR-12</option>\n                                  <option value=\"218\">GLU01 : EBG-FR-10</option>\n                                  <option value=\"9\">GLU01 : GPD-NS-01</option>\n                              </select>\n                          </li>\n                          <li class=\"\"><span>&nbsp;</span>\n                              <div class=\"\" style=\"margin-top: 5px;\"><a class=\"btn submit\" href=\"\">조회</a></div>\n                          </li>\n                      </ul>\n                  </div>\n              </div>\n              */}\n              <div className='contents-table'>\n                <div className='contents-tabmenu'>\n                  <h2>부분방전 신호발생 판단기준</h2>\n                </div>\n                <div className='setup-table-wrapper'>\n                  <table className='table-db setup'>\n                    <colgroup>\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: '170px' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: '170px' }} />\n                      <col style={{ minWidth: '170px' }} />\n                      <col style={{ minWidth: '170px' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: '170px' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: '90px' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: '180px' }} />\n                      <col style={{ minWidth: '180px' }} />\n                    </colgroup>\n                    <thead>\n                    <tr>\n                      <th>LU</th>\n                      <th>센서명</th>\n                      <th>노이즈 센서</th>\n                      <th>NG 사용여부</th>\n                      <th>dBm Offset</th>\n                      <th>1시간 수가(이상)</th>\n                      <th>24시간 수가 A(이상)</th>\n                      <th>24시간 수가 B(이상)</th>\n                      <th>노이즈 포함</th>\n                      <th>펄스 임계치(이하)</th>\n                      <th>1초 횟수</th>\n                      <th>AS</th>\n                      <th>Phase shift</th>\n                      <th>PPS 문턱값 초과(dbm)</th>\n                      <th>PPS 횟수 초과(횟수)</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {\n                      props.pdSettingList.map((event, index) => (\n                        <tr key={index}>\n                          <td>\n                            <span>{event.SNSR_LOC_NM}</span>\n                          </td>\n                          <td>\n                            <span>{event.SNSR_NM}</span>\n                          </td>\n                          <td>\n                            <span>\n                              <select className=\"optional\" defaultValue={event.NOISE_SENSOR_001334?.SET_VALUE}\n                                      onChange={(e) => {\n                                        let selectedOption = e.target.options[e.target.options.selectedIndex];\n                                        dummyChange(event.SNSR_ID, '001334', selectedOption.value);\n                                        if (event.NOISE_SENSOR_001334?.SET_VALUE != selectedOption.value) {\n                                          e.target.style.backgroundColor = 'darkgray';\n                                        } else {\n                                          e.target.style.backgroundColor = 'white';\n                                        }\n                                      }}>\n                                {\n                                  props.allSensorList.filter(s => s.SNSR_TYPE + '' === '1')\n                                    .map((sensor, index) =>\n                                      <option key={index} value={sensor.ID}>{sensor.DEVICE_NM + ':' + sensor.SNSR_NM}</option>\n                                    )\n                                }\n                              </select>\n                            </span>\n                          </td>\n                          <td>\n                            <span>\n                              <select className=\"optional\" defaultValue={event.NOISEGATE_USE_TF_001330?.SET_VALUE}\n                                      onChange={(e) => {\n                                        let selectedOption = e.target.options[e.target.options.selectedIndex];\n                                        dummyChange(event.SNSR_ID, '001330', selectedOption.value);\n                                        if (event.NOISEGATE_USE_TF_001330?.SET_VALUE != selectedOption.value) {\n                                          e.target.style.backgroundColor = 'darkgray';\n                                        } else {\n                                          e.target.style.backgroundColor = 'white';\n                                        }\n                                      }}>\n                                <option value=\"\">선택</option>\n                                <option value=\"0\">미사용</option>\n                                <option value=\"1\">사용</option>\n                              </select>\n                            </span>\n                          </td>\n                          <td>\n                            <span><input type=\"text\" defaultValue={event.DBM_OFFSET_001332?.SET_VALUE}\n                                         onChange={(e) => {\n                                           dummyChange(event.SNSR_ID, '001332', e.target.value);\n                                           if (event.DBM_OFFSET_001332?.SET_VALUE != e.target.value) {\n                                             e.target.style.backgroundColor = 'darkgray';\n                                           } else {\n                                             e.target.style.backgroundColor = 'white';\n                                           }\n                                         }}/></span>\n                          </td>\n                          <td>\n                            <span><input type=\"text\" defaultValue={event.HOUR1_001397?.SET_VALUE}\n                                         onChange={(e) => {\n                                           dummyChange(event.SNSR_ID, '001397', e.target.value);\n                                           if (event.HOUR1_001397?.SET_VALUE != e.target.value) {\n                                             e.target.style.backgroundColor = 'darkgray';\n                                           } else {\n                                             e.target.style.backgroundColor = 'white';\n                                           }\n                                         }}/></span>\n                          </td>\n                          <td>\n                            <span><input type=\"text\" defaultValue={event.HOUR24_A_001398?.SET_VALUE}\n                                         onChange={(e) => {\n                                           dummyChange(event.SNSR_ID, '001398', e.target.value);\n                                           if (event.HOUR24_A_001398?.SET_VALUE != e.target.value) {\n                                             e.target.style.backgroundColor = 'darkgray';\n                                           } else {\n                                             e.target.style.backgroundColor = 'white';\n                                           }\n                                         }}/></span>\n                          </td>\n                          <td>\n                            <span><input type=\"text\" defaultValue={event.HOUR24_B_001399?.SET_VALUE}\n                                         onChange={(e) => {\n                                           dummyChange(event.SNSR_ID, '001399', e.target.value);\n                                           if (event.HOUR24_B_001399?.SET_VALUE != e.target.value) {\n                                             e.target.style.backgroundColor = 'darkgray';\n                                           } else {\n                                             e.target.style.backgroundColor = 'white';\n                                           }\n                                         }}/></span>\n                          </td>\n                          <td>\n                            <span><input type=\"text\" defaultValue={event.NOISE_ALARM_TF_001396?.SET_VALUE}\n                                         onChange={(e) => {\n                                           dummyChange(event.SNSR_ID, '001396', e.target.value);\n                                           if (event.NOISE_ALARM_TF_001396?.SET_VALUE != e.target.value) {\n                                             e.target.style.backgroundColor = 'darkgray';\n                                           } else {\n                                             e.target.style.backgroundColor = 'white';\n                                           }\n                                         }}/></span>\n                          </td>\n                          <td>\n                            <span><input type=\"text\" defaultValue={event.PULSE}\n                                         onChange={(e) => {\n                                           dummyChange(event.SNSR_ID, '001330', e.target.value);\n                                           if (event.PULSE != e.target.value) {\n                                             e.target.style.backgroundColor = 'darkgray';\n                                           } else {\n                                             e.target.style.backgroundColor = 'white';\n                                           }\n                                         }}/></span>\n                          </td>\n                          <td>\n                            <span>1초 횟수</span>\n                          </td>\n                          <td>\n                            <span>AS</span>\n                          </td>\n                          <td>\n                            <span>Phase shift</span>\n                          </td>\n                          <td>\n                            <span> PPS 문턱값 초과(dbm)</span>\n                          </td>\n                          <td>\n                            <span> PPS 횟수 초과(횟수)</span>\n                          </td>\n                        </tr>\n                      ))\n                    }\n                    </tbody>\n                  </table>\n                </div>\n                <br/>\n                <button className=\"btn save\" type=\"button\" onClick={updatePdSettings}>저장</button>\n              </div>\n            </div>\n          </section>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ setupPd, substation }: IRootState) => ({\n  pdSettingList: setupPd.pdSettingList,\n  allSensorList: substation.allSensorList,\n});\n\nconst mapDispatchToProps = {\n  resetSettingPD,\n  getSettingPD,\n  setSettingAdd,\n  setSettingUpdate,\n  setSettingsUpdate,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SetupPd);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\setup\\scbr\\setup-scbr.tsx",["998","999","1000","1001","1002","1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { Link } from 'react-router-dom';\nimport { getSettingScbr, resetSettingScbr } from './setup-scbr.reducer';\nimport { setSettingsUpdate } from '../../../../shared/reducers/setup';\n\nexport interface ISetupScbrProps extends StateProps, DispatchProps {}\n\nexport const SetupScbr = (props: ISetupScbrProps) => {\n\n  const [willUpdateSettings, setWillUpdateSettings] = useState(new Map());\n\n  useEffect(() => {\n    props.getSettingScbr();\n  }, []);\n\n  const pushUpdateSettings = (snsrId, set_comm_cd, setValue) => {\n    const nextSettings = new Map(willUpdateSettings);\n    nextSettings.set(JSON.stringify({ snsrId: snsrId, set_comm_cd: set_comm_cd }), setValue);\n    setWillUpdateSettings(nextSettings);\n  }\n\n  const updateScbrSettings = async () => {\n    await props.setSettingsUpdate(willUpdateSettings);\n    await props.resetSettingScbr();\n    await props.getSettingScbr();\n  }\n\n  return (\n    <>\n      <div className='contents-area none-aside setting'>\n        <section className='contents-header none-border'>\n          <h2>차단기 센서 설정</h2>\n          {/*<ol className='route'>*/}\n          {/*  <li><a href=''><img src={require('assets/img/icon_home.svg').default} />&nbsp;온수 변전소</a></li>*/}\n          {/*  <li><a href=''>설정</a></li>*/}\n          {/*  <li><a href=''>설비별 환경설정</a></li>*/}\n          {/*</ol>*/}\n        </section>\n        <div className='container'>\n          <section className='gis-parts solo'>\n            <nav className='sub-setup'>\n              <ul>\n                <li><Link to={'/settings/setup/set-pd'}>PD 센서 설정</Link></li>\n                <li className={'on'}><Link to={'/settings/setup/set-scbr'}>차단기 센서 설정</Link></li>\n                <li><Link to={'/settings/setup/set-oltc'}>OLTC 센서 설정</Link></li>\n                <li><Link to={'/settings/setup/set-bushing'}>Bushing 센서 설정</Link></li>\n                <li><Link to={'/settings/setup/set-dga'}>DGA 센서 설정</Link></li>\n              </ul>\n            </nav>\n            <div className='section-box setup'>\n              <div className='contents-table'>\n                <div className='contents-tabmenu'>\n                  <h2>차단기 진단 판단기준</h2>\n                </div>\n                <div className='setup-table-wrapper'>\n                  <table className='table-db setup'>\n                    <thead>\n                    <tr className='border-right'>\n                      <th colSpan={6}>&nbsp;</th>\n                      <th colSpan={3}>Close (투입)</th>\n                      <th colSpan={3}>Trip (개극)</th>\n                      <th colSpan={3}>Close 여자</th>\n                      <th colSpan={3}>Trip_1</th>\n                      <th colSpan={5}>Trip_2</th>\n                    </tr>\n                    <tr className='border-right'>\n                      <th>LU</th>\n                      <th>센서명</th>\n                      <th>진단 주기</th>\n                      <th>차단전류</th>\n                      <th>초기화</th>\n                      <th>SCADA</th>\n                      <th>기준ms</th>\n                      <th>최대(%)</th>\n                      <th>요주의ms</th>\n                      <th>기준ms</th>\n                      <th>최대(%)</th>\n                      <th>요주의ms</th>\n                      <th>기준ms</th>\n                      <th>최대(%)</th>\n                      <th>요주의ms</th>\n                      <th>기준ms</th>\n                      <th>최대(%)</th>\n                      <th>요주의ms</th>\n                      <th>기준ms</th>\n                      <th>최대(%)</th>\n                      <th>요주의ms</th>\n                      <th>개리차 Close</th>\n                      <th>개리차 Trip</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {\n                      props.scbrSettingList\n                        .map((scbr, index) => (\n                          <tr key={index}>\n                            <td><span>{scbr.SNSR_ID}</span></td>\n                            <td><span>{scbr.SNSR_NM}</span></td>\n                            <td><span>{scbr.SNSR_LOC_NM}</span></td>\n                            <td><input type=\"text\" defaultValue={scbr.CT_RATIO_001491?.SET_VALUE}\n                                       onChange={(e) => {\n                                         pushUpdateSettings(scbr.SNSR_ID, '001491', e.target.value);\n                                         if (scbr.CT_RATIO_001491?.SET_VALUE != e.target.value) {\n                                           e.target.style.backgroundColor = 'darkgray';\n                                         } else {\n                                           e.target.style.backgroundColor = 'white';\n                                         }\n                                       }}/></td>\n                            <td><input type=\"text\" defaultValue={scbr.ALARM_INIT_001469?.SET_VALUE}\n                                       onChange={(e) => {\n                                         pushUpdateSettings(scbr.SNSR_ID, '001469', e.target.value);\n                                         if (scbr.ALARM_INIT_001469?.SET_VALUE != e.target.value) {\n                                           e.target.style.backgroundColor = 'darkgray';\n                                         } else {\n                                           e.target.style.backgroundColor = 'white';\n                                         }\n                                       }}/></td>\n                            <td><input type=\"text\" defaultValue={scbr.SCADA_ALARM_001470?.SET_VALUE}\n                                       onChange={(e) => {\n                                         pushUpdateSettings(scbr.SNSR_ID, '001470', e.target.value);\n                                         if (scbr.SCADA_ALARM_001470?.SET_VALUE != e.target.value) {\n                                           e.target.style.backgroundColor = 'darkgray';\n                                         } else {\n                                           e.target.style.backgroundColor = 'white';\n                                         }\n                                       }}/></td>\n                            <td><input type=\"text\" defaultValue={scbr.Close_std_001470?.SET_VALUE}\n                                       onChange={(e) => {\n                                         pushUpdateSettings(scbr.SNSR_ID, '001470', e.target.value);\n                                         if (scbr.Close_std_001470?.SET_VALUE != e.target.value) {\n                                           e.target.style.backgroundColor = 'darkgray';\n                                         } else {\n                                           e.target.style.backgroundColor = 'white';\n                                         }\n                                       }}/></td>\n                            <td><input type=\"text\" defaultValue={scbr.Close_Over_001473?.SET_VALUE}\n                                       onChange={(e) => {\n                                         pushUpdateSettings(scbr.SNSR_ID, '001473', e.target.value);\n                                         if (scbr.Close_Over_001473?.SET_VALUE != e.target.value) {\n                                           e.target.style.backgroundColor = 'darkgray';\n                                         } else {\n                                           e.target.style.backgroundColor = 'white';\n                                         }\n                                       }}/></td>\n                            <td><input type='text' value='00' /></td>\n                            <td><input type=\"text\" defaultValue={scbr.Trip_std_001472?.SET_VALUE}\n                                       onChange={(e) => {\n                                         pushUpdateSettings(scbr.SNSR_ID, '001472', e.target.value);\n                                         if (scbr.Trip_std_001472?.SET_VALUE != e.target.value) {\n                                           e.target.style.backgroundColor = 'darkgray';\n                                         } else {\n                                           e.target.style.backgroundColor = 'white';\n                                         }\n                                       }}/></td>\n                            <td><input type=\"text\" defaultValue={scbr.Trip_Over_001474?.SET_VALUE}\n                                       onChange={(e) => {\n                                         pushUpdateSettings(scbr.SNSR_ID, '001474', e.target.value);\n                                         if (scbr.Trip_Over_001474?.SET_VALUE != e.target.value) {\n                                           e.target.style.backgroundColor = 'darkgray';\n                                         } else {\n                                           e.target.style.backgroundColor = 'white';\n                                         }\n                                       }}/></td>\n                            <td><input type='text' value='00' /></td>\n                            <td><input type=\"text\" defaultValue={scbr.Close_Excitation_std_001422?.SET_VALUE}\n                                       onChange={(e) => {\n                                         pushUpdateSettings(scbr.SNSR_ID, '001422', e.target.value);\n                                         if (scbr.Close_Excitation_std_001422?.SET_VALUE != e.target.value) {\n                                           e.target.style.backgroundColor = 'darkgray';\n                                         } else {\n                                           e.target.style.backgroundColor = 'white';\n                                         }\n                                       }}/></td>\n                            <td><input type=\"text\" defaultValue={scbr.Close_Excitation_Over_001423?.SET_VALUE}\n                                       onChange={(e) => {\n                                         pushUpdateSettings(scbr.SNSR_ID, '001423', e.target.value);\n                                         if (scbr.Close_Excitation_Over_001423?.SET_VALUE != e.target.value) {\n                                           e.target.style.backgroundColor = 'darkgray';\n                                         } else {\n                                           e.target.style.backgroundColor = 'white';\n                                         }\n                                       }}/></td>\n                            <td><input type='text' value='00' /></td>\n                            <td><input type=\"text\" defaultValue={scbr.Trip1_Excitation_std_001414?.SET_VALUE}\n                                       onChange={(e) => {\n                                         pushUpdateSettings(scbr.SNSR_ID, '001414', e.target.value);\n                                         if (scbr.Trip1_Excitation_std_001414?.SET_VALUE != e.target.value) {\n                                           e.target.style.backgroundColor = 'darkgray';\n                                         } else {\n                                           e.target.style.backgroundColor = 'white';\n                                         }\n                                       }}/></td>\n                            <td><input type=\"text\" defaultValue={scbr.Trip1_Excitation_Over_001415?.SET_VALUE}\n                                       onChange={(e) => {\n                                         pushUpdateSettings(scbr.SNSR_ID, '001415', e.target.value);\n                                         if (scbr.Trip1_Excitation_Over_001415?.SET_VALUE != e.target.value) {\n                                           e.target.style.backgroundColor = 'darkgray';\n                                         } else {\n                                           e.target.style.backgroundColor = 'white';\n                                         }\n                                       }}/></td>\n                            <td><input type='text' value='00' /></td>\n                            <td><input type=\"text\" defaultValue={scbr.Trip2_Excitation_std_001418?.SET_VALUE}\n                                       onChange={(e) => {\n                                         pushUpdateSettings(scbr.SNSR_ID, '001418', e.target.value);\n                                         if (scbr.Trip2_Excitation_std_001418?.SET_VALUE != e.target.value) {\n                                           e.target.style.backgroundColor = 'darkgray';\n                                         } else {\n                                           e.target.style.backgroundColor = 'white';\n                                         }\n                                       }}/></td>\n                            <td><input type=\"text\" defaultValue={scbr.Trip2_Excitation_Over_001419?.SET_VALUE}\n                                       onChange={(e) => {\n                                         pushUpdateSettings(scbr.SNSR_ID, '001419', e.target.value);\n                                         if (scbr.Trip2_Excitation_Over_001419?.SET_VALUE != e.target.value) {\n                                           e.target.style.backgroundColor = 'darkgray';\n                                         } else {\n                                           e.target.style.backgroundColor = 'white';\n                                         }\n                                       }}/></td>\n                            <td><input type='text' value='00' /></td>\n                            <td><input type=\"text\" defaultValue={scbr.Gap_Close_001481?.SET_VALUE}\n                                       onChange={(e) => {\n                                         pushUpdateSettings(scbr.SNSR_ID, '001481', e.target.value);\n                                         if (scbr.Gap_Close_001481?.SET_VALUE != e.target.value) {\n                                           e.target.style.backgroundColor = 'darkgray';\n                                         } else {\n                                           e.target.style.backgroundColor = 'white';\n                                         }\n                                       }}/></td>\n                            <td><input type=\"text\" defaultValue={scbr.Gap_Trip_001482?.SET_VALUE}\n                                       onChange={(e) => {\n                                         pushUpdateSettings(scbr.SNSR_ID, '001482', e.target.value);\n                                         if (scbr.Gap_Trip_001482?.SET_VALUE != e.target.value) {\n                                           e.target.style.backgroundColor = 'darkgray';\n                                         } else {\n                                           e.target.style.backgroundColor = 'white';\n                                         }\n                                       }}/></td>\n                          </tr>\n                        ))\n                    }\n                    </tbody>\n                  </table>\n                </div>\n                <button className='btn save' type='button' onClick={updateScbrSettings}>저장</button>\n              </div>\n            </div>\n          </section>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ setupScbr, substation }: IRootState) => ({\n  scbrSettingList: setupScbr.scbrSettingList,\n  allSensorList: substation.allSensorList,\n});\n\nconst mapDispatchToProps = {\n  getSettingScbr,\n  resetSettingScbr,\n  setSettingsUpdate,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SetupScbr);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\setup\\eqip\\setup-mtr.tsx",["1014","1015"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { getSldGisMtrLocation, getSldGisMtrUse } from '../../../main/diagram.reducer';\nimport SetupMtrPositionModule from './setup-mtr-position-module';\nimport SetupMtrTableModule from './setup-mtr-table-module';\n\nexport interface ISetupMtrProps extends StateProps, DispatchProps {}\n\nexport const SetupMtr = (props: ISetupMtrProps) => {\n\n  useEffect(() => {\n    searchMtrData();\n  }, []);\n\n  const mtrUpdateCallback = () => {\n    searchMtrData();\n  }\n\n  /**\n   * 화면에서 사용할 기본 데이터 로드\n   */\n  const searchMtrData = () => {\n    props.getSldGisMtrUse();\n    props.getSldGisMtrLocation(); // SetupGisModule 컴포넌트 내부에서 리덕스 데이터 사용위해 호출\n  }\n\n  return (\n    <>\n      <div className=\"contents-area none-aside setting\">\n        <section className=\"contents-header none-border\">\n          <h2>MTR 센서위치/표 설정</h2>\n          {/*<ol className=\"route\">*/}\n          {/*  <li><a href=\"\"><i className=\"icon-home\"></i>&nbsp;온수 변전소</a></li>*/}\n          {/*  <li><a href=\"\">설정</a></li>*/}\n          {/*  <li><a href=\"\">MTR 표 설정</a></li>*/}\n          {/*</ol>*/}\n        </section>\n        <div className=\"container\">\n          <section className=\"gis-parts solo\">\n            <div className=\"section-box\">\n              <div className=\"contents-table\">\n                <div className=\"gis-table-wrap mtr-table-wrap\">\n                  {/* 센서 위치 */}\n                  <div className=\"tbl-row\">\n                    {\n                      props.gisMtrUse\n                        .filter(mtr => mtr.GIS_MTR === 'MTR')\n                        .map((mtr, index) => {\n                          return <SetupMtrPositionModule key={index} mtr={mtr} updateCallback={mtrUpdateCallback} />;\n                        })\n                    }\n                  </div>\n                  {/* MTR 테이블 정보 */}\n                  <div className=\"tbl-row\">\n                    {\n                      props.gisMtrUse\n                        .filter(mtr => mtr.GIS_MTR === 'MTR')\n                        .map((mtr, index) => {\n                          return <SetupMtrTableModule key={index} mtr={mtr} updateCallback={mtrUpdateCallback} />;\n                        })\n                    }\n                  </div>\n                </div>\n              </div>\n            </div>\n          </section>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ diagram }: IRootState) => ({\n  gisMtrUse: diagram.gisMtrUse,\n});\n\nconst mapDispatchToProps = {\n  getSldGisMtrUse,\n  getSldGisMtrLocation,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SetupMtr);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\setup\\eqip\\setup-gis.tsx",["1016","1017","1018"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport SetupGisModule from './setup-gis-module';\nimport { getSldGisMtrLocation, getSldGisMtrUse } from '../../../main/diagram.reducer';\nimport { setSldGis } from './eqip.reducer';\n\nexport interface ISetupGisProps extends StateProps, DispatchProps {}\n\nexport const SetupGis = (props: ISetupGisProps) => {\n\n  useEffect(() => {\n    searchGisData();\n  }, []);\n\n  const gisUpdateCallback = () => {\n    searchGisData();\n    updateGisSecondRow();\n  }\n\n  /**\n   * 화면에서 사용할 기본 데이터 로드\n   */\n  const searchGisData = () => {\n    props.getSldGisMtrUse();\n    props.getSldGisMtrLocation(); // SetupGisModule 컴포넌트 내부에서 리덕스 데이터 사용위해 호출\n  }\n\n  /**\n   * GIS 두번째 Row 사용여부 업데이트\n   */\n  const updateGisSecondRow = () => {\n    let useGisSecondRow = false;\n    props.gisMtrUse\n      .filter(gis => parseInt(gis.GIS_MTR_NUM) >= 19)\n      .map(gis => {\n        if (gis.USE_YN) {\n          useGisSecondRow = true;\n        }\n      });\n    props.setSldGis(2, useGisSecondRow ? 'Y' : 'N');\n  }\n\n  return (\n    <>\n      <div className=\"contents-area none-aside setting\">\n        <section className=\"contents-header none-border\">\n          <h2>GIS 센서 위치 설정</h2>\n          {/*<ol className=\"route\">*/}\n          {/*  <li><a href=\"\"><i className=\"icon-home\"></i>&nbsp;온수 변전소</a></li>*/}\n          {/*  <li><a href=\"\">설정</a></li>*/}\n          {/*  <li><a href=\"\">GIS 센서 위치 설정</a></li>*/}\n          {/*</ol>*/}\n        </section>\n        <div className=\"container\">\n          <section className=\"gis-parts solo\">\n            <div className=\"section-box\">\n              <div className=\"contents-table\">\n                {/** \t\t\t\t\t\t\t\t\t<div class=\"contents-tabmenu\"><h2>리스트</h2></div> */}\n                <div className=\"shortcuts\">\n                  <div>\n                    <a href=\"#gis01\">1번</a> <a href=\"#gis02\">2번</a> <a href=\"#gis03\">3번</a>\n                    <a href=\"#gis04\">4번</a> <a href=\"#gis05\">5번</a> <a href=\"#gis06\">6번</a>\n                    <a href=\"#gis07\">7번</a> <a href=\"#gis08\">8번</a> <a href=\"#gis09\">9번</a>\n                    <a href=\"#gis10\">10번</a> <a href=\"#gis11\">11번</a> <a href=\"#gis12\">12번</a>\n                    <a href=\"#gis13\">13번</a> <a href=\"#gis14\">14번</a> <a href=\"#gis15\">15번</a>\n                    <a href=\"#gis16\">16번</a> <a href=\"#gis17\">17번</a> <a href=\"#gis18\">18번</a>\n                  </div>\n                  <div>\n                    <a href=\"#gis19\">19번</a> <a href=\"#gis20\">20번</a> <a href=\"#gis21\">21번</a>\n                    <a href=\"#gis22\">22번</a> <a href=\"#gis23\">23번</a> <a href=\"#gis24\">24번</a>\n                    <a href=\"#gis25\">25번</a> <a href=\"#gis26\">26번</a> <a href=\"#gis27\">27번</a>\n                    <a href=\"#gis28\">28번</a> <a href=\"#gis29\">29번</a> <a href=\"#gis30\">30번</a>\n                    <a href=\"#gis31\">31번</a> <a href=\"#gis32\">32번</a> <a href=\"#gis33\">33번</a>\n                    <a href=\"#gis34\">34번</a> <a href=\"#gis35\">35번</a> <a href=\"#gis36\">36번</a>\n                  </div>\n                </div>\n                <div className=\"gis-table-wrap\">\n                  <div className=\"tbl-row\">\n                    {\n                      props.gisMtrUse\n                        .filter(gis => gis.GIS_MTR === 'GIS' && parseInt(gis.GIS_MTR_NUM) < 19)\n                        .map((gis, index) => {\n                          return <SetupGisModule key={index} divId={`gis${gis.ID}`} gis={gis} updateCallback={gisUpdateCallback} />;\n                        })\n                    }\n                  </div>\n                  <div className=\"tbl-row\">\n                    {\n                      props.gisMtrUse\n                        .filter(gis => gis.GIS_MTR === 'GIS' && parseInt(gis.GIS_MTR_NUM) > 18)\n                        .map((gis, index) => {\n                          return <SetupGisModule key={index} divId={`gis${gis.ID}`} gis={gis} updateCallback={gisUpdateCallback} />;\n                        })\n                    }\n                  </div>\n                </div>\n              </div>\n            </div>\n          </section>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ diagram }: IRootState) => ({\n  gisMtrUse: diagram.gisMtrUse,\n});\n\nconst mapDispatchToProps = {\n  getSldGisMtrUse,\n  getSldGisMtrLocation,\n  setSldGis,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SetupGis);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\mtr\\dga\\report.tsx",["1019","1020","1021","1022","1023"],"import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport moment from 'moment';\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\nimport { getReportMtrDga } from './reducer';\nimport ReactToPrint from \"react-to-print\";\n\nexport interface IMtrDgaReportProps extends StateProps, DispatchProps {}\n\nexport const MtrDgaReport = (props: IMtrDgaReportProps) => {\n\n\tconst printRef = useRef(null);\n\tconst [members, setMembers] = useState({\n\t\ttargetDate: new Date(),\n\t\tfirstDate: new Date(),\n\t\treportData: new Array(),\n\t})\n\n  useEffect(() => {\n\t\tprops.getReportMtrDga(members.targetDate);\n\t\t// props.getReportMtrDga(new Date('2020-12-07'));\n  }, []);\n\n\tuseEffect(() => {\n\t\tif( !props.reportMtrDgaData )\n\t\treturn ;\n\n\tconst firstDate = moment(props.reportMtrDgaData.firstDay);\n\n\tconst dataMap = new Map();\n\tfor( let row of props.reportMtrDgaData.data) {\n\t\tconst key = row.LU_NM + \"-\" + moment(row.EventTime).format(\"HH:mm\");\n\t\tif( !dataMap.has( key ) ){\n\t\t\tdataMap.set( key, {\n\t\t\t\tkey: key,\n\t\t\t\tLU_NM: row.LU_NM,\n\t\t\t\tHOUR: moment(row.EventTime).format(\"HH:mm\"),\n\t\t\t\tresult: [\n\t\t\t\t\t[0, 0, 0, 0],\t\t\t// 일\n\t\t\t\t\t[0, 0, 0, 0],\t\t\t// 월\n\t\t\t\t\t[0, 0, 0, 0],\t\t\t// 화\n\t\t\t\t\t[0, 0, 0, 0],\t\t\t// 수\n\t\t\t\t\t[0, 0, 0, 0],\t\t\t// 목\n\t\t\t\t\t[0, 0, 0, 0],\t\t\t// 금\n\t\t\t\t\t[0, 0, 0, 0],\t\t\t// 토\n\t\t\t\t],\n\t\t\t});\n\t\t}\n\t}\n\n\tconst results = props.reportMtrDgaData.data;\n\tfor( let result of results){\n\n\t\tconst key = result.LU_NM + \"-\" + moment(result.EventTime).format(\"HH:mm\");\n\t\tif( !dataMap.has(key) )\n\t\t\tcontinue;\n\n\t\t// 요일을 찾아\n\t\tconst diff = moment(result.EventDate).diff(firstDate, \"days\");\n\t\tdataMap.get(key).result[diff] = [ Number(result.H2_PPM), Number(result.CO_PPM), Number(result.C2H2_PPM), Number(result.H2O_PPM) ];\n\n\t\t// console.log(`d[${moment(result.EventDate).format('YYYY-MM-DD')}] firstDay[${firstDate.format('YYYY-MM-DD')}] diff[${diff}]`);\n\t\t// console.log(`SNSR_ID[${result.SNSR_ID}] result1[${result1.substring(0, result1.length - 1)}] result2[${result2.substring(0, result2.length - 1)}] result3[${result.TotalCount}]`);\n\t}\n\n\tconst list = [...dataMap.values()].sort( (a, b) => {\n\t\treturn b.key - a.key;\n\t});\n\n\t// console.log(list);\n\n\tsetMembers({\n\t\t...members,\n\t\tfirstDate: props.reportMtrDgaData.firstDay,\n\t\treportData: list,\n\t});\n  }, [props.reportMtrDgaData]);\n\n\tconst reportPage = (start : number, end : number) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className='include'>\n\t\t\t\t\t<section className=\"area-title\">\n\t\t\t\t\t\t<h1>유중가스 주간보고서</h1>\n\t\t\t\t\t\t<div className=\"area-sign\">\n\t\t\t\t\t\t\t\t<table>\n\t\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>담당</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>관리</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>승인</th>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section className=\"area-contents\">\n\t\t\t\t\t\t<table className=\"table-db\">\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th colSpan={2}>장비/일자</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={4}>{moment(members.firstDate).format('MM-DD')} (일)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={4}>{moment(members.firstDate).add(1,\"day\").format('MM-DD')} (월))</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={4}>{moment(members.firstDate).add(2,\"day\").format('MM-DD')} (화)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={4}>{moment(members.firstDate).add(3,\"day\").format('MM-DD')} (수)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={4}>{moment(members.firstDate).add(4,\"day\").format('MM-DD')} (목)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={4}>{moment(members.firstDate).add(5,\"day\").format('MM-DD')} (금)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={4}>{moment(members.firstDate).add(6,\"day\").format('MM-DD')} (토)</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th>설비</th>\n\t\t\t\t\t\t\t\t\t<th>센서NO</th>\n\t\t\t\t\t\t\t\t\t<th>H2</th>\n\t\t\t\t\t\t\t\t\t<th>CO</th>\n\t\t\t\t\t\t\t\t\t<th>C2H2</th>\n\t\t\t\t\t\t\t\t\t<th>H20</th>\n\t\t\t\t\t\t\t\t\t<th>H2</th>\n\t\t\t\t\t\t\t\t\t<th>CO</th>\n\t\t\t\t\t\t\t\t\t<th>C2H2</th>\n\t\t\t\t\t\t\t\t\t<th>H20</th>\n\t\t\t\t\t\t\t\t\t<th>H2</th>\n\t\t\t\t\t\t\t\t\t<th>CO</th>\n\t\t\t\t\t\t\t\t\t<th>C2H2</th>\n\t\t\t\t\t\t\t\t\t<th>H20</th>\n\t\t\t\t\t\t\t\t\t<th>H2</th>\n\t\t\t\t\t\t\t\t\t<th>CO</th>\n\t\t\t\t\t\t\t\t\t<th>C2H2</th>\n\t\t\t\t\t\t\t\t\t<th>H20</th>\n\t\t\t\t\t\t\t\t\t<th>H2</th>\n\t\t\t\t\t\t\t\t\t<th>CO</th>\n\t\t\t\t\t\t\t\t\t<th>C2H2</th>\n\t\t\t\t\t\t\t\t\t<th>H20</th>\n\t\t\t\t\t\t\t\t\t<th>H2</th>\n\t\t\t\t\t\t\t\t\t<th>CO</th>\n\t\t\t\t\t\t\t\t\t<th>C2H2</th>\n\t\t\t\t\t\t\t\t\t<th>H20</th>\n\t\t\t\t\t\t\t\t\t<th>H2</th>\n\t\t\t\t\t\t\t\t\t<th>CO</th>\n\t\t\t\t\t\t\t\t\t<th>C2H2</th>\n\t\t\t\t\t\t\t\t\t<th>H20</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tmembers.reportData.map( ( row ) => {\n\t\t\t\t\t\t\t\t\treturn (<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>{row.LU_NM}</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>{row.HOUR}</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[0][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[0][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[0][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[0][3]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[1][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[1][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[1][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[1][3]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[2][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[2][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[2][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[2][3]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[3][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[3][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[3][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[3][3]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[4][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[4][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[4][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[4][3]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[5][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[5][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[5][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[5][3]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[6][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[6][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[6][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[6][3]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>);\n\t\t\t\t\t\t\t\t\t}).slice(start, Math.min( end, members.reportData.length ))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n\n\tconst reportPages = () =>\n\t{\n\t\t// console.log('reportPages');\n\t\tconst lineCnt = 12;\n\t\tconst pageCnt = Math.max(Math.ceil(members.reportData.length / lineCnt), 1);\n\n\t\tconst pages = [];\n\n\t\tfor(let i = 0; i < pageCnt; i ++){\n\t\t\tpages.push(reportPage( lineCnt * i, lineCnt * (i+1)));\n\t\t\tpages.push(<p className='pagebreak'/>);\n\t\t}\n\n\t\t// console.log(pages);\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div>\n\t\t\t\t\t{pages}\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n\n  return (\n    <>\n      <div className='contents-area none-aside print-area'>\n        <div className='container'>\n          <div className='leftside'>\n\t\t\t\t\t\t{/* <div className='' id='print-contents' style={{ }}> */}\n\t\t\t\t\t\t{/*A4 용지크기 비율 : 1:1.141 Include print-contents.html*/}\n            <div ref={printRef} className='paper' id='print-contents' style={{ width: '846px', height: '600px' }}>\n\t\t\t\t\t\t\t{reportPages()}\n            </div>\n\t\t\t\t\t</div>\n          <div className='rightside'>\n            <h6>유중가스 주간보고서</h6>\n            <div className='nav-print gap-up-30'>\n              <ul>\n                <li className='obj-term width-10'>\n                  <span>조회 기준 일자</span>\n                  <div className='obj-calendar'>\n                    <i className='icon-calendar'></i>\n\t\t\t\t\t\t\t\t\t\t<DateRangePicker\n\t\t\t\t\t\t\t\t\t\t\tonApply={(event, picker) => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetMembers({\n\t\t\t\t\t\t\t\t\t\t\t\t\t...members,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttargetDate: picker.startDate.toDate(),\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\t\tprops.getReportMtrDga(picker.startDate.toDate());\n\t\t\t\t\t\t\t\t\t\t\t}}\n                      initialSettings={{\n                        singleDatePicker: true,\n                        startDate: moment().startOf('day'),\n                        locale: {\n                          format: 'YYYY-MM-DD',\n                        },\n                      }}>\n                      <input type='text' name='datetimes' />\n                    </DateRangePicker>\n                  </div>\n                </li>\n              </ul>\n            </div>\n\t\t\t\t\t\t<ReactToPrint\n\t\t\t\t\t\t\ttrigger={()=><a className='btn submit wide gap-up-60' href='#'>인쇄하기</a>}\n\t\t\t\t\t\t\tcontent={()=>printRef.current}\n\t\t\t\t\t\t/>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ reportMtrDgaData }: IRootState) => ({\n\treportMtrDgaData: reportMtrDgaData.data,\n});\n\nconst mapDispatchToProps = {\n\tgetReportMtrDga,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MtrDgaReport);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\gis\\scbr\\report.tsx",["1024","1025","1026","1027"],"\timport React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport moment from 'moment';\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\nimport { getReportGisScbr } from './reducer';\nimport ReactToPrint from \"react-to-print\";\n\nexport interface IGisScbrReportProps extends StateProps, DispatchProps {}\n\nexport const GisScbrReport = (props: IGisScbrReportProps) => {\n\n\tconst printRef = useRef(null);\n\tconst [members, setMembers] = useState({\n\t\ttargetDate: new Date(),\n\t\tfirstDate: new Date(),\n\t\treportData: new Array(),\n\t})\n\n  useEffect(() => {\n\t\tprops.getReportGisScbr(members.targetDate);\n\t\t// props.getReportGisScbr(new Date(Date.parse('2021-02-01')));\n  }, []);\n\n\tuseEffect(() => {\n\t\tif( !props.reportGisScbrData )\n\t\t\treturn ;\n\n\t\tsetMembers({\n\t\t\t...members,\n\t\t\ttargetDate: props.reportGisScbrData.firstDay,\n\t\t\treportData: props.reportGisScbrData.data,\n\t\t})\n\n  }, [props.reportGisScbrData]);\n\n\tconst reportPage = (start : number, end : number) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className='include gap-up-30'>\n\t\t\t\t\t<section className=\"area-title\">\n\t\t\t\t\t\t<h1>차단기 동작특성 주간보고서</h1>\n\t\t\t\t\t\t<div className=\"area-sign\">\n\t\t\t\t\t\t\t\t<table>\n\t\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>담당</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>관리</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>승인</th>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section className=\"area-contents\">\n\t\t\t\t\t\t<table className=\"table-db\">\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t<th>발생일시</th>\n\t\t\t\t\t\t\t\t\t\t<th>LU명</th>\n\t\t\t\t\t\t\t\t\t\t<th>센서명</th>\n\t\t\t\t\t\t\t\t\t\t<th>동작상태</th>\n\t\t\t\t\t\t\t\t\t\t<th>진단결과</th>\n\t\t\t\t\t\t\t\t\t\t<th>A상 동작시간(ms)</th>\n\t\t\t\t\t\t\t\t\t\t<th>B상 동작시간(ms)</th>\n\t\t\t\t\t\t\t\t\t\t<th>C상 동작시간(ms)</th>\n\t\t\t\t\t\t\t\t\t\t<th>피크값</th>\n\t\t\t\t\t\t\t\t\t\t<th>동작회수</th>\n\t\t\t\t\t\t\t\t\t\t<th>비고</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tmembers.reportData.map( ( row ) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td> {moment(row.EventTime).format(\"YYYY-MM-DD HH:mm:ss.SSS\")} </td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td> {row.LU_NM} </td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td> {row.SNSR_NM} </td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td> {row.EVNT_TYPE} </td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td> {row.DIAG_RSLT} </td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td> {row.OPN_CLS_TIME_A} </td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td> {row.OPN_CLS_TIME_B} </td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td> {row.OPN_CLS_TIME_C} </td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td> {Number(row.PEAK).toFixed(3)} </td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td> {row.OP_CNT} </td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td  > </td> \n\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>)\n\t\t\t\t\t\t\t\t\t}).slice(start, Math.min( end, members.reportData.length ))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n\n\tconst reportPages = () =>\n\t{\n\t\t// console.log('reportPages');\n\t\tconst lineCnt = 25;\n\t\tconst pageCnt = Math.max(Math.ceil(members.reportData.length / lineCnt), 1);\n\n\t\tconst pages = [];\n\n\t\tfor(let i = 0; i < pageCnt; i ++){\n\t\t\tpages.push(reportPage( lineCnt * i, lineCnt * (i+1)));\n\t\t\tpages.push(<p className='pagebreak'/>);\n\t\t}\n\n\t\t// console.log(pages);\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div>\n\t\t\t\t\t{pages}\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n\n\treturn (\n\n    <>\n      <div className='contents-area none-aside print-area'>\n        <div className='container'>\n          <div className='leftside'>\n            {/* <div className='paper' id='print-contents' style={{ width: '846px', height: '600px' }}> */}\n            <div className='paper' id='print-contents' style={{ width: '846px', height: '600px' }}>\n\t\t\t\t\t\t\t<div ref={printRef} className='paper' id='print-contents' style={{ width: '846px', height: '600px' }}>\n\t\t\t\t\t\t\t\t{reportPages()}\n\t\t\t\t\t\t\t</div>\n            </div>\n          </div>\n          <div className='rightside'>\n            <h6>차단기 동작특성 주간보고서</h6>\n            <div className='nav-print gap-up-30'>\n              <ul>\n                <li className='obj-term width-10'>\n                  <span>조회 기준 일자</span>\n                  <div className='obj-calendar'>\n                    <i className='icon-calendar'></i>\n                    <DateRangePicker\n\t\t\t\t\t\t\t\t\t\t\tonApply={(event, picker) => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetMembers({\n\t\t\t\t\t\t\t\t\t\t\t\t\t...members,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttargetDate: picker.startDate.toDate(),\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\t\tprops.getReportGisScbr(picker.startDate.toDate());\n\t\t\t\t\t\t\t\t\t\t\t}}\n                      initialSettings={{\n                        singleDatePicker: true,\n                        startDate: moment().startOf('day'),\n                        locale: {\n                          format: 'YYYY-MM-DD',\n                        },\n                      }}>\n                      <input type='text' name='datetimes' />\n                    </DateRangePicker>\n                  </div>\n                </li>\n              </ul>\n            </div>\n\t\t\t\t\t\t<ReactToPrint\n\t\t\t\t\t\t\ttrigger={()=><a className='btn submit wide gap-up-60' href='#'>인쇄하기</a>}\n\t\t\t\t\t\t\tcontent={()=>printRef.current}\n\t\t\t\t\t\t/>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ reportGisScbrData }: IRootState) => ({\n\treportGisScbrData: reportGisScbrData.data,\n});\n\nconst mapDispatchToProps = {\n\tgetReportGisScbr,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GisScbrReport);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\gis\\spdc\\report.tsx",["1028","1029","1030","1031","1032","1033","1034","1035","1036","1037","1038"],"import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport moment from 'moment';\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\nimport { getReportGisSpdc } from './reducer';\nimport ReactToPrint from \"react-to-print\";\n\nexport interface IGisSpdcReportProps extends StateProps, DispatchProps {}\n\nexport const GisSpdcReport = (props: IGisSpdcReportProps) => {\n\n\tconst printRef = useRef(null);\n\tconst [members, setMembers] = useState({\n\t\ttargetDate: new Date(),\n\t\tfirstDate: new Date(),\n\t\treportData: new Array(),\n\t})\n\n  useEffect(() => {\n\t\tprops.getReportGisSpdc(members.targetDate);\n\t\t// props.getReportGisSpdc(new Date(Date.parse('2020-09-20')));\n\t}, []);\n\n\tuseEffect(() => {\n\n\t\tif( !props.reportGisSpdcData )\n\t\t\treturn ;\n\n\t\tconst firstDate = moment(props.reportGisSpdcData.firstDay);\n\n\t\tconst dataMap = new Map();\n\t\tfor( let row of props.reportGisSpdcData.data) {\n\t\t\tif( !dataMap.has( row.SNSR_ID) ){\n\t\t\t\tdataMap.set( row.SNSR_ID, {\n\t\t\t\t\tSNSR_ID: row.SNSR_ID,\n\t\t\t\t\tEQIP_NM: row.EQIP_NM,\n\t\t\t\t\tSNSR_NM: row.SNSR_NM,\n\t\t\t\t\tresult: [\n\t\t\t\t\t\t['', '', 0],\t\t\t// 일\n\t\t\t\t\t\t['', '', 0],\t\t\t// 월\n\t\t\t\t\t\t['', '', 0],\t\t\t// 화\n\t\t\t\t\t\t['', '', 0],\t\t\t// 수\n\t\t\t\t\t\t['', '', 0],\t\t\t// 목\n\t\t\t\t\t\t['', '', 0],\t\t\t// 금\n\t\t\t\t\t\t['', '', 0],\t\t\t// 토\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst results = props.reportGisSpdcData.data.filter( (value) => value.IsAlarm == true );\n\t\tfor( let result of results){\n\n\t\t\tif( !dataMap.has(result.SNSR_ID) )\n\t\t\t\tcontinue;\n\n\t\t\tlet result1 = '';\n\t\t\tlet result2 = '';\n\n\t\t\t//Corona, Floating, Noise, Particle, Void\n\t\t\tif (result.Corona != 0) {\n\t\t\t\tresult1 += result.Corona + \"/\";\n\t\t\t\tresult2 += \"C/\";\n\t\t\t}\n\t\t\tif (result.Floating != 0) {\n\t\t\t\t\tresult1 += result.Floating + \"/\";\n\t\t\t\t\tresult2 += \"F/\";\n\t\t\t}\n\t\t\tif (result.Noise != 0) {\n\t\t\t\t\tresult1 += result.Noise + \"/\";\n\t\t\t\t\tresult2 += \"N/\";\n\t\t\t}\n\t\t\tif (result.Particle != 0) {\n\t\t\t\t\tresult1 += result.Particle + \"/\";\n\t\t\t\t\tresult2 += \"P/\";\n\t\t\t}\n\t\t\tif (result.Void != 0) {\n\t\t\t\t\tresult1 += result.Void + \"/\";\n\t\t\t\t\tresult2 += \"V/\";\n\t\t\t}\n\n\t\t\t// 요일을 찾아\n\t\t\tconst diff = moment(result.EventDate).diff(firstDate, \"days\");\n\t\t\tdataMap.get(result.SNSR_ID).result[diff] = [ result1.substring(0, result1.length - 1), result2.substring(0, result2.length - 1), result.TotalCount];\n\n\t\t\t// console.log(`d[${moment(result.EventDate).format('YYYY-MM-DD')}] firstDay[${firstDate.format('YYYY-MM-DD')}] diff[${diff}]`);\n\t\t\t// console.log(`SNSR_ID[${result.SNSR_ID}] result1[${result1.substring(0, result1.length - 1)}] result2[${result2.substring(0, result2.length - 1)}] result3[${result.TotalCount}]`);\n\t\t}\n\n\t\tconst list = [...dataMap.values()].sort( (a, b) => {\n\t\t\tif( b.EQIP_NM > a.EQIP_NM ){\t// 설비명\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse if( b.EQIP_NM < a.EQIP_NM ){\t// 설비명\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\telse{\t// 설비명이 같은 경우\n\t\t\t\tif( b.SNSR_NM >= a.SNSR_NM )\n\t\t\t\t\treturn 1;\n\t\t\t\telse\n\t\t\t\t\treturn 0;\t\n\t\t\t}\n\t\t});\n\n\t\t// console.log(list);\n\n\t\tsetMembers({\n\t\t\t...members,\n\t\t\tfirstDate: props.reportGisSpdcData.firstDay,\n\t\t\treportData: list,\n\t\t});\n\n  }, [props.reportGisSpdcData]);\n\n\tconst reportPage = (start : number, end : number) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className='include'>\n\t\t\t\t\t<section className=\"area-title\">\n\t\t\t\t\t\t<h1>GIS 부분방전 주간보고서</h1>\n\t\t\t\t\t\t<div className=\"area-sign\">\n\t\t\t\t\t\t\t\t<table>\n\t\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>담당</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>관리</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>승인</th>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section className=\"area-contents\">\n\t\t\t\t\t\t<table className=\"table-db\">\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th colSpan={2}>장비/일자</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={3}>{moment(members.firstDate).format('MM-DD')} (일)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={3}>{moment(members.firstDate).add(1,\"day\").format('MM-DD')} (월))</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={3}>{moment(members.firstDate).add(2,\"day\").format('MM-DD')} (화)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={3}>{moment(members.firstDate).add(3,\"day\").format('MM-DD')} (수)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={3}>{moment(members.firstDate).add(4,\"day\").format('MM-DD')} (목)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={3}>{moment(members.firstDate).add(5,\"day\").format('MM-DD')} (금)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={3}>{moment(members.firstDate).add(6,\"day\").format('MM-DD')} (토)</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th>설비</th>\n\t\t\t\t\t\t\t\t\t<th>센서NO</th>\n\t\t\t\t\t\t\t\t\t<th>이상건수</th>\n\t\t\t\t\t\t\t\t\t<th>발생유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t\t\t<th>이상건수</th>\n\t\t\t\t\t\t\t\t\t<th>발생유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t\t\t<th>이상건수</th>\n\t\t\t\t\t\t\t\t\t<th>발생유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t\t\t<th>이상건수</th>\n\t\t\t\t\t\t\t\t\t<th>발생유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t\t\t<th>이상건수</th>\n\t\t\t\t\t\t\t\t\t<th>발생유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t\t\t<th>이상건수</th>\n\t\t\t\t\t\t\t\t\t<th>발생유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t\t\t<th>이상건수</th>\n\t\t\t\t\t\t\t\t\t<th>발생유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tmembers.reportData.map( ( row ) => {\n\t\t\t\t\t\t\t\t\treturn (<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>{row.EQIP_NM}</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>{row.SNSR_NM}</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[0][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[0][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[0][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[1][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[1][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[1][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[2][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[2][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[2][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[3][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[3][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[3][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[4][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[4][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[4][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[5][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[5][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[5][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[6][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[6][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[6][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>);\n\t\t\t\t\t\t\t\t\t}).slice(start, Math.min( end, members.reportData.length ))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t\t<table className=\"table-db caption\">\n\t\t\t\t\t\t\t<colgroup>\n\t\t\t\t\t\t\t\t\t<col style={{width: '10%'}} />\n\t\t\t\t\t\t\t\t\t<col style={{width: '40%'}} />\n\t\t\t\t\t\t\t\t\t<col style={{width: '10%'}} />\n\t\t\t\t\t\t\t\t\t<col style={{width: '40%'}} />\n\t\t\t\t\t\t\t</colgroup>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th>이상징후 센서</th>\n\t\t\t\t\t\t\t\t\t<td>1. 동일유형 DATA 1시간 이후 지속 & 1시간 내에 4회 이상<br/>\n\t\t\t\t\t\t\t\t\t\t\t2. EVENT DATA 발생건수 (1일 20회)<br/>\n\t\t\t\t\t\t\t\t\t\t\t※ 참고 (F: 5회, V: 2회, P: 3회 이벤트 발생 시 = 5/2/3 | F/V/P | 6, 이상징후건수 5)</td>\n\t\t\t\t\t\t\t\t\t<th>범례</th>\n\t\t\t\t\t\t\t\t\t<td>F: 플로팅, V: 보이드, P: 파티클, C: 코로나, N: 노이즈</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n\tconst reportPages = () =>\n\t{\n\t\t// console.log('reportPages');\n\t\tconst lineCnt = 16;\n\t\tconst pageCnt = Math.max(Math.ceil(members.reportData.length / lineCnt), 1);\n\n\t\tconst pages = [];\n\n\t\tfor(let i = 0; i < pageCnt; i ++){\n\t\t\tpages.push(reportPage( lineCnt * i, lineCnt * (i+1)));\n\t\t\tpages.push(<p className='pagebreak'/>);\n\t\t}\n\n\t\t// console.log(pages);\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div>\n\t\t\t\t\t{pages}\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n\n  return (\n    <>\n      <div className='contents-area none-aside print-area'>\n        <div className='container'>\n          <div className='leftside'>\n            {/* <div className='' id='print-contents' style={{ }}> */}\n\t\t\t\t\t\t{/*A4 용지크기 비율 : 1:1.141 Include print-contents.html*/}\n            <div ref={printRef} className='paper' id='print-contents' style={{ width: '846px', height: '600px' }}>\n\t\t\t\t\t\t\t{reportPages()}\n            </div>\n          </div>\n          <div className='rightside'>\n            <h6>GIS 부분방전 주간보고서</h6>\n            <div className='nav-print gap-up-30'>\n              <ul>\n                <li className='obj-term width-10'>\n                  <span>조회 기준 일자</span>\n                  <div className='obj-calendar'>\n                    <i className='icon-calendar'></i>\n                    <DateRangePicker\n\t\t\t\t\t\t\t\t\t\t\tonApply={(event, picker) => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetMembers({\n\t\t\t\t\t\t\t\t\t\t\t\t\t...members,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttargetDate: picker.startDate.toDate(),\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\t\tprops.getReportGisSpdc(picker.startDate.toDate());\n\t\t\t\t\t\t\t\t\t\t\t}}\n                      initialSettings={{\n                        singleDatePicker: true,\n                        startDate: moment().startOf('day'),\n                        locale: {\n                          format: 'YYYY-MM-DD',\n                        },\n                      }}>\n                      <input type='text' name='datetimes' />\n                    </DateRangePicker>\n                  </div>\n                </li>\n              </ul>\n            </div>\n\t\t\t\t\t\t<ReactToPrint\n\t\t\t\t\t\t\ttrigger={()=><a className='btn submit wide gap-up-60' href='#'>인쇄하기</a>}\n\t\t\t\t\t\t\tcontent={()=>printRef.current}\n\t\t\t\t\t\t/>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ reportGisSpdcData }: IRootState) => ({\n\treportGisSpdcData: reportGisSpdcData.data,\n});\n\nconst mapDispatchToProps = {\n\tgetReportGisSpdc,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GisSpdcReport);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\mtr\\bushing\\report.tsx",["1039","1040","1041","1042"],"import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport moment from 'moment';\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\nimport { getReportMtrBushing } from './reducer';\nimport ReactToPrint from \"react-to-print\";\n\nexport interface IMtrBushingReportProps extends StateProps, DispatchProps {}\n\nexport const MtrBushingReport = (props: IMtrBushingReportProps) => {\n\t\n\tconst printRef = useRef(null);\n\tconst [members, setMembers] = useState({\n\t\ttargetDate: new Date(),\n\t\tfirstDate: new Date(),\n\t\treportData: new Array(),\n\t})\n\n\n  useEffect(() => {\n\t\t// props.getReportMtrBushing(members.targetDate);\n\t\tprops.getReportMtrBushing(new Date('2021-01-22'));\n  }, []);\n\n\tuseEffect(() => {\n\t\tif( !props.reportMtrBushingData )\n\t\treturn ;\n\n\t\tconst firstDate = moment(props.reportMtrBushingData.firstDay);\n\n\t\tconst dataMap = new Map();\n\t\tfor( let row of props.reportMtrBushingData.data) {\n\t\t\tconst key = row.LU_NM + \"-\" + moment(row.EventTime).format(\"HH:mm\") + \"-\" + row.PHASE_NM;\n\t\t\tif( !dataMap.has( key ) ){\n\t\t\t\tdataMap.set( key, {\n\t\t\t\t\tkey: key,\n\t\t\t\t\tLU_NM: row.LU_NM,\n\t\t\t\t\tHOUR: moment(row.EventTime).format(\"HH:mm\"),\n\t\t\t\t\tPHASE_NM: row.PHASE_NM,\n\t\t\t\t\tresult: [\n\t\t\t\t\t\t[0, 0],\t\t\t// 일\n\t\t\t\t\t\t[0, 0],\t\t\t// 월\n\t\t\t\t\t\t[0, 0],\t\t\t// 화\n\t\t\t\t\t\t[0, 0],\t\t\t// 수\n\t\t\t\t\t\t[0, 0],\t\t\t// 목\n\t\t\t\t\t\t[0, 0],\t\t\t// 금\n\t\t\t\t\t\t[0, 0],\t\t\t// 토\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst results = props.reportMtrBushingData.data;\n\t\tfor( let result of results){\n\n\t\t\tconst key = result.LU_NM + \"-\" + moment(result.EventTime).format(\"HH:mm\") + \"-\" + result.PHASE_NM;\n\t\t\tif( !dataMap.has(key) )\n\t\t\t\tcontinue;\n\n\t\t\t// 요일을 찾아\n\t\t\tconst diff = moment(result.EventDate).diff(firstDate, \"days\");\n\t\t\tdataMap.get(key).result[diff] = [ Number(result.BASE_A), Number(result.LEAK_A) ];\n\n\t\t\t// console.log(`d[${moment(result.EventDate).format('YYYY-MM-DD')}] firstDay[${firstDate.format('YYYY-MM-DD')}] diff[${diff}]`);\n\t\t\t// console.log(`SNSR_ID[${result.SNSR_ID}] result1[${result1.substring(0, result1.length - 1)}] result2[${result2.substring(0, result2.length - 1)}] result3[${result.TotalCount}]`);\n\t\t}\n\n\t\tconst list = [...dataMap.values()].sort( (a, b) => {\n\t\t\treturn b.key - a.key;\n\t\t});\n\n\t\t// console.log(list);\n\n\t\tsetMembers({\n\t\t\t...members,\n\t\t\tfirstDate: props.reportMtrBushingData.firstDay,\n\t\t\treportData: list,\n\t\t});\n  }, [props.reportMtrBushingData]);\n\n\tconst reportPage = (start : number, end : number) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className='include'>\n\t\t\t\t\t<section className=\"area-title\">\n\t\t\t\t\t\t<h1>부싱누설전류 주간보고서</h1>\n\t\t\t\t\t\t<div className=\"area-sign\">\n\t\t\t\t\t\t\t\t<table>\n\t\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>담당</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>관리</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>승인</th>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section className=\"area-contents\">\n\t\t\t\t\t\t<table className=\"table-db\">\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th colSpan={3}>장비/일자</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={2}>{moment(members.firstDate).format('MM-DD')} (일)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={2}>{moment(members.firstDate).add(1,\"day\").format('MM-DD')} (월))</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={2}>{moment(members.firstDate).add(2,\"day\").format('MM-DD')} (화)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={2}>{moment(members.firstDate).add(3,\"day\").format('MM-DD')} (수)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={2}>{moment(members.firstDate).add(4,\"day\").format('MM-DD')} (목)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={2}>{moment(members.firstDate).add(5,\"day\").format('MM-DD')} (금)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={2}>{moment(members.firstDate).add(6,\"day\").format('MM-DD')} (토)</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th>설비</th>\n\t\t\t\t\t\t\t\t\t<th>발생시간</th>\n\t\t\t\t\t\t\t\t\t<th>상</th>\n\t\t\t\t\t\t\t\t\t<th>기준전류</th>\n\t\t\t\t\t\t\t\t\t<th>누설전류</th>\n\t\t\t\t\t\t\t\t\t<th>기준전류</th>\n\t\t\t\t\t\t\t\t\t<th>누설전류</th>\n\t\t\t\t\t\t\t\t\t<th>기준전류</th>\n\t\t\t\t\t\t\t\t\t<th>누설전류</th>\n\t\t\t\t\t\t\t\t\t<th>기준전류</th>\n\t\t\t\t\t\t\t\t\t<th>누설전류</th>\n\t\t\t\t\t\t\t\t\t<th>기준전류</th>\n\t\t\t\t\t\t\t\t\t<th>누설전류</th>\n\t\t\t\t\t\t\t\t\t<th>기준전류</th>\n\t\t\t\t\t\t\t\t\t<th>누설전류</th>\n\t\t\t\t\t\t\t\t\t<th>기준전류</th>\n\t\t\t\t\t\t\t\t\t<th>누설전류</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tmembers.reportData.map( ( row ) => {\n\t\t\t\t\t\t\t\t\treturn (<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>{row.LU_NM}</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>{row.HOUR}</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>{row.PHASE_NM}</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[0][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[0][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[1][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[1][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[2][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[2][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[3][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[3][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[4][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[4][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[5][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[5][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[6][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[6][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>);\n\t\t\t\t\t\t\t\t\t}).slice(start, Math.min( end, members.reportData.length ))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n\n\tconst reportPages = () =>\n\t{\n\t\t// console.log('reportPages');\n\t\tconst lineCnt = 25;\n\t\tconst pageCnt = Math.max(Math.ceil(members.reportData.length / lineCnt), 1);\n\n\t\tconst pages = [];\n\n\t\tfor(let i = 0; i < pageCnt; i ++){\n\t\t\tpages.push(reportPage( lineCnt * i, lineCnt * (i+1)));\n\t\t\tpages.push(<p className='pagebreak'/>);\n\t\t}\n\n\t\t// console.log(pages);\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div>\n\t\t\t\t\t{pages}\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n\n  return (\n    <>\n      <div className='contents-area none-aside print-area'>\n        <div className='container'>\n          <div className='leftside'>\n\t\t\t\t\t\t{/* <div className='' id='print-contents' style={{ }}> */}\n\t\t\t\t\t\t{/*A4 용지크기 비율 : 1:1.141 Include print-contents.html*/}\n            <div ref={printRef} className='paper' id='print-contents' style={{ width: '846px', height: '600px' }}>\n\t\t\t\t\t\t\t{reportPages()}\n            </div>\n\t\t\t\t\t</div>\n          <div className='rightside'>\n            <h6>부싱누설전류 주간보고서</h6>\n            <div className='nav-print gap-up-30'>\n              <ul>\n                <li className='obj-term width-10'>\n                  <span>조회 기준 일자</span>\n                  <div className='obj-calendar'>\n                    <i className='icon-calendar'></i>\n                    <DateRangePicker\n\t\t\t\t\t\t\t\t\t\t\tonApply={(event, picker) => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetMembers({\n\t\t\t\t\t\t\t\t\t\t\t\t\t...members,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttargetDate: picker.startDate.toDate(),\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\t\tprops.getReportMtrBushing(picker.startDate.toDate());\n\t\t\t\t\t\t\t\t\t\t\t}}\n                      initialSettings={{\n                        singleDatePicker: true,\n                        startDate: moment().startOf('day'),\n                        locale: {\n                          format: 'YYYY-MM-DD',\n                        },\n                      }}>\n                      <input type='text' name='datetimes' />\n                    </DateRangePicker>\n                  </div>\n                </li>\n              </ul>\n            </div>\n\t\t\t\t\t\t<ReactToPrint\n\t\t\t\t\t\t\ttrigger={()=><a className='btn submit wide gap-up-60' href='#'>인쇄하기</a>}\n\t\t\t\t\t\t\tcontent={()=>printRef.current}\n\t\t\t\t\t\t/>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ reportMtrBushingData }: IRootState) => ({\n\treportMtrBushingData: reportMtrBushingData.data,\n});\n\nconst mapDispatchToProps = {\n\tgetReportMtrBushing,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MtrBushingReport);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\mtr\\spdc\\report.tsx",["1043","1044","1045","1046","1047","1048","1049","1050","1051","1052","1053","1054"],"import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport moment from 'moment';\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\nimport { getReportMtrSpdc } from './reducer';\nimport ReactToPrint from \"react-to-print\";\n\nexport interface IMtrSpdcReportProps extends StateProps, DispatchProps {}\n\nexport const MtrSpdcReport = (props: IMtrSpdcReportProps) => {\n\n\tconst printRef = useRef(null);\n\tconst [members, setMembers] = useState({\n\t\ttargetDate: new Date(),\n\t\tfirstDate: new Date(),\n\t\treportData: new Array(),\n\t})\n\n  useEffect(() => {\n\t\tprops.getReportMtrSpdc(members.targetDate);\n\t\t// props.getReportMtrSpdc(new Date(Date.parse('2021-02-01')));\n  }, []);\n\n\tuseEffect(() => {\n\t\t\n\t\tif( !props.reportMtrSpdcData )\n\t\t\treturn ;\n\n\t\tconst firstDate = moment(props.reportMtrSpdcData.firstDay);\n\n\t\tconst dataMap = new Map();\n\t\tfor( let row of props.reportMtrSpdcData.data) {\n\t\t\tif( !dataMap.has( row.SNSR_ID) ){\n\t\t\t\tdataMap.set( row.SNSR_ID, {\n\t\t\t\t\tSNSR_ID: row.SNSR_ID,\n\t\t\t\t\tEQIP_NM: row.EQIP_NM,\n\t\t\t\t\tSNSR_NM: row.SNSR_NM,\n\t\t\t\t\tresult: [\n\t\t\t\t\t\t['', '', 0],\t\t\t// 일\n\t\t\t\t\t\t['', '', 0],\t\t\t// 월\n\t\t\t\t\t\t['', '', 0],\t\t\t// 화\n\t\t\t\t\t\t['', '', 0],\t\t\t// 수\n\t\t\t\t\t\t['', '', 0],\t\t\t// 목\n\t\t\t\t\t\t['', '', 0],\t\t\t// 금\n\t\t\t\t\t\t['', '', 0],\t\t\t// 토\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst results = props.reportMtrSpdcData.data.filter( (value) => value.IsAlarm == true );\n\t\tfor( let result of results){\n\n\t\t\tif( !dataMap.has(result.SNSR_ID) )\n\t\t\t\tcontinue;\n\n\t\t\tlet result1 = '';\n\t\t\tlet result2 = '';\n\n\t\t\t// Corona, Floating, Noise, Void, TtoT, Surface\n\t\t\tif (result.Corona != 0) {\n\t\t\t\tresult1 += result.Corona + \"/\";\n\t\t\t\tresult2 += \"C/\";\n\t\t\t}\n\t\t\tif (result.Floating != 0) {\n\t\t\t\t\tresult1 += result.Floating + \"/\";\n\t\t\t\t\tresult2 += \"F/\";\n\t\t\t}\n\t\t\tif (result.Noise != 0) {\n\t\t\t\t\tresult1 += result.Noise + \"/\";\n\t\t\t\t\tresult2 += \"N/\";\n\t\t\t}\n\t\t\tif (result.Void != 0) {\n\t\t\t\t\tresult1 += result.Void + \"/\";\n\t\t\t\t\tresult2 += \"V/\";\n\t\t\t}\n\t\t\tif (result.TtoT != 0) {\n\t\t\t\t\tresult1 += result.TtoT + \"/\";\n\t\t\t\t\tresult2 += \"T/\";\n\t\t\t}\n\t\t\tif (result.Surface != 0) {\n\t\t\t\t\tresult1 += result.Surface + \"/\";\n\t\t\t\t\tresult2 += \"S/\";\n\t\t\t}\n\n\t\t\t// 요일을 찾아\n\t\t\tconst diff = moment(result.EventDate).diff(firstDate, \"days\");\n\t\t\tdataMap.get(result.SNSR_ID).result[diff] = [ result1.substring(0, result1.length - 1), result2.substring(0, result2.length - 1), result.TotalCount];\n\n\t\t\t// console.log(`d[${moment(result.EventDate).format('YYYY-MM-DD')}] firstDay[${firstDate.format('YYYY-MM-DD')}] diff[${diff}]`);\n\t\t\t// console.log(`SNSR_ID[${result.SNSR_ID}] result1[${result1.substring(0, result1.length - 1)}] result2[${result2.substring(0, result2.length - 1)}] result3[${result.TotalCount}]`);\n\t\t}\n\n\t\tconst list = [...dataMap.values()].sort( (a, b) => {\n\t\t\tif( b.EQIP_NM > a.EQIP_NM ){\t// 설비명\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse if( b.EQIP_NM < a.EQIP_NM ){\t// 설비명\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\telse{\t// 설비명이 같은 경우\n\t\t\t\tif( b.SNSR_NM >= a.SNSR_NM )\n\t\t\t\t\treturn 1;\n\t\t\t\telse\n\t\t\t\t\treturn 0;\t\n\t\t\t}\n\t\t});\n\n\t\t// console.log(list);\n\n\t\tsetMembers({\n\t\t\t...members,\n\t\t\tfirstDate: props.reportMtrSpdcData.firstDay,\n\t\t\treportData: list,\n\t\t});\n\n  }, [props.reportMtrSpdcData]);\n\n\tconst reportPage = (start : number, end : number) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className='include'>\n\t\t\t\t\t<section className=\"area-title\">\n\t\t\t\t\t\t<h1>MTR 부분방전 주간보고서</h1>\n\t\t\t\t\t\t<div className=\"area-sign\">\n\t\t\t\t\t\t\t\t<table>\n\t\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>담당</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>관리</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>승인</th>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section className=\"area-contents\">\n\t\t\t\t\t\t<table className=\"table-db\">\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th colSpan={2}>장비/일자</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={3}>{moment(members.firstDate).format('MM-DD')} (일)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={3}>{moment(members.firstDate).add(1,\"day\").format('MM-DD')} (월))</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={3}>{moment(members.firstDate).add(2,\"day\").format('MM-DD')} (화)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={3}>{moment(members.firstDate).add(3,\"day\").format('MM-DD')} (수)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={3}>{moment(members.firstDate).add(4,\"day\").format('MM-DD')} (목)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={3}>{moment(members.firstDate).add(5,\"day\").format('MM-DD')} (금)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={3}>{moment(members.firstDate).add(6,\"day\").format('MM-DD')} (토)</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th>설비</th>\n\t\t\t\t\t\t\t\t\t<th>센서NO</th>\n\t\t\t\t\t\t\t\t\t<th>이상건수</th>\n\t\t\t\t\t\t\t\t\t<th>발생유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t\t\t<th>이상건수</th>\n\t\t\t\t\t\t\t\t\t<th>발생유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t\t\t<th>이상건수</th>\n\t\t\t\t\t\t\t\t\t<th>발생유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t\t\t<th>이상건수</th>\n\t\t\t\t\t\t\t\t\t<th>발생유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t\t\t<th>이상건수</th>\n\t\t\t\t\t\t\t\t\t<th>발생유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t\t\t<th>이상건수</th>\n\t\t\t\t\t\t\t\t\t<th>발생유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t\t\t<th>이상건수</th>\n\t\t\t\t\t\t\t\t\t<th>발생유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tmembers.reportData.map( ( row ) => {\n\t\t\t\t\t\t\t\t\treturn (<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>{row.EQIP_NM}</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>{row.SNSR_NM}</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[0][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[0][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[0][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[1][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[1][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[1][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[2][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[2][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[2][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[3][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[3][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[3][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[4][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[4][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[4][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[5][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[5][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[5][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[6][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[6][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[6][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>);\n\t\t\t\t\t\t\t\t\t}).slice(start, Math.min( end, members.reportData.length ))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t\t<table className=\"table-db caption\">\n\t\t\t\t\t\t\t<colgroup>\n\t\t\t\t\t\t\t\t\t<col style={{width: '10%'}} />\n\t\t\t\t\t\t\t\t\t<col style={{width: '40%'}} />\n\t\t\t\t\t\t\t\t\t<col style={{width: '10%'}} />\n\t\t\t\t\t\t\t\t\t<col style={{width: '40%'}} />\n\t\t\t\t\t\t\t</colgroup>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th>이상징후 센서</th>\n\t\t\t\t\t\t\t\t\t<td>1. 동일유형 DATA 1시간 이후 지속 & 1시간 내에 4회 이상<br/>\n\t\t\t\t\t\t\t\t\t\t\t2. EVENT DATA 발생건수 (1일 20회)<br/>\n\t\t\t\t\t\t\t\t\t\t\t※ 참고 (F: 5회, V: 2회, P: 3회 이벤트 발생 시 = 5/2/3 | F/V/P | 6, 이상징후건수 5)</td>\n\t\t\t\t\t\t\t\t\t<th>범례</th>\n\t\t\t\t\t\t\t\t\t<td>F : 플로팅 , V : 보이드, T : 턴투턴, <br/> S : 서패스, C : 코로나, N : 노이즈</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n\n\tconst reportPages = () =>\n\t{\n\t\t// console.log('reportPages');\n\t\tconst lineCnt = 16;\n\t\tconst pageCnt = Math.max(Math.ceil(members.reportData.length / lineCnt), 1);\n\n\t\tconst pages = [];\n\n\t\tfor(let i = 0; i < pageCnt; i ++){\n\t\t\tpages.push(reportPage( lineCnt * i, lineCnt * (i+1)));\n\t\t\tpages.push(<p className='pagebreak'/>);\n\t\t}\n\n\t\t// console.log(pages);\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div>\n\t\t\t\t\t{pages}\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n\n  return (\n    <>\n      <div className='contents-area none-aside print-area'>\n        <div className='container'>\n          <div className='leftside'>\n\t\t\t\t\t\t{/* <div className='' id='print-contents' style={{ }}> */}\n\t\t\t\t\t\t{/*A4 용지크기 비율 : 1:1.141 Include print-contents.html*/}\n            <div ref={printRef} className='paper' id='print-contents' style={{ width: '846px', height: '600px' }}>\n\t\t\t\t\t\t\t{reportPages()}\n            </div>\n          </div>\n          <div className='rightside'>\n            <h6>MTR 부분방전 주간보고서</h6>\n            <div className='nav-print gap-up-30'>\n              <ul>\n                <li className='obj-term width-10'>\n                  <span>조회 기준 일자</span>\n                  <div className='obj-calendar'>\n                    <i className='icon-calendar'></i>\n                    <DateRangePicker\n\t\t\t\t\t\t\t\t\t\t\tonApply={(event, picker) => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetMembers({\n\t\t\t\t\t\t\t\t\t\t\t\t\t...members,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttargetDate: picker.startDate.toDate(),\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\t\tprops.getReportMtrSpdc(picker.startDate.toDate());\n\t\t\t\t\t\t\t\t\t\t\t}}\n                      initialSettings={{\n                        singleDatePicker: true,\n                        startDate: moment().startOf('day'),\n                        locale: {\n                          format: 'YYYY-MM-DD',\n                        },\n                      }}>\n                      <input type='text' name='datetimes' />\n                    </DateRangePicker>\n                  </div>\n                </li>\n              </ul>\n            </div>\n\t\t\t\t\t\t<ReactToPrint\n\t\t\t\t\t\t\ttrigger={()=><a className='btn submit wide gap-up-60' href='#'>인쇄하기</a>}\n\t\t\t\t\t\t\tcontent={()=>printRef.current}\n\t\t\t\t\t\t/>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ reportMtrSpdcData }: IRootState) => ({\n\treportMtrSpdcData: reportMtrSpdcData.data,\n});\n\nconst mapDispatchToProps = {\n\tgetReportMtrSpdc,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MtrSpdcReport);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\mtr\\oltc-ofu\\report.tsx",["1055","1056","1057","1058"],"import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport moment from 'moment';\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\nimport { getReportMtrOltcOfu } from './reducer';\nimport ReactToPrint from \"react-to-print\";\n\nexport interface IMtrOltcOfuReportProps extends StateProps, DispatchProps {}\n\nexport const MtrOltcOfuReport = (props: IMtrOltcOfuReportProps) => {\n\n\tconst printRef = useRef(null);\n\tconst [members, setMembers] = useState({\n\t\ttargetDate: new Date(),\n\t\tfirstDate: new Date(),\n\t\treportData: new Array(),\n\t})\n\n  useEffect(() => {\n\t\tprops.getReportMtrOltcOfu(members.targetDate);\n\t\t// props.getReportMtrOltcOfu(new Date('2020-12-07'));\n  }, []);\n\n\tuseEffect(() => {\n\n\t\tif( !props.reportMtrOltcOfuData )\n\t\t\treturn ;\n\n\t\tconst firstDate = moment(props.reportMtrOltcOfuData.firstDay);\n\n\t\tconst dataMap = new Map();\n\t\tfor( let row of props.reportMtrOltcOfuData.data) {\n\t\t\tconst key = row.EQIP_NM + \"-\" + row.SNSR_NM;\n\t\t\tif( !dataMap.has( key ) ){\n\t\t\t\tdataMap.set( key, {\n\t\t\t\t\tEQIP_NM: row.EQIP_NM,\n\t\t\t\t\tSNSR_NM: row.SNSR_NM,\n\t\t\t\t\tresult: [\n\t\t\t\t\t\t['', ''],\t\t\t// 일\n\t\t\t\t\t\t['', ''],\t\t\t// 월\n\t\t\t\t\t\t['', ''],\t\t\t// 화\n\t\t\t\t\t\t['', ''],\t\t\t// 수\n\t\t\t\t\t\t['', ''],\t\t\t// 목\n\t\t\t\t\t\t['', ''],\t\t\t// 금\n\t\t\t\t\t\t['', ''],\t\t\t// 토\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst results = props.reportMtrOltcOfuData.data;\n\t\tfor( let result of results){\n\n\t\t\tconst key = result.EQIP_NM + \"-\" + result.SNSR_NM;\n\n\t\t\tif( !dataMap.has(key) )\n\t\t\t\tcontinue;\n\n\t\t\t// 요일을 찾아\n\t\t\tconst diff = moment(result.OCCR_TIME).diff(firstDate, \"days\");\n\t\t\tdataMap.get(key).result[diff] = [ result.DIAG_RSLT, result.RSLT_CNT ];\n\n\t\t\t// console.log(`d[${moment(result.EventDate).format('YYYY-MM-DD')}] firstDay[${firstDate.format('YYYY-MM-DD')}] diff[${diff}]`);\n\t\t\t// console.log(`SNSR_ID[${result.SNSR_ID}] result1[${result1.substring(0, result1.length - 1)}] result2[${result2.substring(0, result2.length - 1)}] result3[${result.TotalCount}]`);\n\t\t}\n\n\t\tconst list = [...dataMap.values()].sort( (a, b) => {\n\t\t\tif( b.EQIP_NM > a.EQIP_NM ){\t// 설비명\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse if( b.EQIP_NM < a.EQIP_NM ){\t// 설비명\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\telse{\t// 설비명이 같은 경우\n\t\t\t\tif( b.SNSR_NM >= a.SNSR_NM )\n\t\t\t\t\treturn 1;\n\t\t\t\telse\n\t\t\t\t\treturn 0;\t\n\t\t\t}\n\t\t});\n\n\t\t// console.log(list);\n\n\t\tsetMembers({\n\t\t\t...members,\n\t\t\tfirstDate: props.reportMtrOltcOfuData.firstDay,\n\t\t\treportData: list,\n\t\t});\n\n  }, [props.reportMtrOltcOfuData]);\n\n\tconst reportPage = (start : number, end : number) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className='include'>\n\t\t\t\t\t<section className=\"area-title\">\n\t\t\t\t\t\t<h1>OLTC 모터 주간보고서</h1>\n\t\t\t\t\t\t<div className=\"area-sign\">\n\t\t\t\t\t\t\t\t<table>\n\t\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>담당</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>관리</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>승인</th>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section className=\"area-contents\">\n\t\t\t\t\t\t<table className=\"table-db\">\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th colSpan={2}>장비/일자</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={2}>{moment(members.firstDate).format('MM-DD')} (일)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={2}>{moment(members.firstDate).add(1,\"day\").format('MM-DD')} (월))</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={2}>{moment(members.firstDate).add(2,\"day\").format('MM-DD')} (화)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={2}>{moment(members.firstDate).add(3,\"day\").format('MM-DD')} (수)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={2}>{moment(members.firstDate).add(4,\"day\").format('MM-DD')} (목)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={2}>{moment(members.firstDate).add(5,\"day\").format('MM-DD')} (금)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={2}>{moment(members.firstDate).add(6,\"day\").format('MM-DD')} (토)</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th>설비</th>\n\t\t\t\t\t\t\t\t\t<th>센서NO</th>\n\t\t\t\t\t\t\t\t\t<th>진단유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t\t\t<th>진단유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t\t\t<th>진단유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t\t\t<th>진단유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t\t\t<th>진단유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t\t\t<th>진단유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t\t\t<th>진단유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tmembers.reportData.map( ( row ) => {\n\t\t\t\t\t\t\t\t\treturn (<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>{row.EQIP_NM}</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>{row.SNSR_NM}</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[0][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[0][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[1][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[1][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[2][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[2][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[3][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[3][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[4][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[4][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[5][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[5][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[6][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[6][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>);\n\t\t\t\t\t\t\t\t\t}).slice(start, Math.min( end, members.reportData.length ))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n\n\tconst reportPages = () =>\n\t{\n\t\t// console.log('reportPages');\n\t\tconst lineCnt = 16;\n\t\tconst pageCnt = Math.max(Math.ceil(members.reportData.length / lineCnt), 1);\n\n\t\tconst pages = [];\n\n\t\tfor(let i = 0; i < pageCnt; i ++){\n\t\t\tpages.push(reportPage( lineCnt * i, lineCnt * (i+1)));\n\t\t\tpages.push(<p className='pagebreak'/>);\n\t\t}\n\n\t\t// console.log(pages);\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div>\n\t\t\t\t\t{pages}\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n\n  return (\n    <>\n      <div className='contents-area none-aside print-area'>\n        <div className='container'>\n          <div className='leftside'>\n\t\t\t\t\t\t{/* <div className='' id='print-contents' style={{ }}> */}\n\t\t\t\t\t\t{/*A4 용지크기 비율 : 1:1.141 Include print-contents.html*/}\n            <div ref={printRef} className='paper' id='print-contents' style={{ width: '846px', height: '600px' }}>\n\t\t\t\t\t\t\t{reportPages()}\n            </div>\n\t\t\t\t\t</div>\n          <div className='rightside'>\n            <h6>OLTC 모터 주간보고서</h6>\n            <div className='nav-print gap-up-30'>\n              <ul>\n                <li className='obj-term width-10'>\n                  <span>조회 기준 일자</span>\n                  <div className='obj-calendar'>\n                    <i className='icon-calendar'></i>\n\t\t\t\t\t\t\t\t\t\t<DateRangePicker\n\t\t\t\t\t\t\t\t\t\t\tonApply={(event, picker) => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetMembers({\n\t\t\t\t\t\t\t\t\t\t\t\t\t...members,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttargetDate: picker.startDate.toDate(),\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\t\tprops.getReportMtrOltcOfu(picker.startDate.toDate());\n\t\t\t\t\t\t\t\t\t\t\t}}\n                      initialSettings={{\n                        singleDatePicker: true,\n                        startDate: moment().startOf('day'),\n                        locale: {\n                          format: 'YYYY-MM-DD',\n                        },\n                      }}>\n                      <input type='text' name='datetimes' />\n                    </DateRangePicker>\n                  </div>\n                </li>\n              </ul>\n            </div>\n\t\t\t\t\t\t<ReactToPrint\n\t\t\t\t\t\t\ttrigger={()=><a className='btn submit wide gap-up-60' href='#'>인쇄하기</a>}\n\t\t\t\t\t\t\tcontent={()=>printRef.current}\n\t\t\t\t\t\t/>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ reportMtrOltcOfuData }: IRootState) => ({\n\treportMtrOltcOfuData: reportMtrOltcOfuData.data,\n});\n\nconst mapDispatchToProps = {\n\tgetReportMtrOltcOfu,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MtrOltcOfuReport);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\report\\mtr\\oltc-spdc\\report.tsx",["1059","1060","1061","1062","1063","1064","1065","1066","1067","1068","1069","1070"],"import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\nimport { getReportMtrOltcSpdc } from './reducer';\nimport ReactToPrint from \"react-to-print\";\n\nexport interface IMtrOltcSpdcReportProps extends StateProps, DispatchProps {}\n\nexport const MtrOltcSpdcReport = (props: IMtrOltcSpdcReportProps) => {\n\n\tconst printRef = useRef(null);\n\tconst [members, setMembers] = useState({\n\t\ttargetDate: new Date(),\n\t\tfirstDate: new Date(),\n\t\treportData: new Array(),\n\t})\n\n  useEffect(() => {\n\t\tprops.getReportMtrOltcSpdc(members.targetDate);\n\t\t// props.getReportMtrOltcSpdc(new Date('2021-02-01'));\n  }, []);\n\n\tuseEffect(() => {\n\n\t\tif( !props.reportMtrOltcSpdcData )\n\t\t\treturn ;\n\n\t\tconst firstDate = moment(props.reportMtrOltcSpdcData.firstDay);\n\n\t\tconst dataMap = new Map();\n\t\tfor( let row of props.reportMtrOltcSpdcData.data) {\n\t\t\tif( !dataMap.has( row.SNSR_ID) ){\n\t\t\t\tdataMap.set( row.SNSR_ID, {\n\t\t\t\t\tSNSR_ID: row.SNSR_ID,\n\t\t\t\t\tEQIP_NM: row.EQIP_NM,\n\t\t\t\t\tSNSR_NM: row.SNSR_NM,\n\t\t\t\t\tresult: [\n\t\t\t\t\t\t['', '', 0],\t\t\t// 일\n\t\t\t\t\t\t['', '', 0],\t\t\t// 월\n\t\t\t\t\t\t['', '', 0],\t\t\t// 화\n\t\t\t\t\t\t['', '', 0],\t\t\t// 수\n\t\t\t\t\t\t['', '', 0],\t\t\t// 목\n\t\t\t\t\t\t['', '', 0],\t\t\t// 금\n\t\t\t\t\t\t['', '', 0],\t\t\t// 토\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst results = props.reportMtrOltcSpdcData.data.filter( (value) => value.IsAlarm == true );\n\t\tfor( let result of results){\n\n\t\t\tif( !dataMap.has(result.SNSR_ID) )\n\t\t\t\tcontinue;\n\n\t\t\tlet result1 = '';\n\t\t\tlet result2 = '';\n\n\t\t\t// Corona, Floating, Noise, Void, TtoT, Surface\n\t\t\tif (result.Corona != 0) {\n\t\t\t\tresult1 += result.Corona + \"/\";\n\t\t\t\tresult2 += \"C/\";\n\t\t\t}\n\t\t\tif (result.Floating != 0) {\n\t\t\t\t\tresult1 += result.Floating + \"/\";\n\t\t\t\t\tresult2 += \"F/\";\n\t\t\t}\n\t\t\tif (result.Noise != 0) {\n\t\t\t\t\tresult1 += result.Noise + \"/\";\n\t\t\t\t\tresult2 += \"N/\";\n\t\t\t}\n\t\t\tif (result.Void != 0) {\n\t\t\t\t\tresult1 += result.Void + \"/\";\n\t\t\t\t\tresult2 += \"V/\";\n\t\t\t}\n\t\t\tif (result.TtoT != 0) {\n\t\t\t\t\tresult1 += result.TtoT + \"/\";\n\t\t\t\t\tresult2 += \"T/\";\n\t\t\t}\n\t\t\tif (result.Surface != 0) {\n\t\t\t\t\tresult1 += result.Surface + \"/\";\n\t\t\t\t\tresult2 += \"S/\";\n\t\t\t}\n\n\t\t\t// 요일을 찾아\n\t\t\tconst diff = moment(result.EventDate).diff(firstDate, \"days\");\n\t\t\tdataMap.get(result.SNSR_ID).result[diff] = [ result1.substring(0, result1.length - 1), result2.substring(0, result2.length - 1), result.TotalCount];\n\n\t\t\t// console.log(`d[${moment(result.EventDate).format('YYYY-MM-DD')}] firstDay[${firstDate.format('YYYY-MM-DD')}] diff[${diff}]`);\n\t\t\t// console.log(`SNSR_ID[${result.SNSR_ID}] result1[${result1.substring(0, result1.length - 1)}] result2[${result2.substring(0, result2.length - 1)}] result3[${result.TotalCount}]`);\n\t\t}\n\n\t\tconst list = [...dataMap.values()].sort( (a, b) => {\n\t\t\tif( b.EQIP_NM > a.EQIP_NM ){\t// 설비명\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse if( b.EQIP_NM < a.EQIP_NM ){\t// 설비명\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\telse{\t// 설비명이 같은 경우\n\t\t\t\tif( b.SNSR_NM >= a.SNSR_NM )\n\t\t\t\t\treturn 1;\n\t\t\t\telse\n\t\t\t\t\treturn 0;\t\n\t\t\t}\n\t\t});\n\n\t\t// console.log(list);\n\n\t\tsetMembers({\n\t\t\t...members,\n\t\t\tfirstDate: props.reportMtrOltcSpdcData.firstDay,\n\t\t\treportData: list,\n\t\t});\n  }, [props.reportMtrOltcSpdcData]);\n\n\tconst reportPage = (start : number, end : number) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className='include'>\n\t\t\t\t\t<section className=\"area-title\">\n\t\t\t\t\t\t<h1>OLTC 부분방전 주간보고서</h1>\n\t\t\t\t\t\t<div className=\"area-sign\">\n\t\t\t\t\t\t\t\t<table>\n\t\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>담당</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>관리</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th>승인</th>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section className=\"area-contents\">\n\t\t\t\t\t\t<table className=\"table-db\">\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th colSpan={2}>장비/일자</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={3}>{moment(members.firstDate).format('MM-DD')} (일)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={3}>{moment(members.firstDate).add(1,\"day\").format('MM-DD')} (월))</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={3}>{moment(members.firstDate).add(2,\"day\").format('MM-DD')} (화)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={3}>{moment(members.firstDate).add(3,\"day\").format('MM-DD')} (수)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={3}>{moment(members.firstDate).add(4,\"day\").format('MM-DD')} (목)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={3}>{moment(members.firstDate).add(5,\"day\").format('MM-DD')} (금)</th>\n\t\t\t\t\t\t\t\t\t<th colSpan={3}>{moment(members.firstDate).add(6,\"day\").format('MM-DD')} (토)</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th>설비</th>\n\t\t\t\t\t\t\t\t\t<th>센서NO</th>\n\t\t\t\t\t\t\t\t\t<th>이상건수</th>\n\t\t\t\t\t\t\t\t\t<th>발생유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t\t\t<th>이상건수</th>\n\t\t\t\t\t\t\t\t\t<th>발생유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t\t\t<th>이상건수</th>\n\t\t\t\t\t\t\t\t\t<th>발생유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t\t\t<th>이상건수</th>\n\t\t\t\t\t\t\t\t\t<th>발생유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t\t\t<th>이상건수</th>\n\t\t\t\t\t\t\t\t\t<th>발생유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t\t\t<th>이상건수</th>\n\t\t\t\t\t\t\t\t\t<th>발생유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t\t\t<th>이상건수</th>\n\t\t\t\t\t\t\t\t\t<th>발생유형</th>\n\t\t\t\t\t\t\t\t\t<th>총발생수</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tmembers.reportData.map( ( row ) => {\n\t\t\t\t\t\t\t\t\treturn (<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>{row.EQIP_NM}</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>{row.SNSR_NM}</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[0][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[0][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[0][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[1][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[1][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[1][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[2][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[2][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[2][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[3][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[3][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[3][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[4][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[4][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[4][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[5][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[5][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[5][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[6][0]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[6][1]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{row.result[6][2]}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>);\n\t\t\t\t\t\t\t\t\t}).slice(start, Math.min( end, members.reportData.length ))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t\t<table className=\"table-db caption\">\n\t\t\t\t\t\t\t<colgroup>\n\t\t\t\t\t\t\t\t\t<col style={{width: '10%'}} />\n\t\t\t\t\t\t\t\t\t<col style={{width: '40%'}} />\n\t\t\t\t\t\t\t\t\t<col style={{width: '10%'}} />\n\t\t\t\t\t\t\t\t\t<col style={{width: '40%'}} />\n\t\t\t\t\t\t\t</colgroup>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th>이상징후 센서</th>\n\t\t\t\t\t\t\t\t\t<td>1. 동일유형 DATA 1시간 이후 지속 & 1시간 내에 4회 이상<br/>\n\t\t\t\t\t\t\t\t\t\t\t2. EVENT DATA 발생건수 (1일 20회)<br/>\n\t\t\t\t\t\t\t\t\t\t\t※ 참고 (F: 5회, V: 2회, P: 3회 이벤트 발생 시 = 5/2/3 | F/V/P | 6, 이상징후건수 5)</td>\n\t\t\t\t\t\t\t\t\t<th>범례</th>\n\t\t\t\t\t\t\t\t\t<td>F : 플로팅 , V : 보이드, T : 턴투턴, <br/> S : 서패스, C : 코로나, N : 노이즈</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n\n\tconst reportPages = () =>\n\t{\n\t\t// console.log('reportPages');\n\t\tconst lineCnt = 16;\n\t\tconst pageCnt = Math.max(Math.ceil(members.reportData.length / lineCnt), 1);\n\n\t\tconst pages = [];\n\n\t\tfor(let i = 0; i < pageCnt; i ++){\n\t\t\tpages.push(reportPage( lineCnt * i, lineCnt * (i+1)));\n\t\t\tpages.push(<p className='pagebreak'/>);\n\t\t}\n\n\t\t// console.log(pages);\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div>\n\t\t\t\t\t{pages}\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n\n  return (\n    <>\n      <div className='contents-area none-aside print-area'>\n        <div className='container'>\n          <div className='leftside'>\n\t\t\t\t\t\t{/* <div className='' id='print-contents' style={{ }}> */}\n\t\t\t\t\t\t{/*A4 용지크기 비율 : 1:1.141 Include print-contents.html*/}\n\t\t\t\t\t\t<div ref={printRef} className='paper' id='print-contents' style={{ width: '846px', height: '600px' }}>\n\t\t\t\t\t\t\t{reportPages()}\n\t\t\t\t\t\t</div>\n          </div>\n          <div className='rightside'>\n\t\t\t\t\t\t{/* 컴포넌트로 변경 */}\n            <h6>OLTC 부분방전 주간보고서</h6>\n            <div className='nav-print gap-up-30'>\n              <ul>\n                <li className='obj-term width-10'>\n                  <span>조회 기준 일자</span>\n                  <div className='obj-calendar'>\n                    <i className='icon-calendar'></i>\n                    <DateRangePicker\n\t\t\t\t\t\t\t\t\t\t\tonApply={(event, picker) => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetMembers({\n\t\t\t\t\t\t\t\t\t\t\t\t\t...members,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttargetDate: picker.startDate.toDate(),\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\t\tprops.getReportMtrOltcSpdc(picker.startDate.toDate());\n\t\t\t\t\t\t\t\t\t\t\t}}\n                      initialSettings={{\n                        singleDatePicker: true,\n                        startDate: moment().startOf('day'),\n                        locale: {\n                          format: 'YYYY-MM-DD',\n                        },\n                      }}>\n                      <input type='text' name='datetimes' />\n                    </DateRangePicker>\n                  </div>\n                </li>\n              </ul>\n            </div>\n\t\t\t\t\t\t<ReactToPrint\n\t\t\t\t\t\t\ttrigger={()=><a className='btn submit wide gap-up-60' href='#'>인쇄하기</a>}\n\t\t\t\t\t\t\tcontent={()=>printRef.current}\n\t\t\t\t\t\t/>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ reportMtrOltcSpdcData }: IRootState) => ({\n\treportMtrOltcSpdcData: reportMtrOltcSpdcData.data,\n});\n\nconst mapDispatchToProps = {\n\tgetReportMtrOltcSpdc,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MtrOltcSpdcReport);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\setup\\dga\\setup-dga.tsx",["1071"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { IRootState } from 'shared/reducers';\n\nexport interface ISetupDgaProps extends StateProps, DispatchProps {}\n\nexport const SetupDga = (props: ISetupDgaProps) => {\n\n  useEffect(() => {\n    $('select.lookup')['selectOrDie']({\n      size: 5,\n    });\n  }, []);\n\n  return (\n    <>\n      <div className='contents-area none-aside setting'>\n        <section className='contents-header none-border'>\n          <h2>DGA 센서 설정</h2>\n          {/*<ol className='route'>*/}\n          {/*  <li><a href=''><img src={require('assets/img/icon_home.svg').default} />&nbsp;온수 변전소</a></li>*/}\n          {/*  <li><a href=''>설정</a></li>*/}\n          {/*  <li><a href=''>설비별 환경설정</a></li>*/}\n          {/*</ol>*/}\n        </section>\n        <div className='container'>\n          <section className='gis-parts solo'>\n            <nav className='sub-setup'>\n              <ul>\n                <li><Link to={'/settings/setup/set-pd'}>PD 센서 설정</Link></li>\n                <li><Link to={'/settings/setup/set-scbr'}>차단기 센서 설정</Link></li>\n                <li><Link to={'/settings/setup/set-oltc'}>OLTC 센서 설정</Link></li>\n                <li><Link to={'/settings/setup/set-bushing'}>Bushing 센서 설정</Link></li>\n                <li className={'on'}><Link to={'/settings/setup/set-dga'}>DGA 센서 설정</Link></li>\n              </ul>\n            </nav>\n            <div className='section-box setup'>\n              {/* // 디자인 페이지에는 없는 내용이나\n                      필요할것 같아서 마크업만 삽입해두었습니다.\n                   // 사용할 경우 주석 해제해서 쓰시면 됩니다.\n              <div class=\"nav-index\">\n                  <div class=\"obj-wrapper\">\n                      <ul>\n                          <li class=\"width-15\">\n                              <span>LU 선택</span>\n                              <select class=\"lookup\">\n                                  <option value=\"1\">GLU01</option>\n                                  <option value=\"2\">GLU02</option>\n                                  <option value=\"3\">GLU03</option>\n                                  <option value=\"4\">GLU04</option>\n                                  <option value=\"5\">MLU01-1</option>\n                                  <option value=\"6\">MLU02-1</option>\n                                  <option value=\"7\">MLU03-1</option>\n                              </select>\n                          </li>\n                          <li class=\"width-15\">\n                              <span>센서 선택</span>\n                              <select class=\"lookup\">\n                                  <option value=\"1\">GPD-01</option>\n                                  <option value=\"3\">GPD-02</option>\n                                  <option value=\"4\">GPD-04</option>\n                                  <option value=\"5\">GPD-05</option>\n                                  <option value=\"6\">GPD-07</option>\n                              </select>\n                          </li>\n                          <li class=\"width-15\">\n                              <span>노이즈 센서명 선택</span>\n                              <select class=\"lookup\">\n                                  <option value=\"216\">GLU01 : EGB-FR-11</option>\n                                  <option value=\"217\">GLU01 : EBG-FR-12</option>\n                                  <option value=\"218\">GLU01 : EBG-FR-10</option>\n                                  <option value=\"9\">GLU01 : GPD-NS-01</option>\n                              </select>\n                          </li>\n                          <li class=\"\"><span>&nbsp;</span>\n                              <div class=\"\" style=\"margin-top: 5px;\"><a class=\"btn submit\" href=\"\">조회</a></div>\n                          </li>\n                      </ul>\n                  </div>\n              </div>\n              */}\n              <div className='contents-table'>\n                <div className='setup-header'>\n                  <div className='text-left dis-block'>\n                    <h2>DGA 센서 설정</h2>\n                  </div>\n                  <div className='text-right dis-block'>\n                    <button className='btn save' type='button'>저장</button>\n                  </div>\n                </div>\n                <div className='setup-table-wrapper'>\n                  <h1 className='dga first'>초기</h1>\n                  <table className='table-db setup dga first'>\n                    <colgroup>\n                      <col style={{ minWidth: '120px' }} />\n                      <col style={{ minWidth: '120px' }} />\n                    </colgroup>\n                    <thead>\n                    <tr className='border-right'>\n                      <th colSpan={2}>&nbsp;</th>\n                      <th colSpan={3}>C2H2</th>\n                      <th colSpan={3}>H2</th>\n                      <th colSpan={3}>CO</th>\n                      <th colSpan={3}>H2O</th>\n                    </tr>\n                    <tr className='border-right'>\n                      <th>LU명</th>\n                      <th>센서명</th>\n                      <th>초기값</th>\n                      <th>정상</th>\n                      <th>주의</th>\n                      <th>초기값</th>\n                      <th>정상</th>\n                      <th>주의</th>\n                      <th>초기값</th>\n                      <th>정상</th>\n                      <th>주의</th>\n                      <th>초기값</th>\n                      <th>정상</th>\n                      <th>주의</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    <tr>\n                      <td>DGA01</td>\n                      <td>SIML-A</td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    <tr>\n                      <td>DGA01</td>\n                      <td>SIML-A</td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    <tr>\n                      <td>DGA01</td>\n                      <td>SIML-A</td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    <tr>\n                      <td>DGA01</td>\n                      <td>SIML-A</td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    <tr>\n                      <td>DGA01</td>\n                      <td>SIML-A</td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    <tr>\n                      <td>DGA01</td>\n                      <td>SIML-A</td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    <tr>\n                      <td>DGA01</td>\n                      <td>SIML-A</td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    <tr>\n                      <td>DGA01</td>\n                      <td>SIML-A</td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    <tr>\n                      <td>DGA01</td>\n                      <td>SIML-A</td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <div className='text-right'>\n                  <form className='setup search gap-up-30 gap-down-20'>\n                    <input className='search' type='search' name='q' value='Search' />\n                    <input type='submit' value='' className='search-btn' />\n                  </form>\n                </div>\n                <div className='setup-table-wrapper gap-up-50'>\n                  <h1 className='dga long'>중장기</h1>\n                  <table className='table-db setup dga long'>\n                    <colgroup>\n                      <col style={{ minWidth: '120px' }} />\n                      <col style={{ minWidth: '120px' }} />\n                    </colgroup>\n                    <thead>\n                    <tr className='border-right'>\n                      <th colSpan={2}>&nbsp;</th>\n                      <th colSpan={4}>C2H2</th>\n                      <th colSpan={4}>H2</th>\n                      <th colSpan={4}>CO</th>\n                      <th colSpan={4}>H2O</th>\n                    </tr>\n                    <tr className='border-right'>\n                      <th>LU명</th>\n                      <th>센서명</th>\n                      <th>정상</th>\n                      <th>관심</th>\n                      <th>주의</th>\n                      <th>이상</th>\n                      <th>정상</th>\n                      <th>관심</th>\n                      <th>주의</th>\n                      <th>이상</th>\n                      <th>정상</th>\n                      <th>관심</th>\n                      <th>주의</th>\n                      <th>이상</th>\n                      <th>정상</th>\n                      <th>관심</th>\n                      <th>주의</th>\n                      <th>이상</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    <tr>\n                      <td>DGA01</td>\n                      <td>SIML-A</td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    <tr>\n                      <td>DGA01</td>\n                      <td>SIML-A</td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    <tr>\n                      <td>DGA01</td>\n                      <td>SIML-A</td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    <tr>\n                      <td>DGA01</td>\n                      <td>SIML-A</td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    <tr>\n                      <td>DGA01</td>\n                      <td>SIML-A</td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    <tr>\n                      <td>DGA01</td>\n                      <td>SIML-A</td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    <tr>\n                      <td>DGA01</td>\n                      <td>SIML-A</td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    <tr>\n                      <td>DGA01</td>\n                      <td>SIML-A</td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    <tr>\n                      <td>DGA01</td>\n                      <td>SIML-A</td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <div className='text-right'>\n                  <form className='setup search gap-up-30 gap-down-20'>\n                    <input className='search' type='search' name='q' value='Search' />\n                    <input type='submit' value='' className='search-btn' />\n                  </form>\n                </div>\n              </div>\n            </div>\n          </section>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ authentication }: IRootState) => ({\n  // isAuthenticated: authentication.isAuthenticated,\n  // isAdmin: hasAnyAuthority(authentication.account.authorities, [AUTHORITIES.ADMIN]),\n});\n\nconst mapDispatchToProps = {\n  // getSession\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SetupDga);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\setup\\oltc\\setup-oltc.tsx",["1072","1073","1074","1075","1076"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { Link } from 'react-router-dom';\n\nexport interface ISetupOltcProps extends StateProps, DispatchProps {}\n\nexport const SetupOltc = (props: ISetupOltcProps) => {\n\n  useEffect(() => {\n  }, []);\n\n  return (\n    <>\n      <div className='contents-area none-aside setting'>\n        <section className='contents-header none-border'>\n          <h2>OLTC 센서 설정</h2>\n          {/*<ol className='route'>*/}\n          {/*  <li><a href=''><img src={require('assets/img/icon_home.svg').default} />&nbsp;온수 변전소</a></li>*/}\n          {/*  <li><a href=''>설정</a></li>*/}\n          {/*  <li><a href=''>설비별 환경설정</a></li>*/}\n          {/*</ol>*/}\n        </section>\n        <div className='container'>\n          <section className='gis-parts solo'>\n            <nav className='sub-setup'>\n              <ul>\n                <li><Link to={'/settings/setup/set-pd'}>PD 센서 설정</Link></li>\n                <li><Link to={'/settings/setup/set-scbr'}>차단기 센서 설정</Link></li>\n                <li className={'on'}><Link to={'/settings/setup/set-oltc'}>OLTC 센서 설정</Link></li>\n                <li><Link to={'/settings/setup/set-bushing'}>Bushing 센서 설정</Link></li>\n                <li><Link to={'/settings/setup/set-dga'}>DGA 센서 설정</Link></li>\n              </ul>\n            </nav>\n            <div className='section-box setup'>\n              {/* // 디자인 페이지에는 없는 내용이나\n                      필요할것 같아서 마크업만 삽입해두었습니다.\n                   // 사용할 경우 주석 해제해서 쓰시면 됩니다.\n              <div class=\"nav-index\">\n                  <div class=\"obj-wrapper\">\n                      <ul>\n                          <li class=\"width-15\">\n                              <span>LU 선택</span>\n                              <select class=\"lookup\">\n                                  <option value=\"1\">GLU01</option>\n                                  <option value=\"2\">GLU02</option>\n                                  <option value=\"3\">GLU03</option>\n                                  <option value=\"4\">GLU04</option>\n                                  <option value=\"5\">MLU01-1</option>\n                                  <option value=\"6\">MLU02-1</option>\n                                  <option value=\"7\">MLU03-1</option>\n                              </select>\n                          </li>\n                          <li class=\"width-15\">\n                              <span>센서 선택</span>\n                              <select class=\"lookup\">\n                                  <option value=\"1\">GPD-01</option>\n                                  <option value=\"3\">GPD-02</option>\n                                  <option value=\"4\">GPD-04</option>\n                                  <option value=\"5\">GPD-05</option>\n                                  <option value=\"6\">GPD-07</option>\n                              </select>\n                          </li>\n                          <li class=\"width-15\">\n                              <span>노이즈 센서명 선택</span>\n                              <select class=\"lookup\">\n                                  <option value=\"216\">GLU01 : EGB-FR-11</option>\n                                  <option value=\"217\">GLU01 : EBG-FR-12</option>\n                                  <option value=\"218\">GLU01 : EBG-FR-10</option>\n                                  <option value=\"9\">GLU01 : GPD-NS-01</option>\n                              </select>\n                          </li>\n                          <li class=\"\"><span>&nbsp;</span>\n                              <div class=\"\" style=\"margin-top: 5px;\"><a class=\"btn submit\" href=\"\">조회</a></div>\n                          </li>\n                      </ul>\n                  </div>\n              </div>\n              */}\n              <div className='contents-table'>\n                <div className='contents-tabmenu'>\n                  <h2>OLTC 진단 판단기준</h2>\n                  <div className='obj-select option'>\n                    <form className='select-cover'>\n                      <div className='select-box'>\n                        <input type='checkbox' id='select-indicator06' />\n                        <label className='select small' htmlFor='select-indicator06'>10</label>\n                        <div className='option small'>\n                          <a href=''>10</a>\n                          <a href=''>25</a>\n                          <a href=''>50</a>\n                          <a href=''>100</a>\n                        </div>\n                      </div>\n                    </form>\n                  </div>\n                </div>\n                <div className='setup-table-wrapper'>\n                  <table className='table-db setup'>\n                    <colgroup>\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: '160px' }} />\n                      <col style={{ minWidth: '160px' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: '160px' }} />\n                      <col style={{ minWidth: '160px' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: '160px' }} />\n                      <col style={{ minWidth: '160px' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: '160px' }} />\n                      <col style={{ minWidth: '160px' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: '160px' }} />\n                      <col style={{ minWidth: '160px' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: '160px' }} />\n                      <col style={{ minWidth: '160px' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: '160px' }} />\n                      <col style={{ minWidth: '160px' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: '160px' }} />\n                      <col style={{ minWidth: '160px' }} />\n                    </colgroup>\n                    <thead>\n                    <tr className='border-right'>\n                      <th colSpan={5}>&nbsp;</th>\n                      <th colSpan={3}>OLTC 일반탭</th>\n                      <th colSpan={3}>OLTC 중간탭</th>\n                      <th colSpan={3}>돌입 최대 RMS</th>\n                      <th colSpan={3}>돌입 일반탭</th>\n                      <th colSpan={3}>돌입 중간탭</th>\n                      <th colSpan={3}>정상 최대 RMS</th>\n                      <th colSpan={3}>정상 일반탭</th>\n                      <th colSpan={3}>돌입 중간탭</th>\n                      <th colSpan={2}>Tap 1</th>\n                      <th colSpan={2}>Tap 2</th>\n                      <th colSpan={2}>Tap 3</th>\n                      <th colSpan={2}>Tap 4</th>\n                      <th colSpan={2}>Tap 5</th>\n                      <th colSpan={2}>Tap 6</th>\n                      <th colSpan={2}>Tap 7</th>\n                      <th colSpan={2}>Tap 8</th>\n                      <th colSpan={2}>Tap 9</th>\n                      <th colSpan={2}>Tap 10</th>\n                      <th colSpan={2}>Tap 11</th>\n                      <th colSpan={2}>Tap 12</th>\n                      <th colSpan={2}>Tap 13</th>\n                      <th colSpan={2}>Tap 14</th>\n                      <th colSpan={2}>Tap 15</th>\n                      <th colSpan={2}>Tap 16</th>\n                      <th colSpan={2}>Tap 17</th>\n                      <th colSpan={2}>Tap 18</th>\n                      <th colSpan={2}>Tap 19</th>\n                      <th colSpan={2}>Tap 20</th>\n                      <th colSpan={2}>Tap 21</th>\n                    </tr>\n                    <tr className='border-right'>\n                      <th>LU</th>\n                      <th>센서명</th>\n                      <th>제조사</th>\n                      <th>중간탭</th>\n                      <th>SCADA 장치</th>\n                      <th>기준</th>\n                      <th>임계치</th>\n                      <th>요주의</th>\n                      <th>기준</th>\n                      <th>임계치</th>\n                      <th>요주의</th>\n                      <th>기준</th>\n                      <th>임계치</th>\n                      <th>요주의</th>\n                      <th>기준</th>\n                      <th>임계치</th>\n                      <th>요주의</th>\n                      <th>기준</th>\n                      <th>임계치</th>\n                      <th>요주의</th>\n                      <th>기준</th>\n                      <th>임계치</th>\n                      <th>요주의</th>\n                      <th>기준</th>\n                      <th>임계치</th>\n                      <th>요주의</th>\n                      <th>기준</th>\n                      <th>임계치</th>\n                      <th>요주의</th>\n                      <th>최소</th>\n                      <th>최대</th>\n                      <th>최소</th>\n                      <th>최대</th>\n                      <th>최소</th>\n                      <th>최대</th>\n                      <th>최소</th>\n                      <th>최대</th>\n                      <th>최소</th>\n                      <th>최대</th>\n                      <th>최소</th>\n                      <th>최대</th>\n                      <th>최소</th>\n                      <th>최대</th>\n                      <th>최소</th>\n                      <th>최대</th>\n                      <th>최소</th>\n                      <th>최대</th>\n                      <th>최소</th>\n                      <th>최대</th>\n                      <th>최소</th>\n                      <th>최대</th>\n                      <th>최소</th>\n                      <th>최대</th>\n                      <th>최소</th>\n                      <th>최대</th>\n                      <th>최소</th>\n                      <th>최대</th>\n                      <th>최소</th>\n                      <th>최대</th>\n                      <th>최소</th>\n                      <th>최대</th>\n                      <th>최소</th>\n                      <th>최대</th>\n                      <th>최소</th>\n                      <th>최대</th>\n                      <th>최소</th>\n                      <th>최대</th>\n                      <th>최소</th>\n                      <th>최대</th>\n                      <th>최소</th>\n                      <th>최대</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    <tr>\n                      <td><span>GLU01</span></td>\n                      <td><span>PD01</span></td>\n                      <td>\n                        <select className='optional' id='manufacturer'>\n                          <option value='0'>확인불가</option>\n                          <option value='1'>현대 불가리아</option>\n                          <option value='2'>MR</option>\n                        </select>\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    <tr>\n                      <td><span>GLU01</span></td>\n                      <td><span>PD01</span></td>\n                      <td>\n                        <select className='optional' id='manufacturer'>\n                          <option value='0'>확인불가</option>\n                          <option value='1'>현대 불가리아</option>\n                          <option value='2'>MR</option>\n                        </select>\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    <tr>\n                      <td><span>GLU01</span></td>\n                      <td><span>PD01</span></td>\n                      <td>\n                        <select className='optional' id='manufacturer'>\n                          <option value='0'>확인불가</option>\n                          <option value='1'>현대 불가리아</option>\n                          <option value='2'>MR</option>\n                        </select>\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    <tr>\n                      <td><span>GLU01</span></td>\n                      <td><span>PD01</span></td>\n                      <td>\n                        <select className='optional' id='manufacturer'>\n                          <option value='0'>확인불가</option>\n                          <option value='1'>현대 불가리아</option>\n                          <option value='2'>MR</option>\n                        </select>\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    <tr>\n                      <td><span>GLU01</span></td>\n                      <td><span>PD01</span></td>\n                      <td>\n                        <select className='optional' id='manufacturer'>\n                          <option value='0'>확인불가</option>\n                          <option value='1'>현대 불가리아</option>\n                          <option value='2'>MR</option>\n                        </select>\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    {/* // Blank Markup\n                    <tr>\n                        <td><span>GLU01</span></td>\n                        <td><span>PD01</span></td>\n                        <td>\n                            <select class=\"optional\" id=\"manufacturer\">\n                                <option value=\"0\">확인불가</option>\n                                <option value=\"1\">현대 불가리아</option>\n                                <option value=\"2\">MR</option>\n                            </select>\n                        </td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td>\n                            <input type=\"text\" value=\"00\" class=\"input-min\" /> ~\n                            <input type=\"text\" value=\"00\" class=\"input-max\" />\n                        </td>\n                        <td>\n                            <input type=\"text\" value=\"00\" class=\"input-min\" /> ~\n                            <input type=\"text\" value=\"00\" class=\"input-max\" />\n                        </td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td>\n                            <input type=\"text\" value=\"00\" class=\"input-min\" /> ~\n                            <input type=\"text\" value=\"00\" class=\"input-max\" />\n                        </td>\n                        <td>\n                            <input type=\"text\" value=\"00\" class=\"input-min\" /> ~\n                            <input type=\"text\" value=\"00\" class=\"input-max\" />\n                        </td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td>\n                            <input type=\"text\" value=\"00\" class=\"input-min\" /> ~\n                            <input type=\"text\" value=\"00\" class=\"input-max\" />\n                        </td>\n                        <td>\n                            <input type=\"text\" value=\"00\" class=\"input-min\" /> ~\n                            <input type=\"text\" value=\"00\" class=\"input-max\" />\n                        </td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td>\n                            <input type=\"text\" value=\"00\" class=\"input-min\" /> ~\n                            <input type=\"text\" value=\"00\" class=\"input-max\" />\n                        </td>\n                        <td>\n                            <input type=\"text\" value=\"00\" class=\"input-min\" /> ~\n                            <input type=\"text\" value=\"00\" class=\"input-max\" />\n                        </td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td>\n                            <input type=\"text\" value=\"00\" class=\"input-min\" /> ~\n                            <input type=\"text\" value=\"00\" class=\"input-max\" />\n                        </td>\n                        <td>\n                            <input type=\"text\" value=\"00\" class=\"input-min\" /> ~\n                            <input type=\"text\" value=\"00\" class=\"input-max\" />\n                        </td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td>\n                            <input type=\"text\" value=\"00\" class=\"input-min\" /> ~\n                            <input type=\"text\" value=\"00\" class=\"input-max\" />\n                        </td>\n                        <td>\n                            <input type=\"text\" value=\"00\" class=\"input-min\" /> ~\n                            <input type=\"text\" value=\"00\" class=\"input-max\" />\n                        </td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td>\n                            <input type=\"text\" value=\"00\" class=\"input-min\" /> ~\n                            <input type=\"text\" value=\"00\" class=\"input-max\" />\n                        </td>\n                        <td>\n                            <input type=\"text\" value=\"00\" class=\"input-min\" /> ~\n                            <input type=\"text\" value=\"00\" class=\"input-max\" />\n                        </td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td>\n                            <input type=\"text\" value=\"00\" class=\"input-min\" /> ~\n                            <input type=\"text\" value=\"00\" class=\"input-max\" />\n                        </td>\n                        <td>\n                            <input type=\"text\" value=\"00\" class=\"input-min\" /> ~\n                            <input type=\"text\" value=\"00\" class=\"input-max\" />\n                        </td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                        <td><input type=\"text\" value=\"00\" /></td>\n                    </tr>\n                    */}\n                    </tbody>\n                  </table>\n                </div>\n                <div className='text-right'>\n                  <form className='setup search gap-up-30 gap-down-20'>\n                    <input className='search' type='search' name='q' value='Search' />\n                    <input type='submit' value='' className='search-btn' />\n                  </form>\n                </div>\n                {/* // 디자인 페이지 기본값은 페이지 네비게이션이 없습니다.\n                        페이지 네비게이션 필요할 경우 주석 해제해서 사용해주세요.\n                <div class=\"table-page\">\n                    <ul>\n                        <li class=\"navi left\"><a href=\"#\"> <i class=\"icon-arrow\"></i> </a></li>\n                        <li class=\"navi number on\"><a href=\"#\">1</a></li>\n                        <li class=\"navi number\"><a href=\"#\">2</a></li>\n                        <li class=\"navi number\"><a href=\"#\">3</a></li>\n                        <li class=\"navi number\"><a href=\"#\">4</a></li>\n                        <li class=\"navi number\"><a href=\"#\">5</a></li>\n                        <li class=\"navi number\"><a href=\"#\">...</a></li>\n                        <li class=\"navi number\"><a href=\"#\">99999</a></li>\n                        <li class=\"navi right\"><a href=\"#\"> <i class=\"icon-arrow\"></i> </a></li>\n                    </ul>\n                </div>\n                 */}\n                <button className='btn save' type='button'>저장</button>\n              </div>\n            </div>\n          </section>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ authentication }: IRootState) => ({\n  // isAuthenticated: authentication.isAuthenticated,\n  // isAdmin: hasAnyAuthority(authentication.account.authorities, [AUTHORITIES.ADMIN]),\n});\n\nconst mapDispatchToProps = {\n  // getSession\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SetupOltc);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\setup\\bushing\\setup-bushing.tsx",["1077","1078","1079","1080","1081"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { IRootState } from 'shared/reducers';\n\nexport interface ISetupBushingProps extends StateProps, DispatchProps {}\n\nexport const SetupBushing = (props: ISetupBushingProps) => {\n\n  useEffect(() => {\n    $('select.lookup')['selectOrDie']({\n      size: 5,\n    });\n  }, []);\n\n  return (\n    <>\n      <div className='contents-area none-aside setting'>\n        <section className='contents-header none-border'>\n          <h2>Bushing 센서 설정</h2>\n          {/*<ol className='route'>*/}\n          {/*  <li><a href=''><img src={require('assets/img/icon_home.svg').default} />&nbsp;온수 변전소</a></li>*/}\n          {/*  <li><a href=''>설정</a></li>*/}\n          {/*  <li><a href=''>설비별 환경설정</a></li>*/}\n          {/*</ol>*/}\n        </section>\n        <div className='container'>\n          <section className='gis-parts solo'>\n            <nav className='sub-setup'>\n              <ul>\n                <li><Link to={'/settings/setup/set-pd'}>PD 센서 설정</Link></li>\n                <li><Link to={'/settings/setup/set-scbr'}>차단기 센서 설정</Link></li>\n                <li><Link to={'/settings/setup/set-oltc'}>OLTC 센서 설정</Link></li>\n                <li className={'on'}><Link to={'/settings/setup/set-bushing'}>Bushing 센서 설정</Link></li>\n                <li><Link to={'/settings/setup/set-dga'}>DGA 센서 설정</Link></li>\n              </ul>\n            </nav>\n            <div className='section-box setup'>\n              {/* // 디자인 페이지에는 없는 내용이나\n                        필요할것 같아서 마크업만 삽입해두었습니다.\n                     // 사용할 경우 주석 해제해서 쓰시면 됩니다.\n                <div class=\"nav-index\">\n                    <div class=\"obj-wrapper\">\n                        <ul>\n                            <li class=\"width-15\">\n                                <span>LU 선택</span>\n                                <select class=\"lookup\">\n                                    <option value=\"1\">GLU01</option>\n                                    <option value=\"2\">GLU02</option>\n                                    <option value=\"3\">GLU03</option>\n                                    <option value=\"4\">GLU04</option>\n                                    <option value=\"5\">MLU01-1</option>\n                                    <option value=\"6\">MLU02-1</option>\n                                    <option value=\"7\">MLU03-1</option>\n                                </select>\n                            </li>\n                            <li class=\"width-15\">\n                                <span>센서 선택</span>\n                                <select class=\"lookup\">\n                                    <option value=\"1\">GPD-01</option>\n                                    <option value=\"3\">GPD-02</option>\n                                    <option value=\"4\">GPD-04</option>\n                                    <option value=\"5\">GPD-05</option>\n                                    <option value=\"6\">GPD-07</option>\n                                </select>\n                            </li>\n                            <li class=\"width-15\">\n                                <span>노이즈 센서명 선택</span>\n                                <select class=\"lookup\">\n                                    <option value=\"216\">GLU01 : EGB-FR-11</option>\n                                    <option value=\"217\">GLU01 : EBG-FR-12</option>\n                                    <option value=\"218\">GLU01 : EBG-FR-10</option>\n                                    <option value=\"9\">GLU01 : GPD-NS-01</option>\n                                </select>\n                            </li>\n                            <li class=\"\"><span>&nbsp;</span>\n                                <div class=\"\" style=\"margin-top: 5px;\"><a class=\"btn submit\" href=\"\">조회</a></div>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n                */}\n              <div className='contents-table'>\n                <div className='contents-tabmenu'>\n                  <h2>Bushing 진단 판단기준</h2>\n                  <div className='obj-select option'>\n                    <form className='select-cover'>\n                      <div className='select-box'>\n                        <input type='checkbox' id='select-indicator06' />\n                        <label className='select small' htmlFor='select-indicator06'>10</label>\n                        <div className='option small'>\n                          <a href=''>10</a>\n                          <a href=''>25</a>\n                          <a href=''>50</a>\n                          <a href=''>100</a>\n                        </div>\n                      </div>\n                    </form>\n                  </div>\n                </div>\n                <div className='setup-table-wrapper'>\n                  <table className='table-db setup'>\n                    <colgroup>\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: '120px' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: '120px' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: 'inherit' }} />\n                      <col style={{ minWidth: '160px' }} />\n                      <col style={{ minWidth: '160px' }} />\n                    </colgroup>\n                    <thead>\n                    <tr className='border-right'>\n                      <th colSpan={13}>&nbsp;</th>\n                      <th colSpan={4}>돌입 중간탭</th>\n                      <th>누설 감소</th>\n                    </tr>\n                    <tr className='border-right'>\n                      <th>부싱알람</th>\n                      <th>SCADA 알람</th>\n                      <th>LU</th>\n                      <th>센서</th>\n                      <th>PD 센서</th>\n                      <th>Noise 센서</th>\n                      <th>NG사용</th>\n                      <th>dBm Offset</th>\n                      <th>센서</th>\n                      <th>부싱 타입</th>\n                      <th>진단 주기</th>\n                      <th>공칭 전압</th>\n                      <th>초기 Capacitance</th>\n                      <th>기준</th>\n                      <th>관찰</th>\n                      <th>요주의</th>\n                      <th>심각</th>\n                      <th>요주의</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    <tr>\n                      <td>\n                        <select className='optional' id='add-ng'>\n                          <option value='0'>미사용</option>\n                          <option value='1'>사용</option>\n                        </select>\n                      </td>\n                      <td>\n                        <select className='optional' id='add-ng'>\n                          <option value='0'>미사용</option>\n                          <option value='1'>사용</option>\n                        </select>\n                      </td>\n                      <td>MLU01</td>\n                      <td>BUSH-A</td>\n                      <td>MPD-01</td>\n                      <td>Motor</td>\n                      <td>\n                        <select className='optional' id='add-ng'>\n                          <option value='0'>미사용</option>\n                          <option value='1'>사용</option>\n                        </select>\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>BUSH-A</td>\n                      <td>\n                        <select className='optional' id='add-ng'>\n                          <option value='0'>미사용</option>\n                          <option value='1'>사용</option>\n                        </select>\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='000000000' className='wide' /></td>\n                      <td><input type='text' value='000.000' className='wide' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    <tr>\n                      <td>\n                        <select className='optional' id='add-ng'>\n                          <option value='0'>미사용</option>\n                          <option value='1'>사용</option>\n                        </select>\n                      </td>\n                      <td>\n                        <select className='optional' id='add-ng'>\n                          <option value='0'>미사용</option>\n                          <option value='1'>사용</option>\n                        </select>\n                      </td>\n                      <td>MLU01</td>\n                      <td>BUSH-A</td>\n                      <td>MPD-01</td>\n                      <td>Motor</td>\n                      <td>\n                        <select className='optional' id='add-ng'>\n                          <option value='0'>미사용</option>\n                          <option value='1'>사용</option>\n                        </select>\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>BUSH-A</td>\n                      <td>\n                        <select className='optional' id='add-ng'>\n                          <option value='0'>미사용</option>\n                          <option value='1'>사용</option>\n                        </select>\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='000000000' className='wide' /></td>\n                      <td><input type='text' value='000.000' className='wide' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    <tr>\n                      <td>\n                        <select className='optional' id='add-ng'>\n                          <option value='0'>미사용</option>\n                          <option value='1'>사용</option>\n                        </select>\n                      </td>\n                      <td>\n                        <select className='optional' id='add-ng'>\n                          <option value='0'>미사용</option>\n                          <option value='1'>사용</option>\n                        </select>\n                      </td>\n                      <td>MLU01</td>\n                      <td>BUSH-A</td>\n                      <td>MPD-01</td>\n                      <td>Motor</td>\n                      <td>\n                        <select className='optional' id='add-ng'>\n                          <option value='0'>미사용</option>\n                          <option value='1'>사용</option>\n                        </select>\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>BUSH-A</td>\n                      <td>\n                        <select className='optional' id='add-ng'>\n                          <option value='0'>미사용</option>\n                          <option value='1'>사용</option>\n                        </select>\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='000000000' className='wide' /></td>\n                      <td><input type='text' value='000.000' className='wide' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    <tr>\n                      <td>\n                        <select className='optional' id='add-ng'>\n                          <option value='0'>미사용</option>\n                          <option value='1'>사용</option>\n                        </select>\n                      </td>\n                      <td>\n                        <select className='optional' id='add-ng'>\n                          <option value='0'>미사용</option>\n                          <option value='1'>사용</option>\n                        </select>\n                      </td>\n                      <td>MLU01</td>\n                      <td>BUSH-A</td>\n                      <td>MPD-01</td>\n                      <td>Motor</td>\n                      <td>\n                        <select className='optional' id='add-ng'>\n                          <option value='0'>미사용</option>\n                          <option value='1'>사용</option>\n                        </select>\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>BUSH-A</td>\n                      <td>\n                        <select className='optional' id='add-ng'>\n                          <option value='0'>미사용</option>\n                          <option value='1'>사용</option>\n                        </select>\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='000000000' className='wide' /></td>\n                      <td><input type='text' value='000.000' className='wide' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    <tr>\n                      <td>\n                        <select className='optional' id='add-ng'>\n                          <option value='0'>미사용</option>\n                          <option value='1'>사용</option>\n                        </select>\n                      </td>\n                      <td>\n                        <select className='optional' id='add-ng'>\n                          <option value='0'>미사용</option>\n                          <option value='1'>사용</option>\n                        </select>\n                      </td>\n                      <td>MLU01</td>\n                      <td>BUSH-A</td>\n                      <td>MPD-01</td>\n                      <td>Motor</td>\n                      <td>\n                        <select className='optional' id='add-ng'>\n                          <option value='0'>미사용</option>\n                          <option value='1'>사용</option>\n                        </select>\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td>BUSH-A</td>\n                      <td>\n                        <select className='optional' id='add-ng'>\n                          <option value='0'>미사용</option>\n                          <option value='1'>사용</option>\n                        </select>\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='000000000' className='wide' /></td>\n                      <td><input type='text' value='000.000' className='wide' /></td>\n                      <td><input type='text' value='00' /></td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td>\n                        <input type='text' value='00' className='input-min' /> ~\n                        <input type='text' value='00' className='input-max' />\n                      </td>\n                      <td><input type='text' value='00' /></td>\n                      <td><input type='text' value='00' /></td>\n                    </tr>\n                    {/* // Blank Markup\n                      <tr>\n                          <td>\n                              <select class=\"optional\" id=\"add-ng\">\n                                  <option value=\"0\">미사용</option>\n                                  <option value=\"1\">사용</option>\n                              </select>\n                          </td>\n                          <td>\n                              <select class=\"optional\" id=\"add-ng\">\n                                  <option value=\"0\">미사용</option>\n                                  <option value=\"1\">사용</option>\n                              </select>\n                          </td>\n                          <td>MLU01</td>\n                          <td>BUSH-A</td>\n                          <td>MPD-01</td>\n                          <td>Motor</td>\n                          <td>\n                              <select class=\"optional\" id=\"add-ng\">\n                                  <option value=\"0\">미사용</option>\n                                  <option value=\"1\">사용</option>\n                              </select>\n                          </td>\n                          <td><input type=\"text\" value=\"00\" /></td>\n                          <td>BUSH-A</td>\n                          <td>\n                              <select class=\"optional\" id=\"add-ng\">\n                                  <option value=\"0\">미사용</option>\n                                  <option value=\"1\">사용</option>\n                              </select>\n                          </td>\n                          <td><input type=\"text\" value=\"00\" /></td>\n                          <td><input type=\"text\" value=\"000000000\" class=\"wide\" /></td>\n                          <td><input type=\"text\" value=\"000.000\" class=\"wide\" /></td>\n                          <td><input type=\"text\" value=\"00\" /></td>\n                          <td>\n                              <input type=\"text\" value=\"00\" class=\"input-min\" /> ~\n                              <input type=\"text\" value=\"00\" class=\"input-max\" />\n                          </td>\n                          <td>\n                              <input type=\"text\" value=\"00\" class=\"input-min\" /> ~\n                              <input type=\"text\" value=\"00\" class=\"input-max\" />\n                          </td>\n                          <td><input type=\"text\" value=\"00\" /></td>\n                          <td><input type=\"text\" value=\"00\" /></td>\n                      </tr>*/}\n                    </tbody>\n                  </table>\n                </div>\n                <div className='text-right'>\n                  <form className='setup search gap-up-30 gap-down-20'>\n                    <input className='search' type='search' name='q' value='Search' />\n                    <input type='submit' value='' className='search-btn' />\n                  </form>\n                </div>\n                {/* // 디자인 페이지 기본값은 페이지 네비게이션이 없습니다.\n                          페이지 네비게이션 필요할 경우 주석 해제해서 사용해주세요.\n                  <div class=\"table-page\">\n                      <ul>\n                          <li class=\"navi left\"><a href=\"#\"> <i class=\"icon-arrow\"></i> </a></li>\n                          <li class=\"navi number on\"><a href=\"#\">1</a></li>\n                          <li class=\"navi number\"><a href=\"#\">2</a></li>\n                          <li class=\"navi number\"><a href=\"#\">3</a></li>\n                          <li class=\"navi number\"><a href=\"#\">4</a></li>\n                          <li class=\"navi number\"><a href=\"#\">5</a></li>\n                          <li class=\"navi number\"><a href=\"#\">...</a></li>\n                          <li class=\"navi number\"><a href=\"#\">99999</a></li>\n                          <li class=\"navi right\"><a href=\"#\"> <i class=\"icon-arrow\"></i> </a></li>\n                      </ul>\n                  </div>*/}\n                <button className='btn save' type='button'>저장</button>\n              </div>\n            </div>\n          </section>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ authentication }: IRootState) => ({\n  // isAuthenticated: authentication.isAuthenticated,\n  // isAdmin: hasAnyAuthority(authentication.account.authorities, [AUTHORITIES.ADMIN]),\n});\n\nconst mapDispatchToProps = {\n  // getSession\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SetupBushing);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\main\\diagram-gis-module.tsx",["1082"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { IDiagramSensor } from '../../shared/model/diagram-sensor.model';\nimport { openDiagramSensorPopup } from './diagram.reducer';\nimport DiagramSensorPopup from './diagram-sensor-popup';\n\nexport interface IDiagramGisModule {\n  gisType: string;    // GIS타입 (both | up | down)\n  gisName: string;    // GIS이름 (GIS 상단에 보여질 이름)\n  gisSensorList: Array<IDiagramSensor>; // 센서리스트\n}\nexport interface IDiagramGisModuleProps extends StateProps, DispatchProps, IDiagramGisModule {}\n\nexport const DiagramGisModule = (props: IDiagramGisModuleProps) => {\n\n  const [] = useState();\n\n  const sensorCheckPatternPosition = [\n    's01 left', 's01 center', 's01 right',\n    's02 left', 's02 center', 's02 right',\n    's03 left', 's03 center', 's03 right',\n    's04 left', 's04 center', 's04 right',\n    's05 left', 's05 center', 's05 right',\n  ];\n\n  useEffect(() => {\n  }, []);\n\n  return (\n    <>\n      <section className={`sector c01 ${props.gisType}`}>\n        <p className='sensor-name'>{props.gisName}</p>\n        {\n          props.gisSensorList?.map(sensor => (\n            <div key={sensor.ID} className={`state ${sensorCheckPatternPosition[parseInt(sensor?.CELL_NUM) - 1]}`}>\n              <span className='tag-name'\n                    onClick={(e) => { // 클릭 시 센서 팝업 노출\n                      props.openDiagramSensorPopup(sensor);\n                      e.stopPropagation();\n                    }}>{sensor.SNSR?.SNSR_NM}&nbsp;\n                <span className='tag-lu dis-none'>{sensor.SNSR?.LN_NM}&nbsp;</span>\n                <span className='tag-number dis-none'>{sensor.SNSR?.CMPL_YM}</span>\n              </span>\n                {/* TODO - ?: 연산자 리팩토링 */}\n              <i className='sign green'\n                 onClick={(e) => {\n                   props.openDiagramSensorPopup(sensor);\n                   e.stopPropagation();\n                 }}>\n                <i className={\n                  sensor?.SNSR?.SNSR_KIND === 'GIS_SPDC' ? 'icon-pd' :\n                  sensor?.SNSR?.SNSR_KIND === 'GIS_SCBR' ? 'icon-wall' :\n                  sensor?.SNSR?.SNSR_KIND === 'MTR_SIML' ? 'icon-dga' :\n                  sensor?.SNSR?.SNSR_KIND === 'MTR_SPDC' ? 'icon-pd' : ''\n                } />\n              </i>\n              <DiagramSensorPopup sensor={sensor} />\n            </div>\n          ))\n        }\n      </section>\n    </>\n  );\n}\n\n\nconst mapStateToProps = ({ authentication }: IRootState) => ({\n  // isAuthenticated: authentication.isAuthenticated,\n  // isAdmin: hasAnyAuthority(authentication.account.authorities, [AUTHORITIES.ADMIN]),\n});\n\nconst mapDispatchToProps = {\n  openDiagramSensorPopup,\n  // getSession\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DiagramGisModule);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\main\\diagram-sensor-popup.tsx",["1083","1084","1085","1086","1087","1088","1089","1090","1091","1092","1093","1094","1095","1096"],"import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { IDiagramSensor } from '../../shared/model/diagram-sensor.model';\nimport axios from 'axios';\nimport { layer_open } from '../../shared/util/publish-utils';\nimport { ModalPdLibaray } from 'shared/component/popup/pdlibrary/modal-pdlibrary';\nimport { PrpsFile } from '../../shared/component/file/prpsfile';\nimport StatusPdList from '../../shared/component/status/pdlist/status-pd-list';\nimport { PrpdChart } from 'shared/component/chart/prpd/prpd-chart';\nimport { getStatusGisSpdcEvent } from '../status/gis/spdc/spdc.reducer';\nimport { getStatusMtrOltcPdEvent } from '../status/mtr/oltc-spdc/oltc-spdc.reducer';\nimport { getStatusMtrSpdcEvent } from '../status/mtr/spdc/spdc.reducer';\nimport ModalRealtime from '../../shared/component/popup/realtime/modal-realtime';\nimport { ModalOnlyLibaray } from 'shared/component/popup/pdlibrary/modal-onlylibrary';\n\n\n\nexport interface DiagramSensorPopup {\n  sensor: IDiagramSensor,\n}\nexport interface IDiagramSensorPopupProps extends StateProps, DispatchProps, DiagramSensorPopup {}\n\nexport const DiagramSensorPopup = (props: IDiagramSensorPopupProps) => {\n\n  const [isShowModalRealtime, setIsShowModalRealtime] = useState(false);\n  const [isShowModalOnlyLibaray, setIsShowModalOnlyLibaray] = useState(false);\n\n  useEffect(() => {\n  }, []);\n\n  const [pdeventProps, setPdeventProps] = useState(\n    {\n      eventId : '0',\n      occrTime : '',\n      equipName : '',\n      sensorName : '',\n      prpsFile : null,\n      noiseEquip : '',\n      noiseSensor : '',\n      noiseFile : null,\n    }\n  );\n\n  const clickLibrary = ( eventProps ) => {\n\n    // let prpsfile = new PrpsFile();\n\n    // // 이벤트 데이터\n    // axios.get(\"/GetCommon_3DPRPS_Event_sample\").then((Response)=>{\n\n    //   prpsfile.setData(Response.data.data[0]);\n    //   setPdeventProps(\n    //     {\n    //       ...eventProps,\n    //       prpsFile : prpsfile,\n    //     });\n    // }).catch((Error)=>{\n    //   console.log(Error);\n    // });\n\n    // layer_open('pdLibrary');\n\n\t\tsetIsShowModalOnlyLibaray(true);\n  }\n\n  // 리얼타임 보기\n  const clickRealtime = ( eventProps ) => {\n    setIsShowModalRealtime(true);\n  }\n\n  return (\n    <>\n      <div className={`open-menu ${props.sensor.ID !== props.selectedSensor?.ID ? 'dis-none' : ''}`}>\n        <div className=\"call-menu\">\n          {\n            props.sensor.GIS_MTR === `GIS` &&\n            props.sensor.SNSR.SNSR_KIND === `GIS_SPDC` &&\n            <Link to={'/status/gis/spdc'} className=\"btn\">센서 상세보기</Link>\n          }\n          {\n            props.sensor.GIS_MTR === `GIS` &&\n            props.sensor.SNSR.SNSR_KIND === `GIS_SCBR` &&\n            <Link to={'/status/gis/scbr'} className=\"btn\">센서 상세보기</Link>\n          }\n          {\n            props.sensor.GIS_MTR === `MTR` &&\n            props.sensor.SNSR.SNSR_KIND === `MTR_SIML` &&\n            <Link to={'/status/mtr/dga'} className=\"btn\">센서 상세보기</Link>\n          }\n          {\n            props.sensor.GIS_MTR === `MTR` &&\n            props.sensor.SNSR.SNSR_KIND === `MTR_OLTC` &&\n            <Link to={'/status/mtr/oltc-ofu'} className=\"btn\">센서 상세보기</Link>\n          }\n          {\n            props.sensor.GIS_MTR === `MTR` &&\n            props.sensor.SNSR.SNSR_KIND === `OLTC_SPDC` &&\n            <Link to={'/status/mtr/oltc-spdc'} className=\"btn\">센서 상세보기</Link>\n          }\n          {\n            props.sensor.GIS_MTR === `MTR` &&\n            props.sensor.SNSR.SNSR_KIND === `MTR_SBSH` &&\n            <Link to={'/status/mtr/bushing'} className=\"btn\">센서 상세보기</Link>\n          }\n          {\n            props.sensor.GIS_MTR === `MTR` &&\n            props.sensor.SNSR.SNSR_KIND === `MTR_SPDC` &&\n            <Link to={'/status/mtr/spdc'} className=\"btn\">센서 상세보기</Link>\n          }\n\n          {\n            props.sensor.SNSR.SNSR_KIND === `GIS_SPDC` ||\n            props.sensor.SNSR.SNSR_KIND === `MTR_SPDC` ||\n            props.sensor.SNSR.SNSR_KIND === `OLTC_SPDC` ?\n            <span className=\"btn call-popup\" onClick={clickLibrary}>라이브러리 보기</span>\n              : ''\n          }\n\n          {\n            props.sensor.SNSR.SNSR_KIND === `GIS_SPDC` ||\n            props.sensor.SNSR.SNSR_KIND === `MTR_SPDC` ||\n            props.sensor.SNSR.SNSR_KIND === `OLTC_SPDC` ?\n              <span className=\"btn call-popup\" onClick={clickRealtime}>실시간 보기</span>\n              /* <span className=\"btn call-popup\" onClick={Click~~~~}>실시간 보기</span> */\n              : ''\n          }\n        </div>\n      </div>\n      {\n        isShowModalRealtime && <ModalRealtime close={() => setIsShowModalRealtime(false)} />\n      }\n\t\t\t{\n        isShowModalRealtime && <ModalOnlyLibaray\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpdType={props.sensor.SNSR.SNSR_KIND == 'GIS_SPDC' ? 'GIS' : 'MTR'} \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclose={() => setIsShowModalOnlyLibaray(false)} />\n      }\n    </>\n  );\n}\n\n\nconst mapStateToProps = ({ diagram }: IRootState) => ({\n  selectedSensor: diagram.selectedSensor,\n});\n\nconst mapDispatchToProps = {\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DiagramSensorPopup);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\exam\\test\\index.tsx",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\exam\\charts\\index.tsx",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\exam\\language\\index.tsx",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\popup\\pdlibrary\\modal-pdlibrary.tsx",["1097","1098","1099","1100","1101","1102","1103","1104","1105","1106","1107","1108","1109","1110"],"import { useEffect, useRef, useState } from \"react\";\nimport { PrpdChartComponent } from \"shared/component/chart/prpd/prpd-chart-component\";\nimport { PrpsChartComponent } from \"shared/component/chart/prps/prps-chart-component\";\nimport { PrpsDrawingStatus } from \"shared/component/chart/prps/prps-chart-graph\";\nimport { ISpdcEvent } from \"shared/model/spdc-event.model\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"shared/reducers\";\nimport { getLibPrpd,\tgetEventPrps,\tgetLibList,\taddLib,\tdelLib, pdLibRowValue, IPdLibList } from './pdlibrary.reducer';\nimport moment from \"moment\";\nimport { PrpdChartImprove } from \"shared/component/chart/prpd/prpd-chart-improve\";\nimport { ISelectBoxReturn, KeyValuePair, SelectBox } from \"shared/component/control/select-box\";\nimport { PrpsFile } from \"shared/component/file/prpsfile\";\n\nexport interface IModalPdLibraryArgs {\n\teventRow: ISpdcEvent,\n  close: Function,        // 팝업을 닫았을 때 호출할 함수\n}\n\nexport interface IModalPdLibraryProps extends StateProps, DispatchProps, IModalPdLibraryArgs {}\n\nconst PdLibaray = ( props : IModalPdLibraryProps ) =>\n{\n\tuseEffect(() => {\n\t\tconsole.log('PRPS 요청');\n\t\tprops.getEventPrps(props.eventRow.EVNT_ID);\n\t\tprops.getLibList(cmpntState.eventType, props.eventRow.PD_TYPE);\n\t}, [])\n\n\tuseEffect(() => {\n\t\t// if( props.libList.length == 0 )\n\t\t// \treturn;\n\n\t\t// console.log(props.libList);\n\t}, [props.libList])\n\n\tuseEffect(() => {\n\t\tconsole.groupCollapsed(`get library prpd file `);\n\t\tconsole.log(props.libPrpd);\n\t\tconsole.groupEnd();\n\n\n\t}, [props.libPrpd])\n\n\tuseEffect(() => {\n\t\tif( !props.libDel )\n\t\t\treturn;\n\n\t\tsetCmpntState({\n\t\t\t...cmpntState,\n\t\t\tlibRow : pdLibRowValue, \t// 선택된 라이브러리 정보 초기화\n\t\t});\n\n\t\tprops.getLibList(cmpntState.eventType, props.eventRow.PD_TYPE);\t\t// select box 완성시 수정\n\n\t}, [props.libDel, props.libAdd])\n\n\tuseEffect(() => {\n\n\t\tconsole.log('PRPS 접수');\n\t\t// console.log(props.eventPrps)\n\n\t\tprpsFile.setData(props.eventPrps[0]);\n\t\tinitPrpd();\n\n\t}, [props.eventPrps])\n\n\tuseEffect(() => {\n\n\t\t// console.log('PRPD 수신');\n\t\t// console.log(props.libPrpd)\n\n\t}, [props.libPrpd])\n\n\t\n\n\tconst libStoreTypeRef = useRef(null);\n\n\tconst libTypeList = () => {\n\t\tconst list = new Array<KeyValuePair>();\n\t\tlist.push({ key: 'C', value: 'Corona'});\n\t\tlist.push({ key: 'F', value: 'Floating'});\n\t\tlist.push({ key: 'P', value: 'Particle'});\n\t\tlist.push({ key: 'V', value: 'Void'});\n\t\tlist.push({ key: 'N', value: 'Noise'});\n\t\n\t\treturn list;\n\t}\n\n\tconst libStoreList = () => {\n\t\tconst list = new Array<KeyValuePair>();\n\t\tlist.push({ key: '1', value: '전체'});\n\t\tlist.push({ key: '2', value: '학습'});\n\t\tlist.push({ key: '3', value: '사용자'});\n\t\n\t\treturn list;\n\t}\n\n\tconst callbackEventType = ( args : ISelectBoxReturn ) => {\n\t\tsetCmpntState({\n\t\t\t...cmpntState,\n\t\t\teventType : args.selected, \t// 선택된 라이브러리 타입 저장\n\t\t});\n\n\t\t// console.log(`이벤트의 타입 선택[${args.selected}]`);\n\t}\n\t\n\n\tconst callbackLibType = ( args : ISelectBoxReturn ) => {\n\t\tsetCmpntState({\n\t\t\t...cmpntState,\n\t\t\tlibType : args.selected, \t// 선택된 라이브러리 타입 저장\n\t\t});\n\n\t\t// console.log(`라이브러리 타입 선택[${args.selected}]`);\n\t}\n\t\n\tconst [isRunning, setRunningState] = useState(false);\n\tconst [prpsStatus, setPrpsStatus] = useState(null);\n\tif( prpsStatus == null )\n\t{\n\t\tsetPrpsStatus( new PrpsDrawingStatus() );\n\t}\n\n\t// ref\n\tconst refPrpd = useRef(null);\n\tconst refLibName = useRef(null);\n\tconst refLibDesc = useRef(null);\n\t\n\tconst prpsFile = new PrpsFile(128);\n\tprpsFile.setData(props.eventPrps[0]);\n\n\t// 컴포넌트 정보\n\tconst [ cmpntState, setCmpntState] = useState({\n\t\tseconds: 0,\t\t\t\t\t// 표시 시간(초)\n\n\t\t// 추가할 사용자 라이브러리\n\t\teventType: 'C',\t// 타입\n\n\t\t// 저장된 라이브러리 목록\n\t\tlibType: 'C',\t// 타입\n\t\tlibRow : pdLibRowValue, \t// 선택된 라이브러리 정보\n\t});\n\n\tconst changeState = ( type : string, value : any ) => {\n\n\t\tif( type != 'libList' )\n\t\t{\n\t\t\t// 확인용\n\t\t\tconsole.log(`changeState type[${type}] value[${value}]`);\n\t\t}\n\n\t\tswitch( type )\n\t\t{\n\t\t\tcase \"seconds\" :\n\t\t\t\tsetCmpntState({\n\t\t\t\t\t...cmpntState,\n\t\t\t\t\tseconds: value,\n\t\t\t\t})\n\t\t\t\tdocument.getElementById('lib-timer-value').innerHTML=String(value);\t\t// 시간 표시 변경\n\t\t\t\t// setRunningState(false);\t\t\t\t\t\t\t\t// 슬라이더 일 때만 변경해야\n\t\t\t\tbreak;\n\n\t\t\tcase \"eventType\" :\n\t\t\t\tsetCmpntState({\n\t\t\t\t\t...cmpntState,\n\t\t\t\t\teventType: value,\n\t\t\t\t})\n\t\t\t\tbreak;\n\t\t\tcase \"libType\" :\n\t\t\t\tsetCmpntState({\n\t\t\t\t\t...cmpntState,\n\t\t\t\t\tlibType: value,\n\t\t\t\t})\n\t\t\t\tbreak;\n\t\t\tcase \"libId\" :\n\t\t\t\tsetCmpntState({\n\t\t\t\t\t...cmpntState,\n\t\t\t\t\tlibRow: value,\n\t\t\t\t})\n\t\t\t\tprops.getLibPrpd(value.ID);\n\t\t\t\tconsole.log(`load selected lib ID[${value.ID}]`);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tconst selectedLibList = ( row : IPdLibList) => {\n\n\t\tchangeState( 'libId', row );\n\t\tprops.getLibPrpd(row.ID);\n\n\t} \n\n\t// 화면 클리어\n\tconst clearAll = () => {\n\n\t\t// 상태 초기화 - useState에서 context가 존재함 주의할 것, changestate를 연속으로 호출하면 의도하지 않은 결과를 초래함\n\t\tsetCmpntState({\n\t\t\tseconds: 0,\t\t\t\t\t// 표시 시간(초)\n\n\t\t\t// 추가할 사용자 라이브러리\n\t\t\teventType: 'C',\t// 타입\n\n\t\t\t// 저장된 라이브러리 목록\n\t\t\tlibType: 'C',\t// 타입\n\t\t\tlibRow : pdLibRowValue, \t// 선택된 라이브러리 정보\n\t\t});\n\n\t\trefLibName.current.value = '';\n\t\trefLibDesc.current.value = '';\n\n\t\t// prps 데이터 초기화\n\t\tprpsStatus.clear();\n\n\t\t// prpd 초기화\n\t\trefPrpd.current?.clearPrpd();\n\n\t\t// 정지\n\t\tsetRunningState(false);\t\t// 정지\n\t}\n\n\t// event PRPD를 그리는 callback\n\tconst initPrpd = () => {\n\t\t// console.log(`updatePrpd : ${accTime}`);\n\t\tconsole.log(\"initPrpd\");\n\t\tconsole.log(prpsFile.getPdData());\n\t\trefPrpd.current?.initData({ accTime: 0, prpsData : prpsFile.getPdData()});\n\t}\n\n\tconst updatePrpd = ( accTime : number ) => {\n\t\t// console.log(`updatePrpd : ${accTime}`);\n\t\trefPrpd.current?.updateFrame({ accTime : accTime });\n\n\t\tif( cmpntState.seconds != accTime){\n\t\t\tchangeState( 'seconds', accTime);\n\t\t}\n\t}\n\n\tconst clickPlay = () => {\n\t\tconsole.log(`플레이 : ${isRunning} > ${!isRunning}`);\n\t\tsetRunningState(!isRunning);\n\t}\n\n\tconst clickReset = () => {\n\t\tclearAll();\n\t}\n\n\t// 라이브러리 목록 조회\n\tconst clickSearch = () => {\n\t\tconsole.log(libStoreTypeRef.current.selected());\n\t\tprops.getLibList(cmpntState.libType, props.eventRow.PD_TYPE);\n\t}\n\n\t// 라이브러리 추가\n\tconst clickSave = () => {\n\t\tif( !refLibName.current.value )\n\t\t\treturn;\n\t\t\n\t\tprops.addLib( props.eventRow.EVNT_ID, refLibName.current.value, cmpntState.eventType, refLibDesc.current.value);\n\t}\n\n\t// 라이브러리 삭제\n\tconst clickDelete = () => {\n\t\tif( cmpntState.libRow.ID == '0' )\n\t\t\treturn;\n\t\t\n\t\t// if( cmpntState.libRow.LIBRARY_TYPE != '3' )\t// 사용자 라이브러리가 아니면 삭제 불가\n\t\t// \treturn;\n\n\t\tconsole.log(`del [${cmpntState.libRow.ID}]`);\n\n\t\tprops.delLib(cmpntState.libRow.ID);\n\t}\n\n\tconst changeSlider = ( value : string ) => {\n\t\tchangeState( 'seconds', Number(value));\n\n\t\t// prps, prpd 변경\n\n\t\t// 슬라이더를 변경하면 정지\n\t\tsetRunningState(false);\t\t// 정지\n\t}\n\n\tconst eventPrpdProps =\n\t{\n\t\theight : '290',\n\t\tchart_height : '275',\n\t};\n\n\treturn (\n    <>\n      <div className=\"layer-wrap pdLibrary\" data-layer=\"pdLibrary\">\n        <div className=\"full-popup\">\n          <aside className=\"lib left\">\n            <div className=\"tit\">\n              <h2>라이브러리</h2>\n              <h2>{props.eventRow.EVNT_ID}</h2>\n            </div>\n            <div className=\"left index\">\n              <p>현재 재생 중인 이벤트 시간</p>\n              <p className=\"times\">{moment(props.eventRow.OCCR_TIME).format('YYYY-MM-DD HH:mm:ss')}</p>\n            </div>\n          </aside>\n          <aside className=\"lib contents pd-lib\">\n            <div className=\"event controller\">\n              <input className=\"dis-none\" id=\"play\" type=\"checkbox\" onChange={clickPlay} checked={isRunning}/>\n              <label className=\"play\" htmlFor=\"play\"></label>\n              <button className=\"replay\" onClick={clickReset}><img src={require('assets/img/pd-replay.png').default}/></button>\n\t\t\t  \t\t\t<input id=\"timer\" type=\"range\" name=\"timer\" min=\"0\" max=\"60\" value={cmpntState.seconds} step=\"1\" onChange={({target : target}) => {changeSlider(target.value);}}/>\n              <p><span id=\"lib-timer-value\">0</span>초</p>\n              <a href=\"#\" className=\"btn-close\" onClick={() => props.close()}><i className=\"icon-close\"></i></a>\n            </div>\n            <div className=\"graph wrap gap-up-20 gap-down-10\">\n              <h2 id=\"equip02\">{props.eventRow.SNSR_LOC_NM}-{props.eventRow.SNSR_NM}</h2>\n              <div className=\"offset controller width-6 gap-right-20\">\n                <div className=\"graph chart-3d\">\n                  <div className=\"graph-container height-300px\" >\n                    <PrpsChartComponent\n                      isRunning={isRunning}\n                      is3d={true}\n\t\t\t\t\t\t\t\t\t\t\tprpsStatus={prpsStatus}\n                      callbackInitData={initPrpd}\n                      callbackUpdateFrame={updatePrpd}\n\t\t\t\t\t\t\t\t\t\t\tcameraZoom={0.9}\n\t\t\t\t\t\t\t\t\t\t\tpdFile={prpsFile}\n                    >\n                    </PrpsChartComponent>\n                  </div>\n                </div>\n                <div className=\"graph chart-2d\">\n                  <div className=\"graph-container height-300px\" >\n                    <PrpdChartComponent\n                      ref={refPrpd}\n                      {...eventPrpdProps}\n                    >\n                    </PrpdChartComponent>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"offset controller width-3 add height-300px\">\n              <h3 className=\"gap-down-20\">라이브러리 추가</h3>\n              <div className=\"add-container\">\n                <label className=\"add-tag\">\n                  <span>라이브러리명</span>\n                  {/* <input type=\"text\" value={libName} onChange={(e) => {setLibName(e.target.value)}}/> */}\n                  <input type=\"text\" ref={refLibName}/>\n                </label>\n                <div className=\"add-tag half gap-up-10\">\n                  <span>부분방전 타입</span>\n\t\t\t\t\t\t\t\t\t<SelectBox defaultValue={cmpntState.eventType}\n\t\t\t\t\t\t\t\t\t\t\t\t\telementName=\"eventTypeList\" \n\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"타입선택\" \n\t\t\t\t\t\t\t\t\t\t\t\t\toptions={libTypeList()}\n\t\t\t\t\t\t\t\t\t\t\t\t\tisLibraryMode={true}\n\t\t\t\t\t\t\t\t\t\t\t\t\tcallback={callbackEventType}/>\n                </div>\n                {/* 타입 선택부분 필요 없을시 삭제 후 add-tag 다음 half 클래스를 빼주세요. */}\n                <div className=\"add-tag half gap-up-10\">\n                  <span>라이브러리 타입</span>\n\t\t\t\t\t\t\t\t\t\t<div className=\"select-wrapper pd-only small\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"select lookup\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input id=\"select-lib-small\" readOnly type=\"text\" className=\"select-options-focus\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"select-field\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type=\"radio\" name=\"select-lib-01\" id=\"type-lib-1\" value=\"3\" checked />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"select-lib-small\">사용자</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"select-options\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"type-lib-1\">사용자</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n                </div>\n                <label className=\"add-tag gap-up-10\">\n                  <span>라이브러리 설명</span>\n                  {/* <textarea value={libDesc} onChange={(e) => { console.log(e.target.value); setLibDesc(e.target.value)}}></textarea> */}\n                  <textarea ref={refLibDesc}></textarea>\n                </label>\n                <input type=\"button\" value=\"저장\" className=\"btn lib gap-up-10\" onClick={clickSave}/>\n              </div>\n            </div>\n            <div className=\"graph wrap\">\n              <div className=\"offset controller gap-up-20 width-10\">\n                <div className=\"input number rt\">\n                  <div className=\"selector\">\n                    <span className=\"tit\">방전타입</span>\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<SelectBox defaultValue={cmpntState.libType}\n\t\t\t\t\t\t\t\t\t\t\t\t\telementName=\"libTypelist\" \n\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"타입선택\" \n\t\t\t\t\t\t\t\t\t\t\t\t\toptions={libTypeList()}\n\t\t\t\t\t\t\t\t\t\t\t\t\tisLibraryMode={true}\n\t\t\t\t\t\t\t\t\t\t\t\t\tcallback={callbackLibType}/>\n\t\t\t\t\t\t\t\t\t\t</div>\n                  </div>\n                  <div className=\"selector gap-up-30\">\n                    <span className=\"tit\">라이브러리 타입</span>\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<SelectBox \n\t\t\t\t\t\t\t\t\t\t\t\tref={libStoreTypeRef}\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tdefaultValue={\"1\"}\n\t\t\t\t\t\t\t\t\t\t\t\telementName=\"libStoreList\" \n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"라이브러리 타입\" \n\t\t\t\t\t\t\t\t\t\t\t\toptions={libStoreList()}\n\t\t\t\t\t\t\t\t\t\t\t\tisLibraryMode={true}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</div>\n                  </div>\n                  <button className=\"btn lib gap-up-30\" onClick={clickSearch}><span>조회</span></button>\n                  <button className=\"btn lib\" onClick={clickDelete}><span>삭제</span></button>\n                  {/* <button className=\"btn lib call-popup\" data-layer=\"pd-event\" onClick={click3dPrps}><span>3D PRPS</span></button> */}\n                </div>\n                <div className=\"graph list\">\n                  <div className=\"data-list height-400px\">\n                    {\n\t\t\t\t\t\t\t\t\t\t\tprops.libList.length == 0 ? null :\n\t\t\t\t\t\t\t\t\t\t\t\tprops.libList.filter( (row) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tswitch( libStoreTypeRef.current?.selected() )\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase \"1\": return true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase \"2\": return row.LIBRARY_TYPE != \"3\"; \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase \"3\": return row.LIBRARY_TYPE == \"3\"; \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t.map( (row) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<p key={\"liblist_\"+row.ID} \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={(row.LIBRARY_TYPE==\"3\" ? \"user\" : \"edu\") + (row.ID == cmpntState.libRow.ID ? \" active\" : \"\")}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => selectedLibList(row)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.LBRY_NM}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t))\n                    }\n                    {/* p className에 active 추가하면 하이라이트 효과 나옵니다. */}\n                    {/* <p className=\"active\">00_02_20171228110600.dat</p> */}\n                  </div>\n                </div>\n                <div className=\"graph chart-2d result\">\n                  <div className=\"graph-container height-400px\" >\n                    <PrpdChartImprove\n\t\t\t\t\t\t\t\t\t\t\tchartData={props.libPrpd}\n                      // eventId={Number(cmpntState.libId)}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </aside>\n        </div>\n      </div>\n\n    </>\n\t);\n}\n\n// const LibType = {\n// \tCorona : 'C',\n// \tFloating : 'F',\n// \tParticle : 'P',\n// \tVoid : 'V',\n// \tNoise : 'N',\n//   } as const;\n// export type LibType = typeof LibType[keyof typeof LibType];\n\nconst mapStateToProps = ({ pdLibData, }: IRootState) => ({\n\teventPrps: pdLibData.prps,\n\tlibPrpd: pdLibData.prpd,\n\tlibList: pdLibData.libList,\n\tlibAdd: pdLibData.ackAdd,\n\tlibDel: pdLibData.ackDel,\n});\n\nconst mapDispatchToProps = {\n\tgetLibPrpd,\n\tgetEventPrps,\n\tgetLibList,\n\taddLib,\n\tdelLib,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport const ModalPdLibaray = connect(mapStateToProps, mapDispatchToProps)(PdLibaray);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\gis\\all\\all-spdc.tsx",["1111","1112","1113","1114","1115","1116","1117","1118","1119","1120","1121","1122","1123","1124","1125","1126"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport gisAllEvent, { getStatusGisAllSpdcEvent } from './all.reducer';\nimport moment from 'moment';\nimport ModalStatusAllPrpd from '../../../../shared/component/popup/modal-status-all-prpd';\nimport { ISpdcEvent } from '../../../../shared/model/spdc-event.model';\n\nexport interface GisAllSpdcStatus {\n  eqipId: string | number;\n}\nexport interface IGisAllSpdcStatusProps extends StateProps, DispatchProps, GisAllSpdcStatus {}\n\nexport const GisAllSpdcStatus = (props: IGisAllSpdcStatusProps) => {\n\n  const [isShowModalStatusAllPrpd, setIsShowModalStatusAllPrpd] = useState(false);\n  const [selectedSpdc, setSelectedSpdc] = useState(null as ISpdcEvent);\n\n  useEffect(() => {\n  }, []);\n\n  useEffect(() => {\n    if (props.eqipId != 0) {\n      props.getStatusGisAllSpdcEvent(props.eqipId);\n    }\n  }, [props.eqipId]);\n\n  return (\n    <>\n      <div className=\"contents-table\">\n        <h6 className=\"table-selected\">실시간<br/>(현재 하드코딩)</h6>\n        <table className=\"table-db\">\n          <colgroup>\n            <col style={{width:'25%'}}/>\n            <col style={{width:'25%'}}/>\n            <col style={{width:'25%'}}/>\n            <col style={{width:'25%'}}/>\n          </colgroup>\n          <thead>\n          <tr>\n            <th>센서명</th>\n            <th>최대방전(DBM)</th>\n            <th>평균방전(DBM)</th>\n            <th>&nbsp;</th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr>\n            <td><a href=\"\">GLU101-PD01</a></td>\n            <td><span>-30.508</span></td>\n            <td><span>0.008</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">실시간</a></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD02</a></td>\n            <td><span>-0.508</span></td>\n            <td><span>0.016</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">실시간</a></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD03</a></td>\n            <td><span>-30.128</span></td>\n            <td><span>0.003</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">실시간</a></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD04</a></td>\n            <td><span>-31.428</span></td>\n            <td><span>0.002</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">실시간</a></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD05</a></td>\n            <td><span>-30.930</span></td>\n            <td><span>0.001423</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">실시간</a></td>\n          </tr>\n          </tbody>\n        </table>\n      </div>\n      <div className=\"contents-table\">\n        <h6 className=\"table-selected\">최종 진단정보</h6>\n        <table className=\"table-db\">\n          <colgroup>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'25%'}}/>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'15%'}}/>\n          </colgroup>\n          <thead>\n          <tr>\n            <th>센서명</th>\n            <th>알람일시</th>\n            <th>진단결과</th>\n            <th>최대방전(DBM)</th>\n            <th>평균방전(DBM)</th>\n            <th>&nbsp;</th>\n          </tr>\n          </thead>\n          <tbody>\n          {\n            props.allSpdcEventList.length ?\n              props.allSpdcEventList.map((spdc, index) => {\n                return (\n                  <tr key={index}>\n                    <td>{spdc.SNSR_NM}</td>\n                    <td><span>{moment(spdc.OCCR_TIME).format('YYYY-MM-DD HH:mm:ss')}</span></td>\n                    <td><span>{spdc.PD_TYPE}</span></td>\n                    <td><span>{spdc.MAX_DBM}</span></td>\n                    <td><span>{spdc.AVG_DBM}</span></td>\n                    <td><a className=\"text-pink text-bold\" onClick={() => {\n                      setSelectedSpdc(spdc);\n                      setIsShowModalStatusAllPrpd(true);\n                    }}>PRPD</a></td>\n                  </tr>\n                )\n              })\n              :\n              <tr className=\"empty\">\n                <td colSpan={6}>\n                  <img src={require('assets/img/icon_empty.svg').default}/>\n                  <p>결과가 없습니다.</p>\n                </td>\n              </tr>\n          }\n          </tbody>\n        </table>\n      </div>\n      {\n        isShowModalStatusAllPrpd && <ModalStatusAllPrpd spdcEvent={selectedSpdc} closeCallback={() => setIsShowModalStatusAllPrpd(false)} />\n      }\n    </>\n  );\n}\n\nconst mapStateToProps = ({ gisAllEvent }: IRootState) => ({\n  allSpdcEventList: gisAllEvent.allSpdcEventList,\n});\n\nconst mapDispatchToProps = {\n  getStatusGisAllSpdcEvent,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GisAllSpdcStatus);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\gis\\all\\all-scbr.tsx",["1127","1128","1129","1130","1131","1132","1133"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { getStatusGisAllScbrEvent } from './all.reducer';\nimport moment from 'moment';\n\nexport interface GisAllScbrStatus {\n  eqipId: string | number;\n}\nexport interface IGisAllScbrStatusProps extends StateProps, DispatchProps, GisAllScbrStatus {}\n\nexport const GisAllScbrStatus = (props: IGisAllScbrStatusProps) => {\n\n  useEffect(() => {\n  }, []);\n\n  useEffect(() => {\n    if (props.eqipId != 0) {\n      props.getStatusGisAllScbrEvent(props.eqipId);\n    }\n  }, [props.eqipId]);\n\n  return (\n    <>\n      <div className=\"contents-table\">\n        <h6 className=\"table-selected\">실시간</h6>\n        <table className=\"table-db\">\n          <colgroup>\n            <col style={{width:'25%'}}/>\n            <col style={{width:'25%'}}/>\n            <col style={{width:'25%'}}/>\n            <col style={{width:'25%'}}/>\n          </colgroup>\n          <thead>\n          <tr>\n            <th>센서명</th>\n            <th>부하전류 A상(A)</th>\n            <th>부하전류 B상(A)</th>\n            <th>부하전류 C상(A)</th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr className=\"empty\">\n            <td colSpan={4}>\n              {/*<img src=\"../../img/icon_empty.svg\"/>*/}\n              <img src={require('assets/img/icon_empty.svg').default}/>\n              <p>결과가 없습니다.</p>\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </div>\n      <div className=\"contents-table\">\n        <h6 className=\"table-selected\">최종 진단정보</h6>\n        <table className=\"table-db\">\n          <colgroup>\n            <col style={{width:'25%'}}/>\n            <col style={{width:'25%'}}/>\n            <col style={{width:'25%'}}/>\n            <col style={{width:'25%'}}/>\n          </colgroup>\n          <thead>\n          <tr>\n            <th>센서명</th>\n            <th>부하전류 A상(A)</th>\n            <th>부하전류 B상(A)</th>\n            <th>부하전류 C상(A)</th>\n          </tr>\n          </thead>\n          <tbody>\n          {\n            props.allScbrEventList.length ?\n              props.allScbrEventList.map((scbr, index) => {\n                return (\n                  <tr key={index}>\n                    <td>{scbr.SNSR_NM}</td>\n                    <td><span>{scbr.OPN_CLS_TIME_A}</span></td>\n                    <td><span>{scbr.OPN_CLS_TIME_B}</span></td>\n                    <td><span>{scbr.OPN_CLS_TIME_C}</span></td>\n                  </tr>\n                )\n              })\n              :\n              <tr className=\"empty\">\n                <td colSpan={6}>\n                  <img src={require('assets/img/icon_empty.svg').default}/>\n                  <p>결과가 없습니다.</p>\n                </td>\n              </tr>\n          }\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ gisAllEvent }: IRootState) => ({\n  allScbrEventList: gisAllEvent.allScbrEventList,\n});\n\nconst mapDispatchToProps = {\n  getStatusGisAllScbrEvent,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GisAllScbrStatus);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\all\\all-bushing.tsx",["1134","1135","1136","1137","1138","1139","1140","1141","1142","1143","1144","1145","1146","1147","1148","1149","1150","1151","1152","1153","1154","1155","1156","1157","1158","1159","1160","1161","1162","1163","1164","1165","1166"],"import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { getStatusMtrAllBushEvent } from './all.reducer';\n\nexport interface MtrAllBushingStatus {\n  eqipId: string | number;\n}\nexport interface IMtrAllBushingStatusProps extends StateProps, DispatchProps, MtrAllBushingStatus {}\n\nexport const MtrAllBushingStatus = (props: IMtrAllBushingStatusProps) => {\n\n  useEffect(() => {\n    if (props.eqipId != 0) {\n      props.getStatusMtrAllBushEvent(props.eqipId);\n    }\n  }, [props.eqipId]);\n\n  return (\n    <>\n      <div className=\"contents-table\">\n        <h6 className=\"table-selected\">실시간</h6>\n        <table className=\"table-db\">\n          <colgroup>\n            <col style={{width:'25%'}}/>\n            <col style={{width:'25%'}}/>\n            <col style={{width:'25%'}}/>\n            <col style={{width:'25%'}}/>\n          </colgroup>\n          <thead>\n          <tr>\n            <th>센서명</th>\n            <th>최대방전(DBM)</th>\n            <th>평균방전(DBM)</th>\n            <th>&nbsp;</th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr>\n            <td><a href=\"\">GLU101-PD01</a></td>\n            <td><span>-30.508</span></td>\n            <td><span>0.008</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">실시간</a></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD02</a></td>\n            <td><span>-0.508</span></td>\n            <td><span>0.016</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">실시간</a></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD03</a></td>\n            <td><span>-30.128</span></td>\n            <td><span>0.003</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">실시간</a></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD04</a></td>\n            <td><span>-31.428</span></td>\n            <td><span>0.002</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">실시간</a></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD05</a></td>\n            <td><span>-30.930</span></td>\n            <td><span>0.001423</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">실시간</a></td>\n          </tr>\n          </tbody>\n        </table>\n      </div>\n      <div className=\"contents-table\">\n        <h6 className=\"table-selected\">최종 진단정보</h6>\n        <table className=\"table-db\">\n          <colgroup>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'25%'}}/>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'15%'}}/>\n          </colgroup>\n          <thead>\n          <tr>\n            <th>센서명</th>\n            <th>알람일시</th>\n            <th>진단결과</th>\n            <th>최대방전(DBM)</th>\n            <th>평균방전(DBM)</th>\n            <th>&nbsp;</th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr>\n            <td><a href=\"\">GLU101-PD01</a></td>\n            <td><span>2021-04-14- 12:34:56</span></td>\n            <td><span>Noise</span></td>\n            <td><span>-31.428</span></td>\n            <td><span>0.002</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">PRPD</a></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD01</a></td>\n            <td><span>2021-04-14- 12:34:56</span></td>\n            <td><span>Noise</span></td>\n            <td><span>-31.428</span></td>\n            <td><span>0.002</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">PRPD</a></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD01</a></td>\n            <td><span>2021-04-14- 12:34:56</span></td>\n            <td><span>Noise</span></td>\n            <td><span>-31.428</span></td>\n            <td><span>0.002</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">PRPD</a></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD01</a></td>\n            <td><span>2021-04-14- 12:34:56</span></td>\n            <td><span>Noise</span></td>\n            <td><span>-31.428</span></td>\n            <td><span>0.002</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">PRPD</a></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD01</a></td>\n            <td><span>2021-04-14- 12:34:56</span></td>\n            <td><span>Noise</span></td>\n            <td><span>-31.428</span></td>\n            <td><span>0.002</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">PRPD</a></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD01</a></td>\n            <td><span>2021-04-14- 12:34:56</span></td>\n            <td><span>Noise</span></td>\n            <td><span>-31.428</span></td>\n            <td><span>0.002</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">PRPD</a></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD01</a></td>\n            <td><span>2021-04-14- 12:34:56</span></td>\n            <td><span>Noise</span></td>\n            <td><span>-31.428</span></td>\n            <td><span>0.002</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">PRPD</a></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD01</a></td>\n            <td><span>2021-04-14- 12:34:56</span></td>\n            <td><span>Noise</span></td>\n            <td><span>-31.428</span></td>\n            <td><span>0.002</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">PRPD</a></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD01</a></td>\n            <td><span>2021-04-14- 12:34:56</span></td>\n            <td><span>Noise</span></td>\n            <td><span>-31.428</span></td>\n            <td><span>0.002</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">PRPD</a></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD01</a></td>\n            <td><span>2021-04-14- 12:34:56</span></td>\n            <td><span>Noise</span></td>\n            <td><span>-31.428</span></td>\n            <td><span>0.002</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">PRPD</a></td>\n          </tr>\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ mtrAllEvent }: IRootState) => ({\n  allBushEventList: mtrAllEvent.allBushEventList,\n});\n\nconst mapDispatchToProps = {\n  getStatusMtrAllBushEvent\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MtrAllBushingStatus);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\gis\\all\\all-eqip.tsx",["1167","1168","1169","1170","1171","1172","1173","1174","1175","1176","1177","1178","1179","1180","1181","1182","1183","1184","1185","1186","1187","1188","1189","1190","1191","1192","1193","1194","1195","1196","1197","1198","1199"],"import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { IEquipment } from '../../../../shared/model/equipment.model';\n\nexport interface GisAllEqipStatus {\n  eqipIdReturnCallback: Function;\n}\nexport interface IGisAllEqipStatusProps extends StateProps, DispatchProps, GisAllEqipStatus {}\n\nexport const GisAllEqipStatus = (props: IGisAllEqipStatusProps) => {\n\n  const equipInputRef = useRef(null); // 선택된 설비 Input 요소\n  const [selectedEqip, setSelectedEqip] = useState<IEquipment>(); // 선택된 설비 객체\n\n  useEffect(() => {\n  }, []);\n\n  // 설비가 선택되면 부모 컴포넌트로 선택된 설비의 ID 전달\n  useEffect(() => {\n    if (selectedEqip && props.eqipIdReturnCallback) {\n      props.eqipIdReturnCallback(selectedEqip.ID);\n    }\n  }, [selectedEqip]);\n\n  // 화면 로딩 시 MTR의 첫번째 설비가 선택되도록 작업\n  useEffect(() => {\n    let mtrEqipList = props.equipmentList.filter(eqipment => eqipment.EQIP_TYPE == 'GIS');\n    if (mtrEqipList.length) {\n      setSelectedEqip(mtrEqipList[0]);\n    }\n  }, [props.equipmentList]);\n\n  return (\n    <>\n      <div className=\"input selectbox gap-down-30\">\n        <p>설비 선택</p>\n        <form id=\"select-cover\">\n          <div className=\"select-box\">\n            <input ref={equipInputRef} type=\"checkbox\" id=\"select-indicator\"/>\n            <label className=\"select big\" htmlFor=\"select-indicator\">{selectedEqip?.EQIP_NM}</label>\n            <div className=\"option\">\n              {\n                props.equipmentList\n                  .filter(eqipment => eqipment.EQIP_TYPE == 'GIS')\n                  .map((eqipment, index) => {\n                    return (\n                      <a key={index} onClick={() => {\n                        setSelectedEqip(eqipment)\n                        equipInputRef.current.checked = false;  // 설비 리스트 비노출 작업\n                      }}>{eqipment.EQIP_NM}</a>\n                    )\n                  })\n              }\n            </div>\n          </div>\n        </form>\n      </div>\n      <div className=\"input-legend\">\n        <ul>\n          <li><i className=\"sign green\"></i>정상</li>\n          <li><i className=\"sign yellow\"></i>요주의</li>\n          <li><i className=\"sign orange\"></i>이상</li>\n          <li><i className=\"sign red\"></i>위험</li>\n          <li><i className=\"sign grey\"></i>통신이상</li>\n        </ul>\n      </div>\n      <div className=\"caraousel-inner\">\n        {/*<img src=\"../../img/machine/gis_02.jpg\"/>*/}\n        <img src={require('assets/img/machine/gis_02.jpg').default}/>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">PD-01</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">PD-02</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">PD-03</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">PD-04</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">PD-05</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">PD-06</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">PD-07</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">647</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">657</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">6333</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">6100</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">677</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">687</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">6433</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">PD-N1</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">PD-08</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">PD-09</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">PD-10</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">PD-11</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">PD-12</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">PD-13</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">PD-14</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">PD-15</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">PD-16</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">PD-17</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">PD-18</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\">\n          <p className=\"sensor-tag\">\n            <i className=\"sign\"></i>\n            <span className=\"tooltip-text\">PD-N2</span>\n          </p>\n        </a>\n\n        {/*// Blank markup*/}\n        {/*// <i> 태그에 buzzer 클래스 추가시 깜빡이는 모션 추가됨*/}\n        {/*<a href=\"\" class=\"tooltip buzzer\">*/}\n        {/*    <p class=\"sensor-tag\">*/}\n        {/*    <i class=\"sign\"></i> */}\n        {/*    <span class=\"tooltip-text\"> </span>*/}\n        {/*    </p>*/}\n        {/*</a>*/}\n\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ substation }: IRootState) => ({\n  equipmentList: substation.equipmentList,\n  // isAdmin: hasAnyAuthority(authentication.account.authorities, [AUTHORITIES.ADMIN]),\n});\n\nconst mapDispatchToProps = {\n  // getSession\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GisAllEqipStatus);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\user\\user-update-list.tsx",["1200","1201"],"import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { getSettingUserUpdateList } from './user.reducer';\nimport Pager from '../../../shared/component/pager/Pager';\nimport moment from 'moment';\n\nexport interface IUserUpdateListProps extends StateProps, DispatchProps {}\n\nexport const UserUpdateList = (props: IUserUpdateListProps) => {\n\n  const listCountRef = useRef(null);\n\n  const [pageInfo, setPageInfo] = useState({\n    activePageEvent: 1,\n    itemsCountPerPage: 10,\n  });\n\n  useEffect(() => {\n  }, []);\n\n  useEffect(() => {\n    getUserUpdateList();\n  }, [pageInfo]);\n\n  const getUserUpdateList = () => {\n    props.getSettingUserUpdateList(pageInfo.activePageEvent, pageInfo.itemsCountPerPage);\n  }\n\n  return (\n    <>\n      <div className=\"section-box gap-up-30\">\n        <div className=\"contents-table\">\n          <div className=\"contents-tabmenu gap-down-10\">\n            <h3>사용자 수정 이력 <span className=\"tag-number text-pink text-bold\">{props.userUpdateList.length}</span></h3>\n            <div className=\"obj-select option\">\n              <form className=\"select-cover\">\n                <div className=\"select-box\">\n                  <input type=\"checkbox\" id=\"select-user-update-count\" ref={listCountRef}/>\n                  <label className=\"select small\" htmlFor=\"select-user-update-count\">{pageInfo.itemsCountPerPage}</label>\n                  <div className=\"option small\">\n                    {\n                      [10, 25, 50, 100].map((value, index) =>\n                        <a key={index}\n                           onClick={() => {\n                             setPageInfo({...pageInfo, itemsCountPerPage: value});\n                             listCountRef.current.checked = false;\n                           }}\n                        >{value}</a>\n                      )\n                    }\n                  </div>\n                </div>\n              </form>\n            </div>\n          </div>\n          <table className=\"table-db\">\n            <colgroup>\n              <col style={{width:'10%'}}/>\n              <col style={{width:'10%'}}/>\n              <col style={{width:'20%'}}/>\n              <col style={{width:'50%'}}/>\n            </colgroup>\n            <thead>\n            <tr>\n              <th>사용자 ID</th>\n              <th>구분</th>\n              <th>수정일자</th>\n              <th>&nbsp;</th>\n            </tr>\n            </thead>\n            <tbody>\n            {\n              props.userUpdateList.length ?\n                props.userUpdateList.map((userUpdate, index) => {\n                  return (\n                    <tr key={index}>\n                      <td><span>{userUpdate.USER_ID}</span></td>\n                      <td><span>{userUpdate.INFO}</span></td>\n                      <td><span>{moment(userUpdate.TIME).format('YYYY-MM-DD HH:mm:ss')}</span></td>\n                      <td><span>&nbsp;</span></td>\n                    </tr>\n                  )\n                })\n                :\n                <tr>\n                  <td colSpan={4}><span>데이터가 없습니다.</span></td>\n                </tr>\n            }\n            </tbody>\n          </table>\n          <Pager\n            handlePageChange={(newPage) => setPageInfo({...pageInfo, activePageEvent:newPage})}\n            activePage={pageInfo.activePageEvent}\n            totalItemsCount={props.userUpdateListTotalCount}\n            itemsCountPerPage={pageInfo.itemsCountPerPage}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ user }: IRootState) => ({\n  userUpdateList: user.userUpdateList,\n  userUpdateListTotalCount: user.userUpdateListTotalCount,\n});\n\nconst mapDispatchToProps = {\n  getSettingUserUpdateList\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserUpdateList);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\setup\\eqip\\setup-mtr-table-module.tsx",["1202","1203","1204","1205"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { getSldMtrGrid } from '../../../main/diagram.reducer';\nimport { IDiagramEquipment } from '../../../../shared/model/diagram-equipment.model';\nimport { setSldMtrTable } from './eqip.reducer';\nimport { IDiagramGridSensor } from '../../../../shared/model/diagram-grid-sensor.model';\n\nexport interface SetupMtrTableModule {\n  mtr: IDiagramEquipment;       // 장비 객체\n  updateCallback?: Function;     // 업데이트(저장) 이후 콜백\n}\nexport interface ISetupMtrTableModuleProps extends StateProps, DispatchProps, SetupMtrTableModule {}\n\nexport const SetupMtrTableModule = (props: ISetupMtrTableModuleProps) => {\n\n  const [gridRowList, setGridRowList] = useState<Array<IDiagramGridSensor>>([]);\n\n  useEffect(() => {\n    props.getSldMtrGrid();\n  }, []);\n\n  useEffect(() => {\n  }, [gridRowList]);\n\n  useEffect(() => {\n    setGridRowList(\n      props.mtrGrid\n        .filter(rowData => rowData.MTR_NUM === props.mtr.GIS_MTR_NUM)\n        .sort((a, b) => a.ROW_NUM > b.ROW_NUM ? 1 : 0)  // ROW_NUM 기준으로 asc 소팅\n        .map(rowData => {\n          return {\n            ID: rowData.ID,\n            MTR_NUM: rowData.MTR_NUM,\n            ROW_NUM: rowData.ROW_NUM,\n            SNSR: rowData.SNSR,      // 센서 ID\n            SNSR_GROUP: rowData.SNSR_GROUP, // 센서종류: 부싱1\n            GUBUN: rowData.GUBUN,           // 구분: AA\n            DESC: rowData.DESC,             // 설명: 누설전류\n          };\n        })\n    );\n  }, [props.mtrGrid]);\n\n  const updateGridRow = (rowIndex, column, value) => {\n    let currentRow = gridRowList[rowIndex];   // 변경하려는 row 가져옴\n    if (column === 'SNSR') {\n      currentRow[column] = { ID: value };\n    } else {\n      currentRow[column] = value;             // 원하는 컬럼에 값 셋팅\n    }\n    let newGridRowList = [...gridRowList];\n    newGridRowList[rowIndex] = currentRow;\n    setGridRowList(newGridRowList);\n  }\n\n  // MTR Table 정보 저장\n  const updateMtrTable = async () => {\n    await gridRowList.map(rowData => {\n      props.setSldMtrTable(rowData.MTR_NUM, rowData.ROW_NUM, rowData.SNSR?.ID || 0, rowData.SNSR_GROUP, rowData.GUBUN, rowData.DESC);\n    });\n    if (props.updateCallback) props.updateCallback();\n  }\n\n  return (\n    <>\n      <div className=\"tbl-col\">\n        <label className=\"obj-text-box one\" onClick={updateMtrTable}\n               style={{float: 'right', marginRight: '10px', textAlign: 'center'}}>저장</label>\n        <table>\n          <colgroup>\n            <col />\n            <col />\n            <col />\n            <col />\n          </colgroup>\n          <thead>\n          <tr>\n            <td>센서</td>\n            <td>센서종류</td>\n            <td>구분</td>\n            <td>설명</td>\n          </tr>\n          </thead>\n          <tbody>\n          {\n            gridRowList\n              .filter(row => row.MTR_NUM === props.mtr.GIS_MTR_NUM)\n              .slice()  // ReadonlyArray를 sort 사용하기위해 사용\n              .sort((a, b) => a.ROW_NUM > b.ROW_NUM ? 1 : 0)  // ROW_NUM 기준으로 asc 소팅\n              .map((rowData, index) => {\n                return (\n                  <tr key={index}>\n                    <td>\n                      <select className=\"optional\" value={rowData.SNSR?.ID}\n                              onChange={(e) => {updateGridRow(index, 'SNSR', e.target.value)}}>\n                        <option value=\"0\">미선택</option>\n                        {\n                          props.allSensorList\n                            // .filter(sensor => sensor.GIS_MTR === 'GIS')  // 센서가 현재 붙어있는 (위치)설비를 가리키며, 해당 센서가 어디에만 붙일 수 있는지 알수가 없다.\n                            .slice()  // ReadonlyArray를 sort 사용하기위해 사용\n                            .sort((a, b) => a.ID > b.ID ? 1 : 0)  // ID 기준으로 asc 소팅\n                            .map((sensor, index) => {\n                              return <option key={index} value={sensor.ID}>{sensor.SNSR_NM}</option>\n                            })\n                        }\n                      </select>\n                    </td>\n                    <td>\n                      <input type=\"text\" value={rowData.SNSR_GROUP}\n                             onChange={(e) => {updateGridRow(index, 'SNSR_GROUP', e.target.value)}} />\n                    </td>\n                    <td>\n                      <input type=\"text\" value={rowData.GUBUN}\n                             onChange={(e) => {updateGridRow(index, 'GUBUN', e.target.value)}} />\n                    </td>\n                    <td>\n                      <input type=\"text\" value={rowData.DESC}\n                             onChange={(e) => {updateGridRow(index, 'DESC', e.target.value)}} />\n                    </td>\n                  </tr>\n                );\n              })\n          }\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ diagram, substation }: IRootState) => ({\n  mtrGrid: diagram.mtrGrid,\n  allSensorList: substation.allSensorList,\n});\n\nconst mapDispatchToProps = {\n  getSldMtrGrid,\n  setSldMtrTable,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SetupMtrTableModule);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\setup\\eqip\\setup-gis-module.tsx",["1206","1207","1208"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { IDiagramEquipment } from '../../../../shared/model/diagram-equipment.model';\nimport { setSldLocation, setSldUseYnTitle } from './eqip.reducer';\n\nexport interface SetupGisModule {\n  gis: IDiagramEquipment;       // 장비 객체\n  divId: string;                // div id 값\n  updateCallback?: Function;     // 업데이트(저장) 이후 콜백\n}\nexport interface ISetupGisModuleProps extends StateProps, DispatchProps, SetupGisModule {}\n\nexport const SetupGisModule = (props: ISetupGisModuleProps) => {\n\n  const [gisInfo, setGisInfo] = useState({\n    gisMtr: props.gis.GIS_MTR,\n    gisMtrNum: props.gis.GIS_MTR_NUM,\n    useYN: (props.gis.USE_YN === 'Y'),\n    title: props.gis.GIS_MTR_TITLE,\n  });\n  const [sensorIdList, setSensorIdList] = useState([]);\n\n  useEffect(() => {\n    const sensorList = props.gisMtrLocation.filter(sensor => sensor.GIS_MTR === 'GIS' && sensor.GIS_MTR_NUM === props.gis.GIS_MTR_NUM);\n    setSensorIdList([\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 1)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 2)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 3)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 4)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 5)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 6)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 7)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 8)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 9)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 10)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 11)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 12)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 13)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 14)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 15)[0]?.SNSR?.ID || 0),\n    ]);\n  }, [props.gisMtrLocation]);\n\n  useEffect(() => {\n  }, []);\n\n  // GIS 정보 저장\n  const updateGis = async () => {\n    await props.setSldUseYnTitle(gisInfo.gisMtr, gisInfo.gisMtrNum, gisInfo.useYN ? 'Y' : 'N', gisInfo.title);\n    await sensorIdList.map((sensorId, index) => {\n      props.setSldLocation(gisInfo.gisMtr, gisInfo.gisMtrNum, index+1, sensorId);\n    })\n    if (props.updateCallback) props.updateCallback();\n  }\n\n  return (\n    <>\n      <div className=\"tbl-col\" id={props.divId}>\n        <div className=\"tit\">#{props.gis.GIS_MTR_NUM}</div>\n        <table>\n          <colgroup>\n            <col width=\"33.33%;\" />\n            <col width=\"33.33%;\" />\n            <col width=\"33.33%;\" />\n          </colgroup>\n          <thead>\n          <tr>\n            <th colSpan={3}>\n              <input type=\"checkbox\" className=\"form-check-input\" checked={gisInfo.useYN} onClick={() => setGisInfo({...gisInfo, useYN: !gisInfo.useYN})} />\n              <input type=\"text\" className=\"ipt-tit\" value={gisInfo.title} onChange={(e) => setGisInfo({...gisInfo, title: e.target.value})} />\n              <label className=\"obj-text-box one\" onClick={updateGis}\n                     style={{float: 'right', marginRight: '10px', textAlign: 'center'}}>저장</label>\n            </th>\n          </tr>\n          </thead>\n          <tbody>\n          {\n            [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]].map((value, index) => {\n              return (\n                <tr key={index}>\n                  {value.map(subValue => {\n                    return (\n                      <td key={subValue}>\n                        <ul className=\"select-ul ul-col2\">\n                          <li>\n                            <select className=\"optional\"\n                                    value={sensorIdList[subValue-1]}\n                                    onChange={(e) => {\n                                      let newSensorInfo = [...sensorIdList];\n                                      newSensorInfo[subValue-1] = parseInt(e.target.value);\n                                      setSensorIdList(newSensorInfo);\n                                    }}>\n                              <option value='0'>미선택</option>\n                              {\n                                props.allSensorList\n                                  // .filter(sensor => sensor.GIS_MTR === 'GIS')  // 센서가 현재 붙어있는 (위치)설비를 가리키며, 해당 센서가 어디에만 붙일 수 있는지 알수가 없다.\n                                  .slice()  // ReadonlyArray를 sort 사용하기위해 사용\n                                  .sort((a, b) => a.ID > b.ID ? 1 : 0)  // ID 기준으로 asc 소팅\n                                  .map((sensor, index) => {\n                                    return <option key={index} value={sensor.ID}>{sensor.SNSR_NM}</option>\n                                  })\n                              }\n                            </select>\n                          </li>\n                        </ul>\n                      </td>\n                    )\n                  })}\n                </tr>\n              )\n            })\n          }\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ diagram, substation }: IRootState) => ({\n  gisMtrLocation: diagram.gisMtrLocation,\n  allSensorList: substation.allSensorList,\n});\n\nconst mapDispatchToProps = {\n  setSldUseYnTitle,\n  setSldLocation,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SetupGisModule);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\trend\\trend-search-filter.tsx",["1209","1210","1211","1212","1213","1214","1215","1216","1217","1218","1219"],"import React, { forwardRef, useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\nimport moment from 'moment';\nimport { getCommonEquipmentList, getCommonSensorList } from '../../reducers/substation';\nimport { flushSync } from 'react-dom';\nimport SelectBox, { ISelectBoxReturn, KeyValuePair } from '../control/select-box';\n\nexport interface ITrendSearchFilterReturn {\n  fromDate: Date | null; // 시작일시\n  toDate: Date | null;   // 종료일시\n  eqipId: string;        // 설비ID\n  snsrId: string;        // 센서ID\n}\nexport interface ITrendSearchFilter {\n  eqipType?: string;      \t\t// 설비 타입 (GIS | MTR - default: ALL)\n\tsnsrType?: string;\t\t\t\t\t// 센서 타입\n  localeFormat?: string;\t\t\t// 캘린더 날짜 타입 ( default: 'YYYY-MM-DD hh:mm A' )\n  useEqipId?: boolean;    \t\t// 설비ID 항목 사용여부 (default: true)\n  useSnsrId?: boolean;    \t\t// 센서ID 항목 사용여부 (default: true)\n  callbackSearch: Function;   // 조회콜백\n  callbackReset: Function;    // 초기화콜백\n}\nexport interface ITrendSearchFilterProps extends StateProps, DispatchProps, ITrendSearchFilter {}\n\n/**\n * 경향 페이지에서 사용하는 조회 필터 컴포넌트\n * @param props\n */\nexport const TrendSearchFilter = forwardRef((props: ITrendSearchFilterProps, ref) => {\n\n  const location = useLocation();\n  const params =  new URLSearchParams(location.search);\n  const localeFormat = props.localeFormat ?? 'YYYY-MM-DD hh:mm A';\n\n  useEffect(() => {\n  }, []);\n\n  // 파라미터 변경 시 수행\n  useEffect(() => {\n    const params = new URLSearchParams(location.search);\n    const eqipId = params.get('eqipId');\n    const snsrId = params.get('snsrId');\n\n\t\tsetFilterState({\n      ...filterState,\n      eqipId: eqipId || '0',\n      snsrId: snsrId || '0',\n    });\n\n  }, [location]);\n\n  // 필터 정보 상태값\n  const [filterState, setFilterState] = useState({\n    fromDate: moment('2020-09-01 00:00:00.000'), // FIXME - 테스트를 위해 임시로 사용 (추후 삭제 필요)\n    toDate: moment('2021-09-30 23:59:59.999'),\n    eqipId: params.get('eqipId') || '0',\n    snsrId: params.get('snsrId') || '0',\n  });\n\n\tconst memoEquipmentList = useMemo(() => {\n\n\t\tlet list = new Array<KeyValuePair>();\n\n\t\tlist.push( {key: \"0\", value: \"전체\"});\n    \n\t\tlet equips = props.equipmentList\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.filter(eqip => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn props.eqipType === 'GIS' ? eqip.EQIP_TYPE === 'GIS' :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.eqipType === 'MTR' ? eqip.EQIP_TYPE === 'MTR' : true\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.map<KeyValuePair>( eqip =>  {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn { key: String(eqip.ID), value: eqip.EQIP_NM } \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\tlist.push(...equips);\n\t\t\n\t\treturn list;\n  }, [props.equipmentList]);\n\n\tconst memoSnsrList = useMemo( () => {\n\n\t\tlet list = new Array<KeyValuePair>();\n\n\t\tlist.push( {key: \"0\", value: \"전체\"});\n\n\t\tlet snsr = props.sensorList\n\t\t\t\t\t\t\t\t\t\t\t\t\t.filter( snsr => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn snsr.EQIP_ID == filterState.eqipId && \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(snsr.SNSR_KIND == props.snsrType || props.snsrType == null );\n\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t.map<KeyValuePair>( snsr => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn { key: String(snsr.ID), value: snsr.SNSR_NM}\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\tlist.push(...snsr);\n\n\t\treturn list;\n\n\t}, [filterState.eqipId]);\n\n  // 조회버튼 선택 시 콜백 수행\n  const searchBtn = () => {\n    if (props.callbackSearch) props.callbackSearch({\n      fromDate: filterState.fromDate.toDate(),\n      toDate: filterState.toDate.toDate(),\n      eqipId: filterState.eqipId,\n      snsrId: filterState.snsrId,\n    } as ITrendSearchFilterReturn);\n  }\n\n  // 초기화버튼 선택 시 콜백 수행\n  const resetBtn = () => {\n    if (props.callbackSearch) props.callbackReset({\n      fromDate: filterState.fromDate.toDate(),\n      toDate: filterState.toDate.toDate(),\n      eqipId: filterState.eqipId,\n      snsrId: filterState.snsrId,\n    } as ITrendSearchFilterReturn);\n  }\n\n  // 부모 컴포넌트에서 조회버튼 기능 이용시 사용\n  useImperativeHandle(ref, () => ({\n    searchBtn: searchBtn\n  }));\n\n\tconst callbackEquip = ( args : ISelectBoxReturn ) => {\n\t\tsetFilterState({\n\t\t\t...filterState,\n\t\t\teqipId: args.selected\n\t\t});\n\t}\n\n\tconst callbackSnsr = ( args : ISelectBoxReturn ) => {\n\t\tsetFilterState({\n\t\t\t...filterState,\n\t\t\tsnsrId: args.selected\n\t\t});\n\n\t\tsearchBtn();\n\t}\n\n  return (\n    <>\n      <div className=\"obj-wrapper\">\n        <ul>\n          <li className=\"obj-term width-2\">\n            <span>시작 일시</span>\n            <div className=\"obj-calendar\">\n              <i className=\"icon-calendar\"></i>\n              <DateRangePicker\n                onApply={(event, picker) => {\n                  setFilterState({\n                    ...filterState,\n                    fromDate: picker.startDate\n                  });\n                }}\n                initialSettings={{\n                  singleDatePicker: true,\n                  timePicker: true,\n                  timePicker24Hour: true,\n                  /*autoUpdateInput: true,*/\n                  startDate: filterState.fromDate,\n                  /*endDate: '20/09/25',*/\n                  locale: {\n                    // format: 'YYYY-MM-DD hh:mm A'\n                    format: localeFormat\n                  }\n                }}>\n                <input type=\"text\" name=\"datetimes\"/>\n              </DateRangePicker>\n            </div>\n          </li>\n          <li className=\"obj-term width-2\">\n            <span>종료 일시</span>\n            <div className=\"obj-calendar\">\n              <i className=\"icon-calendar\"></i>\n              <DateRangePicker\n                onApply={(event, picker) => {\n                  setFilterState({\n                    ...filterState,\n                    toDate: picker.startDate\n                  });\n                }}\n                initialSettings={{\n                  singleDatePicker: true,\n                  timePicker: true,\n                  timePicker24Hour: true,\n                  startDate: filterState.toDate,\n                  /*endDate: '20/09/26',*/\n                  locale: {\n                    format: localeFormat\n                  }\n                }}>\n                <input type=\"text\" name=\"datetimes\"/>\n              </DateRangePicker>\n            </div>\n          </li>\n\t\t\t\t\t{\n            props.useEqipId === false ? '' :\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<span>설비 선택</span>\n\t\t\t\t\t\t\t<SelectBox defaultValue={filterState.eqipId} \n\t\t\t\t\t\t\t\t\t\t\t\t\telementName=\"equiplist\" \n\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"설비 선택\" \n\t\t\t\t\t\t\t\t\t\t\t\t\toptions={memoEquipmentList}\n\t\t\t\t\t\t\t\t\t\t\t\t\tcallback={callbackEquip}/>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t}\n\t\t\t\t\t{\n            props.useSnsrId === false ? '' :\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<span>센서 선택</span>\n\t\t\t\t\t\t\t<SelectBox defaultValue={filterState.snsrId}\n\t\t\t\t\t\t\t\t\t\t\t\t\telementName=\"snsrlist\" \n\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"센서 선택\" \n\t\t\t\t\t\t\t\t\t\t\t\t\toptions={memoSnsrList}\n\t\t\t\t\t\t\t\t\t\t\t\t\tcallback={callbackSnsr}/>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t}\n          <li className=\"\"><span>&nbsp;</span>\n            <div className=\"\" style={{marginTop:'5px'}}>\n              <a className=\"btn submit\" onClick={searchBtn}>조회</a>\n              <a className=\"btn white\" onClick={resetBtn}>초기화</a>\n            </div>\n          </li>\n        </ul>\n      </div>\n    </>\n  );\n});\n\nconst mapStateToProps = ({ substation }: IRootState) => ({\n  equipmentList: substation.equipmentList,\n  sensorList: substation.allSensorList,\n});\n\nconst mapDispatchToProps = {\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  null,\n  {\n    getDisplayName: () => 'TrendSearchFilter',\n    forwardRef: true\n  })(TrendSearchFilter);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\status\\status-search-filter.tsx",["1220","1221","1222","1223","1224","1225","1226","1227","1228"],"import React, { forwardRef, useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\nimport moment from 'moment';\nimport { getCommonEquipmentList, getCommonSensorList } from '../../reducers/substation';\nimport { ISelectBoxReturn, KeyValuePair, SelectBox } from '../control/select-box';\n\nexport interface IStatusSearchFilterReturn {\n  fromDate: Date | null; // 시작일시\n  toDate: Date | null;   // 종료일시\n  eqipId: string;        // 설비ID\n  snsrId: string;        // 센서ID\n  diagCont: string;      // 진단선택명\n}\n\nexport interface IStatusSearchFilter {\n  eqipType?: string;      // 설비 타입 (GIS | MTR - default: ALL)\n\tsnsrType?: string;\t\t\t// 센서 타입\n  useDiagCont?: boolean;  // 진단선택 항목 사용여부 (default: true)\n  callback: Function;     // 콜백\n}\nexport interface IStatusSearchFilterProps extends StateProps, DispatchProps, IStatusSearchFilter {}\n\n/**\n * 현황 페이지에서 사용하는 조회 필터 컴포넌트\n * @param props\n */\nexport const StatusSearchFilter = forwardRef((props: IStatusSearchFilterProps, ref) => {\n\n  const location = useLocation();\n  const params =  new URLSearchParams(location.search);\n\n\tuseEffect(() => {\n  }, []);\n\n  // 파라미터 변경 시 수행\n  useEffect(() => {\n    const params = new URLSearchParams(location.search);\n    const eqipId = params.get('eqipId');\n    const snsrId = params.get('snsrId');\n    const diagCont = params.get('diagCont');\n\n\t\tsetFilterState({\n      ...filterState,\n      eqipId: eqipId || '0',\n      snsrId: snsrId || '0',\n      diagCont: diagCont || '',\n    });\n\n\t\t// console.log(`eqipId[${eqipId}] snsrId[${snsrId}] diagCont[${diagCont}]`);\n  }, [location]);\n\n  // 필터 정보 상태값\n  const [filterState, setFilterState] = useState({\n    fromDate: moment('2020-09-01 00:00:00.000'), // FIXME - 테스트를 위해 임시로 사용 (추후 삭제 필요)\n    toDate: moment('2021-09-30 23:59:59.999'),\n\t\t// fromDate: moment('2020-06-01 13:12:00'), // FIXME - 테스트를 위해 임시로 사용 (추후 삭제 필요)\n    // toDate: moment('2021-06-01 13:12:00'),\n    // fromDate: moment().subtract(7, 'days'),\n    // toDate: moment(),\n    eqipId: params.get('eqipId') || '0',\n    snsrId: params.get('snsrId') || '0',\n    diagCont: params.get('diagCont') || '',\n  });\n\n\tconst memoEquipmentList = useMemo(() => {\n\n\t\tlet list = new Array<KeyValuePair>();\n\n\t\tlist.push( {key: \"0\", value: \"전체\"});\n    \n\t\tlet equips = props.equipmentList\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.filter(eqip => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn props.eqipType === 'GIS' ? eqip.EQIP_TYPE === 'GIS' :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.eqipType === 'MTR' ? eqip.EQIP_TYPE === 'MTR' : true\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.map<KeyValuePair>( eqip =>  {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn { key: String(eqip.ID), value: eqip.EQIP_NM } \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\tlist.push(...equips);\n\t\t\n\t\treturn list;\n  }, [props.equipmentList]);\n\n\tconst memoSnsrList = useMemo( () => {\n\n\t\tlet list = new Array<KeyValuePair>();\n\n\t\tlist.push( {key: \"0\", value: \"전체\"});\n\n\t\tlet snsr = props.sensorList\n\t\t\t\t\t\t\t\t\t\t\t\t\t.filter( snsr => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn snsr.EQIP_ID == filterState.eqipId && \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(snsr.SNSR_KIND == props.snsrType || props.snsrType == null );\n\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t.map<KeyValuePair>( snsr => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn { key: String(snsr.ID), value: snsr.SNSR_NM}\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\tlist.push(...snsr);\n\n\t\treturn list;\n\n\t}, [filterState.eqipId]);\n\n\tconst diagList = () => {\n\t\tconst list = new Array<KeyValuePair>();\n\t\tlist.push({ key: '', value: '전체'});\n\t\tlist.push({ key: 'Corona', value: 'Corona'});\n\t\tlist.push({ key: 'Floating', value: 'Floating'});\n\t\tlist.push({ key: 'TtoT', value: 'TtoT'});\n\t\tlist.push({ key: 'Surface', value: 'Surface'});\n\t\tlist.push({ key: 'Void', value: 'Void'});\n\t\tlist.push({ key: 'Noise', value: 'Noise'});\n\t\n\t\treturn list;\n\t}\n\n  // 조회버튼 선택 시 콜백 수행\n  const searchBtn = () => {\n    if (props.callback) props.callback({\n      fromDate: filterState.fromDate.toDate(),\n      toDate: filterState.toDate.toDate(),\n      eqipId: filterState.eqipId,\n      snsrId: filterState.snsrId,\n      diagCont: filterState.diagCont,\n    } as IStatusSearchFilterReturn);\n  }\n\n  // 부모 컴포넌트에서 조회버튼 기능 이용시 사용\n  useImperativeHandle(ref, () => ({\n    searchBtn: searchBtn\n  }));\n\n\n\tconst callbackEquip = ( args : ISelectBoxReturn ) => {\n\t\tsetFilterState({\n\t\t\t...filterState,\n\t\t\teqipId: args.selected\n\t\t});\n\t}\n\n\tconst callbackSnsr = ( args : ISelectBoxReturn ) => {\n\t\tsetFilterState({\n\t\t\t...filterState,\n\t\t\tsnsrId: args.selected\n\t\t});\n\n\t\t// 센서가 바뀐 경우에 조회\n\t\tsearchBtn();\n\t}\n\n\tconst callbackDiag = ( args : ISelectBoxReturn ) => {\n\t\tsetFilterState({\n\t\t\t...filterState,\n\t\t\tdiagCont: args.selected\n\t\t});\n\t}\n\t\n\n  return (\n    <>\n      <div className=\"obj-wrapper\">\n        <ul>\n          <li className=\"obj-term width-2\">\n            <span>시작 일시</span>\n            <div className=\"obj-calendar\">\n              <i className=\"icon-calendar\"></i>\n              <DateRangePicker\n                onApply={(event, picker) => {\n                  setFilterState({\n                    ...filterState,\n                    fromDate: picker.startDate\n                  });\n                }}\n                initialSettings={{\n                  singleDatePicker: true,\n                  timePicker: true,\n                  timePicker24Hour: true,\n                  /*autoUpdateInput: true,*/\n                  startDate: filterState.fromDate,\n                  /*endDate: '20/09/25',*/\n                  locale: {\n                    format: 'YYYY-MM-DD hh:mm A'\n                  }\n                }}>\n                <input type=\"text\" name=\"datetimes\"/>\n              </DateRangePicker>\n            </div>\n          </li>\n          <li className=\"obj-term width-2\">\n            <span>종료 일시</span>\n            <div className=\"obj-calendar\">\n              <i className=\"icon-calendar\"></i>\n              <DateRangePicker\n                onApply={(event, picker) => {\n                  setFilterState({\n                    ...filterState,\n                    toDate: picker.startDate\n                  });\n                }}\n                initialSettings={{\n                  singleDatePicker: true,\n                  timePicker: true,\n                  timePicker24Hour: true,\n                  startDate: filterState.toDate,\n                  /*endDate: '20/09/26',*/\n                  locale: {\n                    format: 'YYYY-MM-DD hh:mm A'\n                  }\n                }}>\n                <input type=\"text\" name=\"datetimes\"/>\n              </DateRangePicker>\n            </div>\n          </li>\n          <li className=\"width-15\">\n            <span>설비 선택</span>\n\t\t\t\t\t\t<SelectBox defaultValue={filterState.eqipId}\n\t\t\t\t\t\t\t\t\t\t\t\t\telementName=\"equiplist\" \n\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"설비 선택\" \n\t\t\t\t\t\t\t\t\t\t\t\t\toptions={memoEquipmentList}\n\t\t\t\t\t\t\t\t\t\t\t\t\tcallback={callbackEquip}/>\n          </li>\n          <li className=\"width-15\">\n            <span>센서 선택</span>\n\t\t\t\t\t\t<SelectBox defaultValue={filterState.snsrId}\n\t\t\t\t\t\t\t\t\t\t\t\t\telementName=\"snsrlist\" \n\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"센서 선택\" \n\t\t\t\t\t\t\t\t\t\t\t\t\toptions={memoSnsrList}\n\t\t\t\t\t\t\t\t\t\t\t\t\tcallback={callbackSnsr}/>\n          </li>\n          {\n            props.useDiagCont === false ? '' :\n              <li className=\"width-15\">\n                <span>진단선택</span>\n\t\t\t\t\t\t\t\t<SelectBox defaultValue=\"\" \n\t\t\t\t\t\t\t\t\t\t\t\t\telementName=\"diaglist\" \n\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"진단 선택\" \n\t\t\t\t\t\t\t\t\t\t\t\t\toptions={diagList()}\n\t\t\t\t\t\t\t\t\t\t\t\t\tcallback={callbackDiag}/>\n              </li>\n          }\n          <li className=\"\"><span>&nbsp;</span>\n            <div className=\"\" style={{marginTop:'5px'}}><a className=\"btn submit\" onClick={searchBtn}>조회</a></div>\n          </li>\n        </ul>\n      </div>\n    </>\n  );\n});\n\nconst mapStateToProps = ({ substation }: IRootState) => ({\n  equipmentList: substation.equipmentList,\n  sensorList: substation.allSensorList,\n});\n\nconst mapDispatchToProps = {\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  null,\n  {\n    getDisplayName: () => 'StatusSearchFilter',\n    forwardRef: true\n  })(StatusSearchFilter);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\pager\\Pager.tsx",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\control\\select-box.tsx",["1229","1230","1231","1232"],"import React, { forwardRef, useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\n\nexport interface KeyValuePair{\n\tkey: string,\n\tvalue: string,\n}\n\nexport interface ISelectBoxReturn {\n  selected: string;      \t\t\t\t\t// 선택된 값\n}\n\nexport interface ISelectBox {\n\telementName: string;\t\t\t\t\t\t// id로 사용\n\tdefaultValue: string;\t\t\t\t\t\t// 기본값 옵션 배열에 포함될 것\n\tplaceholder: string;\t\t\t\t\t\t// place holder에 들어갈 문구\n\toptions: Array<KeyValuePair>;\t\t// 옵션 배열(전체를 포함)\n\tcallback?: Function;\t\t\t\t\t\t// 업데이트 이벤트 필요시\n\tchildrun?: React.ReactNode;\n\tisRealtimeMode?: boolean;       // 실시간에서 사용하는 SelectBox\n\tisLibraryMode?: boolean;        // 실시간에서 사용하는 SelectBox\n}\n\nexport interface ISelectBoxProps extends StateProps, DispatchProps, ISelectBox {}\n\nexport const SelectBox = forwardRef((props: ISelectBoxProps, ref) => {\n\n\tconst [member, setMember] = useState({\n\t\tselected: props.defaultValue,\n\t});\n\n\tconst selected = () => {\n\t\treturn member.selected;\n\t}\n\n\t// 설비 JSX Element의 id 생성함수\n\tconst getElementId = ( id : string ) => {\n\t\treturn props.elementName + id;\n\t}\n\n\t// 설비 선택시 호출 함수\n\tconst changeValue = (e) => {\n\t\tsetMember({\n\t\t\tselected: e.target.value,\n\t\t});\n\n\t\tif( props.callback ) {\n\t\t\tprops.callback(\n\t\t\t\t{\n\t\t\t\t\tselected: e.target.value\n\t\t\t\t} as ISelectBoxReturn\n\t\t\t);\n\t\t}\n\t}\n\n\t// console.log(`select box [${[props.placeholder]}]`);\n\t// console.log(`option length[${props.options.length}] defaultValue[${props.defaultValue}] member.selected[${member.selected}]`);\n\n\tuseEffect(() => {\n\t\t// console.log(`init default Value [${props.defaultValue}]`);\n\t\t// setMember({\n\t\t// \tselected: props.defaultValue,\n\t\t// });\n\t}, []);\n\n\tuseEffect(() => {\n\t\t// console.log(`change default Value [${props.defaultValue}]`);\n\n\t\t// 값이 바뀌었으면 callback\n\t\tsetMember({\n\t\t\tselected: props.defaultValue,\n\t\t});\n\n\t\tif( props.callback ) {\n\t\t\tprops.callback(\n\t\t\t\t{\n\t\t\t\t\tselected: props.defaultValue\n\t\t\t\t} as ISelectBoxReturn\n\t\t\t);\n\t\t}\n\n\t}, [props.defaultValue]);\n\n\t// 부모 컴포넌트에서 선택된 값을 알고 싶을 때 사용\n\tuseImperativeHandle(ref, () => ({\n\t\tselected: selected\n\t}));\n\n\tconst elementFor = props.elementName + 'For';\n\n\t// useMemo로 개선 ???\n\t// const elements = useMemo(() => {\n\t// \tconst list = new Array<JSX.Element>();\n\n\t// \tfor( let item of props.options)\n\t// \t{\n\t// \t\tlist.push(React.createElement(\n\t// \t\t\t\t\t\t\t\t\t\t\t'input',\n\t// \t\t\t\t\t\t\t\t\t\t\t{\n\t// \t\t\t\t\t\t\t\t\t\t\t\ttype: 'radio',\n\t// \t\t\t\t\t\t\t\t\t\t\t\tname: props.elementName,\n\t// \t\t\t\t\t\t\t\t\t\t\t\tid: getElementId(item.key),\n\t// \t\t\t\t\t\t\t\t\t\t\t\tvalue: item.key,\n\t// \t\t\t\t\t\t\t\t\t\t\t\tchecked: item.key == member.selected ? true : false,\n\t// \t\t\t\t\t\t\t\t\t\t\t\tonChange: changeValue,\n\t// \t\t\t\t\t\t\t\t\t\t\t}));\n\n\t// \t\tlist.push(React.createElement(\n\t// \t\t\t\t\t\t\t\t\t\t\t'label',\n\t// \t\t\t\t\t\t\t\t\t\t\t{\n\t// \t\t\t\t\t\t\t\t\t\t\t\thtmlFor: elementFor,\n\t// \t\t\t\t\t\t\t\t\t\t\t},\n\t// \t\t\t\t\t\t\t\t\t\t\titem.value));\n\t// \t}\n\n\t// \treturn list;\n\t// }, props.options);\n\n\tconst elements = new Array<JSX.Element>();\n\n\tfor( let item of props.options)\n\t{\n\t\telements.push(React.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t\t'input',\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'radio',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: props.elementName,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tid: getElementId(item.key),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: item.key,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchecked: item.key == member.selected ? true : false,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange: changeValue,\n\t\t\t\t\t\t\t\t\t\t\t\t\t}));\n\n\t\telements.push(React.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t\t'label',\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thtmlFor: elementFor,\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\titem.value));\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<div className={`select-wrapper ${props.isRealtimeMode && 'pd-only real-time'} ${props.isLibraryMode && 'pd-only small'}`}>\n\t\t\t\t<div className=\"select lookup block\">\n\t\t\t\t\t\t<input id={elementFor} readOnly type=\"text\" className=\"select-options-focus\" />\n\t\t\t\t\t\t<div className=\"select-field\">\n\n\t\t\t\t\t\t\t\t{elements}\n\t\t\t\t\t\t\t\t<label className=\"select-placeholder\" htmlFor={elementFor}>{props.placeholder}</label>\n\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"select-options\">\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tprops.options.map( (item, index) => {\n\t\t\t\t\t\t\t\t\treturn (<label key={index} htmlFor={getElementId(item.key)}>{item.value}</label>);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n});\n\nconst mapStateToProps = ({ substation }: IRootState) => ({\n});\n\nconst mapDispatchToProps = {\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\n// import 방법에 대해서 확인\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n\tnull,\n  {\n    getDisplayName: () => 'SelectBox',\n    forwardRef: true\n  })(SelectBox);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\popup\\bushing\\modal-bushingcompare.tsx",["1233","1234"],"import React, { useEffect, useState } from 'react';\nimport { IBushingCompare } from 'shared/model/bushing-event.model';\n\nimport { emptyOptions, HighchartLineDefault } from 'shared/component/chart/highcharts/hightchart-line-default1';\n\nexport interface IModalBushingCompareProps {\n  close: Function,\n\teventId?: number,\n\toccrTime: Date,\n\tchartData: IBushingCompare[],\n}\n\nexport const ModalBushingCompare = (props: IModalBushingCompareProps) => {\n\n\tconst fixedDigit = 3;\n\n\tconst [chartOptions, setChartOptions] = useState({\n\t\toption1: emptyOptions,\n\t})\n\n\tuseEffect(() => {\n\n\t\tconst volAngle : number[] = [0, 0, 0];\n\t\tconst leakAngle : number[] = [0, 0, 0];\n\t\tconst it : number[] = [0, 0, 0];\n\n\t\tfor( let i = 0; i < 3; i++){\n\t\t\tvolAngle[i] = props.chartData[i]?.VOL;\n\t\t\tleakAngle[i] = props.chartData[i]?.LEAK_A_PHS;\n\t\t\tit[i] = props.chartData[i]?.LEAK_A;\n\t\t}\n\n\t\tconst option1 = {\n\t\t\t\t\t\tchart: {\n\t\t\t\t\t\t\tpolar: true\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttitle: {\n\t\t\t\t\t\t\t\ttext: ''\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpane: {\n\t\t\t\t\t\t\tstartAngle: 0,\n\t\t\t\t\t\t\tendAngle: 360\n\t\t\t\t\t\t},\n\t\t\t\t\t\txAxis: {\n\t\t\t\t\t\t\ttickInterval: 45,\n\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\tmax: 360,\n\t\t\t\t\t\t\tlabels: {\n\t\t\t\t\t\t\t\tformatter: function () {\n\t\t\t\t\t\t\t\t\treturn this.value + '°';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t//하나만 있어도 될 것 같은데???\n\t\t\t\t\t\tyAxis: [{ // Primary yAxis\n\t\t\t\t\t\t\t\tlabels: {\n\t\t\t\t\t\t\t\t\t\tenabled: false\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabels: {\n\t\t\t\t\t\t\t\t\t\tenabled: false\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tplotOptions: {\n\t\t\t\t\t\t\t\tseries: {\n\t\t\t\t\t\t\t\t\t\tmarker: {\n\t\t\t\t\t\t\t\t\t\t\t\tenabled: false\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tseries: [{\n\t\t\t\t\t\t\t\ttype: 'line',\n\t\t\t\t\t\t\t\tname: '전압 A상',\n\t\t\t\t\t\t\t\tdata: [0, volAngle[0]],\n\t\t\t\t\t\t\t\tpointInterval: volAngle[0],\n\t\t\t\t\t\t\t\tyAxis: 0,\n\t\t\t\t\t\t\t\tcolor: \"#ff0000\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'line',\n\t\t\t\t\t\t\t\tname: '전압 B상',\n\t\t\t\t\t\t\t\tdata: [0, volAngle[1]],\n\t\t\t\t\t\t\t\tpointInterval: volAngle[1],\n\t\t\t\t\t\t\t\tyAxis: 0,\n\t\t\t\t\t\t\t\tcolor: \"#ff7200\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'line',\n\t\t\t\t\t\t\t\tname: '전압 C상',\n\t\t\t\t\t\t\t\tdata: [0, volAngle[2]],\n\t\t\t\t\t\t\t\tpointInterval: volAngle[2],\n\t\t\t\t\t\t\t\tyAxis: 0,\n\t\t\t\t\t\t\t\tcolor: \"#ffe500\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'line',\n\t\t\t\t\t\t\t\tname: '누설전류 A상',\n\t\t\t\t\t\t\t\tdata: [0, it[0]],\n\t\t\t\t\t\t\t\tpointInterval: leakAngle[0],\n\t\t\t\t\t\t\t\tyAxis: 1,\n\t\t\t\t\t\t\t\tcolor: \"#00cc5f\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'line',\n\t\t\t\t\t\t\t\tname: '누설전류 B상',\n\t\t\t\t\t\t\t\tdata: [0, it[1]],\n\t\t\t\t\t\t\t\tpointInterval: leakAngle[1],\n\t\t\t\t\t\t\t\tyAxis: 1,\n\t\t\t\t\t\t\t\tcolor: \"#0061d8\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'line',\n\t\t\t\t\t\t\t\tname: '누설전류 C상',\n\t\t\t\t\t\t\t\tdata: [0, it[2]],\n\t\t\t\t\t\t\t\tpointInterval: leakAngle[2],\n\t\t\t\t\t\t\t\tyAxis: 1,\n\t\t\t\t\t\t\t\tcolor: \"#8000b7\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t]\n\t\t\t\t\t};\n\t\n\t\tsetChartOptions({\n\t\t\t\toption1: option1,\n\t\t\t});\n\t}, [props.chartData]);\n\n\tconst sersorDataList = () => {\n\n\t\treturn \n\t}\n\n  return (\n    <>\n      <div className=\"layer-wrap notice-info wide round\" data-layer=\"notice-info\" >\n        <div className=\"popup-wrapper\">\n          <div className=\"popup-container \">\n            <div className=\"title-area mint\">\n              <h2>부싱 누설전류 현황</h2>\n              <div className=\"side-btn\">\n                <a href=\"#\" className=\"btn-close\" onClick={() => props.close()}><i className=\"icon-close\"></i></a>\n              </div>\n            </div>\n            <div className=\"popup-contents\">\n              <h2 className=\"gap-down-20\">발생일시 : {props.occrTime}</h2>\n              <div className=\"data-popup\">\n                <table className=\"data-grid\">\n                  <colgroup>\n                    <col style={{width:'70px'}}/>\n                    <col style={{}}/>\n                    <col style={{}}/>\n                    <col style={{}}/>\n                  </colgroup>\n                  <thead>\n                  <tr>\n                    <th>&nbsp;</th>\n                    <th>진단결과</th>\n                    <th>전압</th>\n                    <th>기준<br/>누설전류</th>\n                    <th>측정<br/>누설전류</th>\n                    <th>누설전류<br/>변화율</th>\n                    <th>기준<br/>W/Loss</th>\n                    <th>측정<br/>W/Loss</th>\n                    <th>W/Loss<br/>변화율</th>\n                    <th>전압위상</th>\n                    <th>누설<br/>전류위상</th>\n                    <th>위상차</th>\n                    <th>명판<br/>Capacitance</th>\n                    <th>측정<br/>Capacitance</th>\n                    <th>손실계수</th>\n                    <th>역률</th>\n                    <th>불평형전류</th>\n                    <th>불평형전류<br/>위상</th>\n                  </tr>\n                  </thead>\n                  <tbody>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tprops.chartData?.map( item => {\n\t\t\t\t\t\t\t\t\t\t\tlet angleGap = item.LEAK_A_PHS > 0 ? Math.abs(360 - item.LEAK_A_PHS) : Math.abs(item.LEAK_A_PHS - item.VOL_PHS);\n\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<th>{item.SNSR_NM}</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{item.DIAG_RSLT}정상</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{item.VOL.toLocaleString()} V</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{item.DISPL_A.toFixed(fixedDigit)} mA</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{item.LEAK_A.toFixed(fixedDigit)} mA</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{item.ERR_FACT.toFixed(fixedDigit)} %</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{item.WATT_LOSS_THRE.toFixed(fixedDigit)} W</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{item.WATT_LOSS.toFixed(fixedDigit)} W</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{item.WL_ERR_FACT.toFixed(fixedDigit)} %</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{item.VOL_PHS.toFixed(fixedDigit)} º</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{item.LEAK_A_PHS.toFixed(fixedDigit)} º</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{angleGap.toFixed(fixedDigit)} º</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{item.REACT.toFixed(fixedDigit)} pF</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{item.ABS_REACT.toFixed(fixedDigit)} pF</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{item.LOS_FACT.toFixed(fixedDigit)}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{item.PF.toFixed(fixedDigit)}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{item.UNBL_A.toFixed(fixedDigit)} mA</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{item.UNBL_A_PHS.toFixed(fixedDigit)} º</td>\n\t\t\t\t\t\t\t\t\t\t\t\t</tr>);\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}\n                  </tbody>\n                </table>\n              </div>\n              <div className=\"graph-container gap-up-40\">\n                <div className=\"input-legend graph-wrap block\">\n\t\t\t\t\t\t\t\t\t<div className=\"graph-container\" style={{background:'#eee'}}>\n\t\t\t\t\t\t\t\t\t\t<HighchartLineDefault options={chartOptions.option1} />\n\t\t\t\t\t\t\t\t\t</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\status\\bushinglist\\satus-bushing-list.tsx",["1235","1236","1237","1238","1239","1240","1241","1242"],"import React, { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport moment from 'moment';\nimport Pager from '../../pager/Pager';\nimport { getStatusMtrBushingEvent, getStatusMtrBushingSelectRow } from '../../../../views/status/mtr/bushing/bushing.reducer';\nimport { IBushingEvent, IBushingSelectRow } from 'shared/model/bushing-event.model';\n\nexport interface IStatusBushingList {\n  fromDate: Date;         // 시작일시\n  toDate: Date;           // 종료일시\n  eqipId: string;         // 설비ID\n  snsrId: string;         // 센서ID\n  diagCont: string;       // 진단선택명\n\n  // onClickDetail?: Function //리스트의 상세보기 버튼을 선택 시 수행할 함수\n  onClickCompare?: Function //리스트의 비교하기 버튼을 선택 시 수행할 함수\n}\nexport interface IStatusBushingProps extends StateProps, DispatchProps, IStatusBushingList {}\n\n\nexport const StatusBushingList = forwardRef((props: IStatusBushingProps, ref) => {\n\n  // 페이징 관련 state\n  const [isPageInfoUpdate, setIsPageInfoUpdate] = useState(false);\n  const [pageInfo, setPageInfo] = useState({\n    activePageEvent: 1,\n    itemsCountPerPage: 10,\n  });\n\n\n  // Oltc 모터 동작 현황 이벤트 리스트 호출\n  const searchBushingEvent = () => {\n    props.getStatusMtrBushingEvent(\n      props.fromDate,\n      props.toDate,\n      props.eqipId,\n      props.snsrId,\n      props.diagCont,\n      pageInfo.activePageEvent,\n      pageInfo.itemsCountPerPage);\n  }\n\n  // 부모 컴포넌트에서 리스트 조회 기능 이용시 사용\n  useImperativeHandle(ref, () => ({\n    search: () => setPageInfo({\n      ...pageInfo,\n      activePageEvent: 1\n    })\n  }));\n\n  // 페이지 노출개수 변경 시 리스트 재조회\n  useEffect(() => {\n    if (isPageInfoUpdate) {\n      searchBushingEvent();\n    } else {\n      setIsPageInfoUpdate(true);\n    }\n  }, [pageInfo]);\n\n\tconst [refresh, setRefresh] = useState(0);\n\tconst refreshPage = () => { setRefresh(Math.random())};\n\n\tuseEffect(() => {\n\t\t\n\t\tif( props.bushingSelectRow.length == 0 )\n\t\t\treturn;\n\n\t\tconst data = props.bushingSelectRow[0];\n\t\tdetailMap.set( data.ID, data );\n\n\t\t// 추가됨\n\t\t// console.log(`상세보기가 추가됨`);\n\t\t// console.log(detailMap);\n\n\t\trefreshPage();\n\n\t}, [props.bushingSelectRow,])\n\n\tconst [ detailMap, setDetailMap ] = useState(new Map<string, IBushingSelectRow>());\n\tconst clickDetail = ( event : IBushingEvent ) => {\n\n\t\tif( detailMap.has( event.SBSH_ID ) ){\n\t\t\t// 상세 데이터가 있으면 삭제\n\t\t\tdetailMap.delete( event.SBSH_ID );\n\t\t\t// console.log(`상세 닫기 SBSH_ID[${event.SBSH_ID}]`);\n\t\t\t// setDetailMap(detailMap);\n\t\t\trefreshPage();\n\t\t}\n\t\telse {\n\t\t\t// 상세 데이터가 없으면 추가\n\t\t\tprops.getStatusMtrBushingSelectRow(Number(event.SBSH_ID));\n\t\t\t// console.log(`상세 열기 SBSH_ID[${event.SBSH_ID}]`);\n\t\t}\n\t} \n\n\tconst detailLines = (event : IBushingEvent) => {\n\n\t\t// console.log(`detailLines [${event.SBSH_ID}]`);\n\t\t// console.log(detailMap.has(event.SBSH_ID));\n\n\t\tif( detailMap.has(event.SBSH_ID) == false )\n\t\t\treturn null;\n\n\n\t\tconst row = detailMap.get(event.SBSH_ID);\n\t\t// console.log(row);\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<tr key={row.ID} className=\"alarm-info\">\n\t\t\t\t\t<td colSpan={12}>\n\t\t\t\t\t\t\t<div className=\"user-info\">\n\t\t\t\t\t\t\t\t\t<p className=\"width-2\">\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"tag\">전압</span>\n\t\t\t\t\t\t\t\t\t\t\t<span>{row.VOL.toFixed(2)} V</span>\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<p className=\"width-2\">\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"tag\">손실계수</span>\n\t\t\t\t\t\t\t\t\t\t\t<span>{row.LOS_FACT.toFixed(2)}</span>\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<p className=\"width-2\">\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"tag\">역률</span>\n\t\t\t\t\t\t\t\t\t\t\t<span>{row.PF.toFixed(2)}</span>\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<p className=\"width-2\">\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"tag\">명판 Capacitance</span>\n\t\t\t\t\t\t\t\t\t\t\t<span>{row.REACT.toFixed(2)} pF</span>\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<p className=\"width-2\">\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"tag\">실측 Capacitance</span>\n\t\t\t\t\t\t\t\t\t\t\t<span>{row.ABS_REACT.toFixed(2)} pF</span>\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<p className=\"width-2\">\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"tag\">누설전류 위상</span>\n\t\t\t\t\t\t\t\t\t\t\t<span>{row.LEAK_A_PHS.toFixed(2)} º</span>\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<p className=\"width-2\">\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"tag\">전압 위상</span>\n\t\t\t\t\t\t\t\t\t\t\t<span>{row.VOL_PHS.toFixed(2)} º</span>\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<p className=\"width-2\">\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"tag\">위상차이</span>\n\t\t\t\t\t\t\t\t\t\t\t<span>{row.PHS_GAP.toFixed(2)} º</span>\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<p className=\"width-2\">\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"tag\">불평형전류</span>\n\t\t\t\t\t\t\t\t\t\t\t<span>{row.UNBL_A.toFixed(2)} mA</span>\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<p className=\"width-2\">\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"tag\">불평형전류 위상</span>\n\t\t\t\t\t\t\t\t\t\t\t<span>{row.UNBL_A_PHS.toFixed(2)} º</span>\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</>\n\t\t);\n\t}\n\n\tconst tableLines = () => {\n\t\tif( !props.bushingEventList.length ) {\n\t\t\treturn <>\n\t\t\t\t<tr>\n\t\t\t\t\t<td colSpan={8}>조회된 데이터가 없습니다. (시작일시 2020.09.22 이전, 종료일시 2020.09.25 조회 시 데이터 조회 가능)</td>\n\t\t\t\t</tr>\n\t\t\t</>;\n\t\t}\n\n\t\tconst lines = new Array<JSX.Element>();\n\n\t\tfor( let event of props.bushingEventList ) {\n\t\t\t// console.log(event);\n\n\t\t\tlines.push( \n\t\t\t\t<tr key={event.SBSH_ID} className=\"opener\">\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<span className=\"obj-plus-box btn white narrow\" \t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tonClick={() => { clickDetail(event); }}>\n\t\t\t\t\t\t\t상세\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<span>{event.SNSR_NM}</span>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<span>{event.SNSR_NM}</span>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<span>{moment(event.OCCR_TIME).format('YYYY-MM-DD HH:mm:ss')}</span>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<span>{event.DIAG_RSLT}</span>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<span>{event.DISPL_A}</span>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<span>{event.LEAK_A}</span>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<span>{event.ERR_FACT}</span>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<span>{event.WATT_LOSS_THRE}</span>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<span>{event.WATT_LOSS}</span>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<span>{event.WL_ERR_FACT}</span>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t<a className=\"call-popup btn white narrow\"\n\t\t\t\t\t\t\t\tdata-layer=\"notice-info\"\n\t\t\t\t\t\t\t\tonClick={() => {props.onClickCompare({\n\t\t\t\t\t\t\t\t\t\teventId: event.EVNT_ID,\n\t\t\t\t\t\t\t\t\t\toccrTime: moment(event.OCCR_TIME).format('YYYY-MM-DD HH:mm:ss'),\n\t\t\t\t\t\t\t\t\t})}}\n\t\t\t\t\t\t\t>비교하기\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t);\n\n\t\t\t// 확대 정보가 있으면 추가\n\t\t\tlines.push(detailLines(event));\n\t\t}\n\n\t\t// console.log(`목록 개수 [${props.bushingEventList.length}] 라인 개수 [${lines.length}]`);\n\t\t// console.log(lines);\n\t\treturn lines;\n\t}\n\n\n  return (\n    <>\n      <div className=\"contents-table\">\n        <div className=\"contents-tabmenu gap-down-10\">\n          <div className=\"obj-select option\">\n            <form className=\"select-cover\">\n              <div className=\"select-box\">\n                <input type=\"checkbox\" id=\"select-indicator06\"/>\n                <label className=\"select small\" htmlFor=\"select-indicator06\">{pageInfo.itemsCountPerPage}</label>\n                <div className=\"option small\">\n                  {\n                    [10, 25, 50, 100].map((value, index) =>\n                      <a key={index}\n                         onClick={() => {\n                           setPageInfo({...pageInfo, itemsCountPerPage: value});\n                           $('#select-indicator06').prop('checked', false);\n                         }}\n                      >{value}</a>\n                    )\n                  }\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n        <table className=\"table-db fold-db\">\n          <thead>\n          <tr>\n            <th>&nbsp;</th>\n            <th>설비명</th>\n            <th>센서명</th>\n            <th>발생일시</th>\n            <th>진단결과</th>\n            <th>기준 누설전류(mA)</th>\n            <th>측정 누설전류(mA)</th>\n            <th>누설전류 증감율(%)</th>\n            <th>기준 W/Loss(W)</th>\n            <th>측정 W/Loss(W)</th>\n            <th>W/Loss 증감율(%)</th>\n            <th>&nbsp;</th>\n          </tr>\n          </thead>\n          <tbody>\n\t\t\t\t\t\t{tableLines()}\n          </tbody>\n        </table>\n        <Pager\n          handlePageChange={(newPage) => setPageInfo({...pageInfo, activePageEvent:newPage})}\n          activePage={pageInfo.activePageEvent}\n          totalItemsCount={props.bushingEventListTotalCount}\n          itemsCountPerPage={pageInfo.itemsCountPerPage}\n        />\n      </div>\n    </>\n  );\n});\n\n// 리덕스 스토어를 가지는 객체\nconst mapStateToProps = ({ mtrBushingEvent }: IRootState) => ({\n  bushingEventList: mtrBushingEvent.bushingEventList,\n  bushingEventListTotalCount: mtrBushingEvent.bushingEventListTotalCount,\n\tbushingSelectRow: mtrBushingEvent.bushingSelectRow,\n});\n\n// 리듀스 액션 함수를 가지는 객체\nconst mapDispatchToProps = {\n  getStatusMtrBushingEvent,\n\tgetStatusMtrBushingSelectRow,\n};\n\n// 스토어/액션함수 객체의 타입을 정의\n// (상단 컴포넌트의 파라미터에서 받을 인터페이스에서 사용)\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\n// 스토어, 액션함수를 컴포넌트에 연결\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  null,\n  {\n    getDisplayName: () => 'StatusBushingList',\n    forwardRef: true\n  })(StatusBushingList);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\popup\\cbevent\\modal-cbdetail.tsx",["1243","1244","1245","1246","1247","1248","1249","1250","1251","1252"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { emptyOptions, HighchartLineDefault } from 'shared/component/chart/highcharts/hightchart-line-default1';\nimport { IRootState } from 'shared/reducers';\nimport { setStatusGisScbrCompare, getStatusGisScbrGraph, setStatusGisScbrSelect } from '../../../../views/status/gis/scbr/scbr.reducer';\n\nexport interface IModalCbDetailProps extends StateProps, DispatchProps, IModalCbProps {}\n\nexport interface IModalCbProps {\n  close: Function,\n\teventId: number,\n\teventType: string, // Trip, Close\n}\n\nexport const ModalCbDetail = (props: IModalCbDetailProps) => {\n\n\tconst [selectedPoints] = useState([]);\n\tconst [refresh, setRefresh] = useState(0);\n\tconst refreshPage = () => { setRefresh(Math.random())};\n\n\tconst selectPoint = (e) => {\n\t\t// console.log('점을 선택');\n\t\t// console.log(e);\n\t\t// console.log(e.target.index);\n\t\t// selectPoint( e.target.x, e.target.y );\n\t\tif( selectedPoints.length >= 2 ) {\n\t\t\tselectedPoints.length = 0;\n\t\t}\n\n\t\tselectedPoints.push(e.target);\n\t\t// console.log(selectedPoints);\n\t\trefreshPage();\n\t}\n\tconst [chartOptions, setChartOptions] = useState({\n\t\toption1: emptyOptions,\n\t});\n\n\tuseEffect(() => {\n\t\tprops.setStatusGisScbrSelect(props.eventId);\n\t\tprops.getStatusGisScbrGraph(props.eventId, props.eventType.toLowerCase());\n\t\t// 데이터 로드\n\t}, [])\n\n\tuseEffect(() => {\n\t\tif( !props.scbrGraphData )\n\t\t\treturn;\n\n\t\t// 그래프는 type에 따라 형태가 다르지 않음\n\t\tlet series = [];\n\t\tfor( let i = 0; i < props.scbrGraphData.aData.datasets.length; i++){\n\t\t\tseries.push({\n\t\t\t\tdata: props.scbrGraphData.aData.datasets[i].data,\n\t\t\t\tname: props.scbrGraphData.aData.datasets[i].name,\n\t\t\t\tallowPointSelect: (props.scbrGraphData.aData.datasets[i].name == 'Trip1' || props.scbrGraphData.aData.datasets[i].name == 'Close') ? true : false,\n\t\t\t});\n\t\t}\n\t\tlet option = {\n\t\t\t\tchart: {\n\t\t\t\t\t\tzoomType: 'x',\n\t\t\t\t},\n\t\t\t\ttitle: {\n\t\t\t\t\t\ttext: ''\n\t\t\t\t},\n\t\t\t\ttooltip: {\n\t\t\t\t\tshared: true,\n\t\t\t\t\tcrosshairs: true,\n\t\t\t\t\tpointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.1f}</b><br/>'\n\t\t\t\t},\n\t\t\t\tyAxis: {\n\t\t\t\t\ttitle: {\n\t\t\t\t\t\t\ttext: '전류(A)'\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tplotOptions: {\n\t\t\t\t\tseries: {\n\t\t\t\t\t\tpoint: {\n\t\t\t\t\t\t\tevents:{\n\t\t\t\t\t\t\t\tselect: selectPoint,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tseries: series,\n\t\t\t};\n\n\t\tsetChartOptions(\n\t\t\t{\n\t\t\t\t...chartOptions,\n\t\t\t\toption1: option,\n\t\t\t}\n\t\t);\n\t}, [props.scbrGraphData])\n\t\n\tuseEffect(() => {\n\t}, [props.scbrSelectedData])\n\n\tconst clickCompare = () => {\n\t\tprops.setStatusGisScbrCompare(props.eventId);\n\t}\n\n\tconst clickToggle = () => {\n\t\t// highchart 시리즈 visible 수정\n\t}\n\n\tconst tableTripEvent = () => {\n\n\t\tif( !props.scbrSelectedData )\n\t\t\treturn;\n\n\t\tconst event = props.scbrSelectedData[0];\n\t\tif ( !event )\n\t\t\treturn;\n\n\t\treturn (\n\t\t\t<>\n\t\t\t  <table className='data-grid'>\n\t\t\t\t\t<colgroup>\n\t\t\t\t\t\t<col style={{width:'7.14%'}} />\n\t\t\t\t\t\t<col style={{width:'7.14%'}} />\n\t\t\t\t\t\t<col style={{width:'7.14%'}} />\n\t\t\t\t\t\t<col style={{width:'7.14%'}} />\n\t\t\t\t\t\t<col style={{width:'7.14%'}} />\n\t\t\t\t\t\t<col style={{width:'7.14%'}} />\n\t\t\t\t\t\t<col style={{width:'7.14%'}} />\n\t\t\t\t\t\t<col style={{width:'7.14%'}} />\n\t\t\t\t\t\t<col style={{width:'7.14%'}} />\n\t\t\t\t\t\t<col style={{width:'7.14%'}} />\n\t\t\t\t\t\t<col style={{width:'7.14%'}} />\n\t\t\t\t\t\t<col style={{width:'7.14%'}} />\n\t\t\t\t\t\t<col style={{width:'7.14%'}} />\n\t\t\t\t\t\t<col style={{width:'7.14%'}} />\n\t\t\t\t\t</colgroup>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>TRIP COIL1<br/>적분값</th>\n\t\t\t\t\t\t\t<th>TRIP COIL1<br/>최대전류</th>\n\t\t\t\t\t\t\t<th>TRIP COIL1<br/>여자시간 </th>\n\t\t\t\t\t\t\t<th>TRIP COIL2<br/>적분값</th>\n\t\t\t\t\t\t\t<th>TRIP COIL2<br/>최대전류</th>\n\t\t\t\t\t\t\t<th>TRIP COIL2<br/>여자시간 </th>\n\t\t\t\t\t\t\t<th>차단전류<br/>A상</th>\n\t\t\t\t\t\t\t<th>차단전류<br/>B상</th>\n\t\t\t\t\t\t\t<th>차단전류<br/>C상</th>\n\t\t\t\t\t\t\t<th>차단시간(부하)<br/>A상</th>\n\t\t\t\t\t\t\t<th>차단시간(부하)<br/>B상</th>\n\t\t\t\t\t\t\t<th>차단시간(부하)<br/>C상</th>\n\t\t\t\t\t\t\t<th>접점 동작시간<br/>(무부하)(개극시간)</th>\n\t\t\t\t\t\t\t<th>개리차</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>{event.TRIP1_INTEG} A·ms</td>\n\t\t\t\t\t\t<td>{event.TRIP1_PEAK} A</td>\n\t\t\t\t\t\t<td>{event.TRIP1_FLOW} ms</td>\n\t\t\t\t\t\t<td>{event.TRIP2_INTEG} A·ms</td>\n\t\t\t\t\t\t<td>{event.TRIP2_PEAK} A</td>\n\t\t\t\t\t\t<td>{event.TRIP2_FLOW} ms</td>\n\t\t\t\t\t\t<td>{event.CONT_DUTY_A} A</td>\n\t\t\t\t\t\t<td>{event.CONT_DUTY_B} A</td>\n\t\t\t\t\t\t<td>{event.CONT_DUTY_C} A</td>\n\t\t\t\t\t\t<td>{event.OPN_CLS_TIME_A} ms</td>\n\t\t\t\t\t\t<td>{event.OPN_CLS_TIME_B} ms</td>\n\t\t\t\t\t\t<td>{event.OPN_CLS_TIME_C} ms</td>\n\t\t\t\t\t\t<td>{event.CONTACT_OPER} ms</td>\n\t\t\t\t\t\t<td>{event.CONTACT_TIME} ms</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</>\n\t\t)\n\t}\n\n\tconst tableCloseEvent = () => {\n\n\t\tif( !props.scbrSelectedData )\n\t\t\treturn;\n\n\t\tconst event = props.scbrSelectedData[0];\n\t\tif ( !event )\n\t\t\treturn;\n\n\t\treturn (\n\t\t\t<>\n\t\t\t  <table className='data-grid'>\n\t\t\t\t\t<colgroup>\n\t\t\t\t\t\t<col style={{width:'12.5%'}} />\n\t\t\t\t\t\t<col style={{width:'12.5%'}} />\n\t\t\t\t\t\t<col style={{width:'12.5%'}} />\n\t\t\t\t\t\t<col style={{width:'12.5%'}} />\n\t\t\t\t\t\t<col style={{width:'12.5%'}} />\n\t\t\t\t\t\t<col style={{width:'12.5%'}} />\n\t\t\t\t\t\t<col style={{width:'12.5%'}} />\n\t\t\t\t\t\t<col style={{width:'12.5%'}} />\n\t\t\t\t\t</colgroup>\n\t\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>CLOSE COIL<br/>적분값</th>\n\t\t\t\t\t\t<th>CLOSE COIL<br/>최대전류</th>\n\t\t\t\t\t\t<th>CLOSE COIL<br/>여자시간</th>\n\t\t\t\t\t\t<th>A상<br/>투입 시간(부하)</th>\n\t\t\t\t\t\t<th>B상<br/>투입 시간(부하)</th>\n\t\t\t\t\t\t<th>C상<br/>투입 시간(부하)</th>\n\t\t\t\t\t\t<th>접점 동작시간<br/>(무부하)</th>\n\t\t\t\t\t\t<th>개리차</th>\n\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>{event.CLS_INTEG} A·ms</td>\n\t\t\t\t\t\t<td>{event.CLS_PEAK} A</td>\n\t\t\t\t\t\t<td>{event.CLS_FLOW} ms</td>\n\t\t\t\t\t\t<td>{event.OPN_CLS_TIME_A} ms</td>\n\t\t\t\t\t\t<td>{event.OPN_CLS_TIME_B} ms</td>\n\t\t\t\t\t\t<td>{event.OPN_CLS_TIME_C} ms</td>\n\t\t\t\t\t\t<td>{event.CONTACT_OPER} ms</td>\n\t\t\t\t\t\t<td>{event.CONTACT_TIME} ms</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</>\n\t\t)\n\t}\n\n  return (\n    <>\n      <div className=\"layer-wrap notice-info wide round\" data-layer='notice-info'>\n        <div className='popup-wrapper'>\n          <div className='popup-container'>\n            <div className='title-area mint'>\n              <h2>GIS 차단기 동작 특성 현황 (타입: {props.eventType})</h2>\n              <div className='side-btn'>\n                <a href='#' className='btn-close' onClick={() => props.close()}><i className='icon-close'></i></a>\n              </div>\n            </div>\n            <div className='popup-contents'>\n              <h2 className='gap-down-20'>진단 내용 : </h2>\n              <div className='data-popup'>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tprops.eventType == 'Close' ? tableCloseEvent() : tableTripEvent()\n\t\t\t\t\t\t\t\t}\n              </div>\n              <div className='graph-container gap-up-10'>\n                <div className='input-legend graph-wrap block'>\n                  <div className='compare-wrapper gap-up-10'>\n                    <div className='width-2 dis-block '>\n                      <a className='btn black' onClick={clickToggle}>비교값 보기</a>\n                      <a className='btn white' onClick={clickCompare}>비교값 설정</a>\n                    </div>\n                    <div className='width-1 dis-block' style={{ textAlign: 'left' }}>\n                      <p className='gap-down-10'>기울기</p>\n                      <h1 className='text-bold text-mint'>000</h1>\n                    </div>\n                    {\n                      /*\n                    <!-- // span의 ID 속성은 그래프 값 적용할 때 쓰시라고 넣어둔 항목입니다.\n                         // 필요 없으면 삭제해주세요. -->\n                       */\n                    }\n                    <div className='box-graph min gap-right-20'>\n                      <table>\n                        <tbody>\n                        <tr>\n                          <th>선택 1</th>\n                          <td><span id=''>{selectedPoints.length >= 1 ? selectedPoints[0].y.toFixed(3) : null }</span></td>\n                        </tr>\n                        <tr>\n                          <th>선택 2</th>\n                          <td><span id=''>{selectedPoints.length === 2 ? selectedPoints[1].y.toFixed(3) : null }</span></td>\n                        </tr>\n                        <tr>\n                          <th>차이</th>\n                          <td><span id=''>{selectedPoints.length == 2 ? Math.abs(selectedPoints[1].x - selectedPoints[0].x) : null }</span></td>\n                        </tr>\n                        </tbody>\n                      </table>\n                    </div>\n                    <div className='box-graph'>\n                      <table>\n                        <thead>\n                        <tr>\n                          <th>&nbsp;</th>\n                          <th>A</th>\n                          <th>B</th>\n                          <th>C</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                          <th>Min</th>\n                          <td><span id=''>0.000</span></td>\n                          <td><span id=''>0.000</span></td>\n                          <td><span id=''>0.000</span></td>\n                        </tr>\n                        <tr>\n                          <th>Max</th>\n                          <td><span id=''>0.000</span></td>\n                          <td><span id=''>0.000</span></td>\n                          <td><span id=''>0.000</span></td>\n                        </tr>\n                        <tr>\n                          <th>Avg</th>\n                          <td><span id=''>0.000</span></td>\n                          <td><span id=''>0.000</span></td>\n                          <td><span id=''>0.000</span></td>\n                        </tr>\n                        </tbody>\n                      </table>\n                    </div>\n                  </div>\n\t\t\t\t\t\t\t\t\t<HighchartLineDefault options={chartOptions.option1} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({gisCbEvent}: IRootState) => ({\n  scbrGraphData: gisCbEvent.scbrGraphData,\n\tscbrSetStandard: gisCbEvent.scbrSetStandard,\n\tscbrSelectedData: gisCbEvent.scbrSelectedData,\n});\n\nconst mapDispatchToProps = {\n\tgetStatusGisScbrGraph,\n\tsetStatusGisScbrSelect,\n\tsetStatusGisScbrCompare,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalCbDetail);","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\status\\cdlist\\satus-cb-list.tsx",["1253","1254","1255"],"import React, { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport moment from 'moment';\nimport Pager from '../../pager/Pager';\nimport { getStatusGisScbrEvent } from '../../../../views/status/gis/scbr/scbr.reducer';\n\nexport interface IStatusCbList {\n  fromDate: Date;         // 시작일시\n  toDate: Date;           // 종료일시\n  eqipId: string;         // 설비ID\n  snsrId: string;         // 센서ID\n  diagCont: string;       // 진단선택명\n\n  onClickDetail?: Function //리스트의 상세보기 버튼을 선택 시 수행할 함수\n\n}\nexport interface IStatusCbListProps extends StateProps, DispatchProps, IStatusCbList {}\n\n\nexport const StatusCbList = forwardRef((props: IStatusCbListProps, ref) => {\n\n  // 페이징 관련 state\n  const [isPageInfoUpdate, setIsPageInfoUpdate] = useState(false);\n  const [pageInfo, setPageInfo] = useState({\n    activePageEvent: 1,\n    itemsCountPerPage: 10,\n  });\n\n\n  // 차단기 동작특성 현황 이벤트 리스트 호출\n  const searchCbEvent = () => {\n    props.getStatusGisScbrEvent(\n      props.fromDate,\n      props.toDate,\n      props.eqipId,\n      props.snsrId,\n      props.diagCont,\n      pageInfo.activePageEvent,\n      pageInfo.itemsCountPerPage);\n  }\n\n  // 부모 컴포넌트에서 리스트 조회 기능 이용시 사용\n  useImperativeHandle(ref, () => ({\n    search: () => setPageInfo({\n      ...pageInfo,\n      activePageEvent: 1\n    })\n  }));\n\n  // 페이지 노출개수 변경 시 리스트 재조회\n  useEffect(() => {\n    if (isPageInfoUpdate) {\n      searchCbEvent();\n    } else {\n      setIsPageInfoUpdate(true);\n    }\n  }, [pageInfo]);\n\n  return (\n    <>\n      <div className=\"contents-table\">\n        <div className=\"contents-tabmenu gap-down-10\">\n          <div className=\"obj-select option\">\n            <form className=\"select-cover\">\n              <div className=\"select-box\">\n                <input type=\"checkbox\" id=\"select-indicator06\"/>\n                <label className=\"select small\" htmlFor=\"select-indicator06\">{pageInfo.itemsCountPerPage}</label>\n                <div className=\"option small\">\n                  {\n                    [10, 25, 50, 100].map((value, index) =>\n                      <a key={index}\n                         onClick={() => {\n                           setPageInfo({...pageInfo, itemsCountPerPage: value});\n                           $('#select-indicator06').prop('checked', false);\n                         }}\n                      >{value}</a>\n                    )\n                  }\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n        <table className=\"table-db fold-db\">\n          <colgroup>\n            <col style={{width:'120px'}}/>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'15%'}}/>\n          </colgroup>\n          <thead>\n          <tr>\n            <th>&nbsp;</th>\n            <th>설비명</th>\n            <th>센서명</th>\n            <th>발생일시</th>\n            <th>진단결과</th>\n            <th>이벤트 타입</th>\n            <th>차단기 동작 카운트(회)</th>\n          </tr>\n          </thead>\n          <tbody>\n          {\n            !props.scbrEventList.length ?\n              <tr>\n                <td colSpan={8}>조회된 데이터가 없습니다. (시작일시 2020.09.22 이전, 종료일시 2020.09.25 조회 시 데이터 조회 가능)</td>\n              </tr>\n              :\n              props.scbrEventList.map((event, index) => (\n                <tr key={index}>\n                  <td>\n                    <span>\n                      <a className=\"call-popup btn white narrow\"\n                         data-layer=\"notice-info\"\n                         onClick={() => {props.onClickDetail({\n\t\t\t\t\t\t\t\t\t\t\t\t\t eventId: event.EVNT_ID,\n\t\t\t\t\t\t\t\t\t\t\t\t\t eventType: event.EVNT_TYPE,\n\t\t\t\t\t\t\t\t\t\t\t\t })}}\n                      >상세\n                      </a>\n                    </span>\n                  </td>\n                  <td>\n                    <span>{event.EQIP_NM}</span>\n                  </td>\n                  <td>\n                    <span>{event.SNSR_NM}</span>\n                  </td>\n                  <td>\n                    <span>{moment(event.OCCR_TIME).format('YYYY-MM-DD HH:mm:ss')}</span>\n                  </td>\n                  <td>\n                    <span>{event.DIAG_RSLT}</span>\n                  </td>\n                  <td>\n                    <span>{event.EVNT_TYPE}</span>\n                  </td>\n                  <td>\n                    <span>{event.OP_CNT}</span>\n                  </td>\n                </tr>\n              ))\n          }\n          </tbody>\n        </table>\n        <Pager\n          handlePageChange={(newPage) => setPageInfo({...pageInfo, activePageEvent:newPage})}\n          activePage={pageInfo.activePageEvent}\n          totalItemsCount={props.scbrEventListTotalCount}\n          itemsCountPerPage={pageInfo.itemsCountPerPage}\n        />\n      </div>\n    </>\n  );\n});\n\n// 리덕스 스토어를 가지는 객체\nconst mapStateToProps = ({ gisCbEvent }: IRootState) => ({\n  scbrEventList: gisCbEvent.scbrEventList,\n  scbrEventListTotalCount: gisCbEvent.scbrEventListTotalCount\n});\n\n// 리듀스 액션 함수를 가지는 객체\nconst mapDispatchToProps = {\n  getStatusGisScbrEvent,\n};\n\n// 스토어/액션함수 객체의 타입을 정의\n// (상단 컴포넌트의 파라미터에서 받을 인터페이스에서 사용)\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\n// 스토어, 액션함수를 컴포넌트에 연결\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  null,\n  {\n    getDisplayName: () => 'StatusCbList',\n    forwardRef: true\n  })(StatusCbList);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\popup\\ofudetail\\modal-ofudetail.tsx",["1256","1257","1258","1259","1260","1261","1262","1263","1264"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { emptyOptions, HighchartLineDefault } from 'shared/component/chart/highcharts/hightchart-line-default1';\nimport { IOfuEvent } from 'shared/model/ofu-event.model';\nimport { IRootState } from 'shared/reducers';\nimport { getStatusEventRow, getStatusEventGraph } from '../../../../views/trend/mtr/oltc-ofu/oltc-ofu.reducer';\n\nexport interface IModalOfuArgs {\n  close: Function,\n\tevent: IOfuEvent,\n}\n\nexport interface IModalOfuProps extends StateProps, DispatchProps, IModalOfuArgs {}\n\nexport const ModalOfuDetail = (props: IModalOfuProps) => {\n\n\tconst [ chartOption, setChartOption ] = useState({\n\t\toption1: emptyOptions,\n\t});\n\n\tuseEffect(() => {\n\n\t\t// console.log('load data 3');\n\t\t// props.getStatusEventRow( '3' );\n\t\t// props.getStatusEventGraph( '3' );\n\n\t\tprops.getStatusEventRow( props.event.EVNT_ID );\n\t\tprops.getStatusEventGraph( props.event.EVNT_ID );\n\n\t}, [])\n\n\tuseEffect(() => {\n\t\tif( !props.eventDetail )\n\t\t\treturn;\n\n\t}, [props.eventDetail])\n\n\tuseEffect(() => {\n\t\t// console.log('graph data loaded???');\n\t\tconsole.log(props.eventGraph);\n\t\tif( !props.eventGraph )\n\t\t\treturn;\n\n\t\tconst series1 = [];\n\t\tfor( let i = 0; i < 3; i++ ) {\n\t\t\tseries1.push({\n\t\t\t\tname: props.eventGraph.aData.datasets[i].name,\n\t\t\t\tdata: props.eventGraph.aData.datasets[i].data,\n\t\t\t});\n\t\t}\n\n\t\t// console.log(series1);\n\n\t\tconst option1 = {\n\t\t\ttitle: {\n\t\t\t\ttext: '',\n\t\t\t}, \n\t\t\tchart: {\n\t\t\t\tzoomType: 'x',\n\t\t\t},\n\t\t\tyAxis: {\n\t\t\t\ttitle: {\n\t\t\t\t\t\ttext: '전류(A)'\n\t\t\t\t},\n\t\t\t},\n\t\t\ttooltip: {\n\t\t\t\tshared: true,\n\t\t\t\tcrosshairs: true,\n\t\t\t\tpointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.series.name}: <b>{point.y:.1f}</b><br/>'\n\t\t\t},\n\t\t\tseries: series1,\n\t\t};\n\n\t\tsetChartOption({\n\t\t\toption1: option1\n\t\t});\n\n\t\tconsole.log('graph data loaded');\n\t\t\t\n\t}, [props.eventGraph])\n\n  return (\n    <>\n\t\t\t<div className=\"layer-wrap notice-info wide round\" data-layer=\"notice-info\" id=\"oltc-ofu-popup\">\n      {/* <div className=\"layer-wrap notice-info wide round\" data-layer='notice-info'> */}\n        <div className='popup-wrapper'>\n          <div className='popup-container'>\n            <div className='title-area mint'>\n              <h2>OTLC 모터 동작 현황</h2>\n              <div className='side-btn'>\n                <a href='#' className='btn-close' onClick={() => props.close()}><i className='icon-close'></i></a>\n              </div>\n            </div>\n            <div className='popup-contents'>\n\t\t\t\t\t\t\t<div className=\"data-popup\">\n\t\t\t\t\t\t\t\t<table className=\"data-grid\">\n\t\t\t\t\t\t\t\t\t<colgroup>\n\t\t\t\t\t\t\t\t\t\t\t<col style={{width: '8%'}} />\n\t\t\t\t\t\t\t\t\t\t\t<col style={{width: '12%'}}/>\n\t\t\t\t\t\t\t\t\t\t\t<col style={{width: '13%'}}/>\n\t\t\t\t\t\t\t\t\t\t\t<col style={{width: '13%'}}/>\n\t\t\t\t\t\t\t\t\t\t\t<col style={{width: '13%'}}/>\n\t\t\t\t\t\t\t\t\t\t\t<col style={{width: '13%'}}/>\n\t\t\t\t\t\t\t\t\t\t\t<col style={{width: '28%'}}/>\n\t\t\t\t\t\t\t\t\t</colgroup>\n\t\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<th colSpan={2}>&nbsp;</th>\n\t\t\t\t\t\t\t\t\t\t\t<th>기준값({props.eventGraph?.bData.OpMidTap == 2 ? '중간탭' : '일반탭'})</th>\n\t\t\t\t\t\t\t\t\t\t\t<th>A상</th>\n\t\t\t\t\t\t\t\t\t\t\t<th>B상</th>\n\t\t\t\t\t\t\t\t\t\t\t<th>C상</th>\n\t\t\t\t\t\t\t\t\t\t\t<th>진단 결과</th>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<td colSpan={2}>총 동작시간(ms)</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{props.eventGraph?.bData.OpMidTap == 2 ? props.eventGraph?.bData.TotDur_Time_Mid_Below_NoticeTHval.toFixed(3) ?? 0 : props.eventGraph?.bData.TotDur_Time_Gen_Below_NoticeTHval.toFixed(3) ?? 0}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t~ {props.eventGraph?.bData.OpMidTap == 2 ? props.eventGraph?.bData.TotDur_Time_Mid_Excess_NoticeTHval.toFixed(3) ?? 0 : props.eventGraph?.bData.TotDur_Time_Gen_Excess_NoticeTHval.toFixed(3) ?? 0}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{props.eventGraph?.bData.OpDurCurrA.toFixed(3) ?? 0}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{props.eventGraph?.bData.OpDurCurrB.toFixed(3) ?? 0}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{props.eventGraph?.bData.OpDurCurrC.toFixed(3) ?? 0}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<td rowSpan={2}>돌입구간</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>최대전류(A)(RMS)</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{props.eventGraph?.bData.TsntPeak_Curr_Below_NoticeTHval.toFixed(3) ?? 0} ~ {props.eventGraph?.bData.TsntPeak_Curr_Excess_NoticeTHval.toFixed(3) ?? 0}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{props.eventGraph?.bData.MaxTsntCurrA.toFixed(3) ?? 0}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{props.eventGraph?.bData.MaxTsntCurrB.toFixed(3) ?? 0}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{props.eventGraph?.bData.MaxTsntCurrC.toFixed(3) ?? 0}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>동작시간(ms)</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{props.eventGraph?.bData.OpMidTap == 2 ? props.eventGraph?.bData.TsntPeak_Time_Mid_Below_NoticeTHval.toFixed(3) ?? 0 : props.eventGraph?.bData.TsntPeak_Time_Gen_Below_NoticeTHval.toFixed(3) ?? 0} \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t~ {props.eventGraph?.bData.OpMidTap == 2 ? props.eventGraph?.bData.TsntPeak_Time_Mid_Excess_NoticeTHval.toFixed(3) ?? 0 : props.eventGraph?.bData.TsntPeak_Time_Gen_Excess_NoticeTHval.toFixed(3) ?? 0}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{props.eventGraph?.bData.TsntOpDurA.toFixed(3) ?? 0}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{props.eventGraph?.bData.TsntOpDurB.toFixed(3) ?? 0}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{props.eventGraph?.bData.TsntOpDurC.toFixed(3) ?? 0}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t<tr> \n\t\t\t\t\t\t\t\t\t\t\t\t<td rowSpan={2}>정상구간</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>최대전류(A)(RMS)</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{props.eventGraph?.bData.OperPeak_Curr_Below_NoticeTHval.toFixed(3) ?? 0} ~ {props.eventGraph?.bData.OperPeak_Curr_Excess_NoticeTHval.toFixed(3) ?? 0}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{props.eventGraph?.bData.MaxNormCurrA.toFixed(3) ?? 0}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{props.eventGraph?.bData.MaxNormCurrB.toFixed(3) ?? 0}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{props.eventGraph?.bData.MaxNormCurrC.toFixed(3) ?? 0}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>동작시간(ms)</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{props.eventGraph?.bData.OpMidTap == 2 ? props.eventGraph?.bData.OperDur_Time_Mid_Below_NoticeTHval.toFixed(3) ?? 0 : props.eventGraph?.bData.OperDur_Time_Gen_Below_NoticeTHval.toFixed(3) ?? 0}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t ~ {props.eventGraph?.bData.OpMidTap == 2 ? props.eventGraph?.bData.OperDur_Time_Mid_Excess_NoticeTHval.toFixed(3) ?? 0 : props.eventGraph?.bData.OperDur_Time_Gen_Excess_NoticeTHval.toFixed(3) ?? 0}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{props.eventGraph?.bData.NormOpDurA.toFixed(3) ?? 0}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{props.eventGraph?.bData.NormOpDurB.toFixed(3) ?? 0}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{props.eventGraph?.bData.NormOpDurC.toFixed(3) ?? 0}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t\t<table className=\"data-grid gap-up-20\">\n\t\t\t\t\t\t\t\t\t<colgroup>\n\t\t\t\t\t\t\t\t\t\t\t<col style={{width: '20%'}}/>\n\t\t\t\t\t\t\t\t\t\t\t<col style={{width: '10%'}}/>\n\t\t\t\t\t\t\t\t\t\t\t<col style={{width: '20%'}}/>\n\t\t\t\t\t\t\t\t\t\t\t<col style={{width: '10%'}}/>\n\t\t\t\t\t\t\t\t\t\t\t<col style={{width: '20%'}}/>\n\t\t\t\t\t\t\t\t\t\t\t<col style={{width: '10%'}}/>\n\t\t\t\t\t\t\t\t\t</colgroup>\n\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>TAP 위치</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{props.eventGraph?.bData.CurTapPos ?? 0}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>동작횟수(회)</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{props.eventGraph?.bData.RsOpCnt ?? 0}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>접점 동작시간(ms)</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{props.eventGraph?.bData.OpDur ?? 0}</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>돌입구간 시작시간</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{props.eventGraph?.bData.TsntOpTmStrtA.toFixed(3) ?? 0}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>정상구간 시작시간</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{props.eventGraph?.bData.NormOpTmStrtA.toFixed(3) ?? 0}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t</div>\n              \n\t\t\t\t\t\t\t<div className=\"graph-container gap-up-40\">\n                    <div className=\"input-legend graph-wrap block\">\n\t\t\t\t\t\t\t\t\t\t\t<HighchartLineDefault options={chartOption.option1} />\n                    </div>\n                </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({trendMtrOltcData }: IRootState) => ({\n\teventDetail: trendMtrOltcData.eventDetail,\n\teventGraph: trendMtrOltcData.eventGraph,\n});\n\nconst mapDispatchToProps = {\n\tgetStatusEventRow,\n\tgetStatusEventGraph,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalOfuDetail);","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\status\\pdlist\\status-mtr-pd-list.tsx",["1265","1266","1267","1268","1269","1270","1271","1272","1273"],"import React, { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { getStatusMtrSpdcEvent, getStatusMtrSpdcCumulate } from '../../../../views/status/mtr/spdc/spdc.reducer';\nimport moment from 'moment';\nimport Pager from '../../pager/Pager';\n\nexport interface IStatusPdList {\n  fromDate: Date;         // 시작일시\n  toDate: Date;           // 종료일시\n  eqipId: string;         // 설비ID\n  snsrId: string;         // 센서ID\n  diagCont: string;       // 진단선택명\n  onClickRow?: Function   // 리스트의 row를 클릭 시 수행할 함수\n  onClick3D?: Function    // 리스트의 3D 버튼을 선택 시 수행할 함수\n  onClickL?: Function    // 리스트의 L 버튼을 선택 시 수행할 함수\n  onClickRT?: Function    // 리스트의 RT 버튼을 선택 시 수행할 함수\n}\nexport interface IStatusPdListProps extends StateProps, DispatchProps, IStatusPdList {}\n\nexport const StatusPdList = forwardRef((props: IStatusPdListProps, ref) => {\n\n  // 부분방전 현황 노출종류(탭)\n  enum ESpdcType { EVENT = 'EVENT', CUMULATE = 'CUMULATE'}\n  const [spdcType, setSpdcType] = useState(ESpdcType.EVENT);\n\n  // 페이징 관련 state\n  const [isPageInfoUpdate, setIsPageInfoUpdate] = useState(false);\n  const [pageInfo, setPageInfo] = useState({\n    activePageEvent: 1,\n    activePageCumulate: 1,\n    itemsCountPerPage: 10,\n  });\n\n  // GIS 부분방전 이벤트 리스트 호출\n  const searchPdEvent = () => {\n    props.getStatusMtrSpdcEvent(\n      props.fromDate,\n      props.toDate,\n      props.eqipId,\n      props.snsrId,\n      props.diagCont,\n      pageInfo.activePageEvent,\n      pageInfo.itemsCountPerPage);\n  }\n\n  // 누적데이터 리스트 호출\n  const searchPdCumulate = () => {\n    props.getStatusMtrSpdcCumulate(\n      props.fromDate,\n      props.toDate,\n      props.eqipId,\n      props.snsrId,\n      props.diagCont,\n      pageInfo.activePageCumulate,\n      pageInfo.itemsCountPerPage);\n  }\n\n  // 부모 컴포넌트에서 리스트 조회 기능 이용시 사용\n  useImperativeHandle(ref, () => ({\n    search: () => {\n      if (spdcType === ESpdcType.EVENT) {\n        setPageInfo({\n          ...pageInfo,\n          activePageEvent: 1\n        });\n      } else {\n        setPageInfo({\n          ...pageInfo,\n          activePageCumulate: 1\n        });\n      }\n    }\n  }));\n\n  useEffect(() => {\n  }, []);\n\n  // 페이지 노출개수 변경 시 리스트 재조회\n  useEffect(() => {\n    if (isPageInfoUpdate) {\n      if (spdcType === ESpdcType.EVENT) {\n        searchPdEvent();\n      } else {\n        searchPdCumulate();\n      }\n    } else {\n      setIsPageInfoUpdate(true);\n    }\n  }, [pageInfo]);\n\n  return (\n    <>\n      <div className=\"contents-table\">\n        <div className=\"contents-tabmenu gap-down-10\">\n          <a className={'btn_tab left' + (spdcType === ESpdcType.EVENT ? ' on' : '')}\n             onClick={() => setSpdcType(ESpdcType.EVENT)}>이벤트</a>\n          <a className={'btn_tab right' + (spdcType === ESpdcType.CUMULATE ? ' on' : '')}\n             onClick={() => setSpdcType(ESpdcType.CUMULATE)}>누적 데이터</a>\n          <div className=\"obj-select option\">\n            <form className=\"select-cover\">\n              <div className=\"select-box\">\n                <input type=\"checkbox\" id=\"select-indicator06\" />\n                <label className=\"select small\" htmlFor=\"select-indicator06\">{pageInfo.itemsCountPerPage}</label>\n                <div className=\"option small\">\n                  {\n                    [10, 25, 50, 100].map((value, index) =>\n                      <a key={index}\n                         onClick={() => {\n                           setPageInfo({...pageInfo, itemsCountPerPage: value});\n                           $('#select-indicator06').prop('checked', false);\n                         }}\n                      >{value}</a>\n                    )\n                  }\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n        {\n          spdcType === ESpdcType.EVENT ?\n            <>\n              <table className=\"table-db\">\n                <colgroup>\n                  <col style={{width: '70px'}}/>\n                  <col style={{width: '130px'}}/>\n                  <col style={{width: '100px'}}/>\n                  <col style={{width: '100px'}}/>\n                  <col/>\n                  <col/>\n                  <col/>\n                  <col/>\n                </colgroup>\n                <thead>\n                <tr>\n                  <th>&nbsp;</th>\n                  <th>설비명</th>\n                  <th colSpan={2}>센서명</th>\n                  <th>발생일시</th>\n                  <th>진단내용</th>\n                  <th>최대방전(DBM)</th>\n                  <th>평균방전(DBM)</th>\n                </tr>\n                </thead>\n                <tbody>\n                {\n                  !props.spdcEventList.length ?\n                    <tr><td colSpan={8}>조회된 데이터가 없습니다. (시작일시 2020.09 이전 조회 시 데이터 조회 가능)</td></tr>\n                    :\n                    props.spdcEventList.map((event, index) => (\n                      <tr key={index} onClick={() => props.onClickRow && props.onClickRow(event)}>\n                        <td>\n                          <input type=\"checkbox\" className=\"obj-check\" id={`list_${index}`}/>\n                          <label className=\"obj-check-box\" htmlFor={`list_${index}`}></label>\n                        </td>\n                        <td>{event.SNSR_LOC_NM}</td>\n                        <td>{event.SNSR_NM}</td>\n                        <td>\n                          <a className=\"btn grid small tooltip\" onClick={() => {\n                            props.onClick3D && props.onClick3D(event);\n                          }}>3D<span className=\"tooltip-text\">3D PRPD보기</span>\n                          </a>&nbsp;\n                          <a className=\"btn grid small tooltip\" onClick={() => {\n                            props.onClickL && props.onClickL(event);\n                          }}>L<span className=\"tooltip-text\">라이브러리</span>\n                          </a>&nbsp;\n                          <a className=\"btn grid small tooltip\" onClick={() => {\n                            props.onClickRT && props.onClickRT(event);\n                          }}>\n                            RT<span className=\"tooltip-text\">실시간</span>\n                          </a>\n                        </td>\n                        <td>\n                          <span>{moment(event.OCCR_TIME).format('YYYY-MM-DD HH:mm:ss')}</span>\n                        </td>\n                        <td>\n                          <span>{event.DIAG_CONT}</span>\n                        </td>\n                        <td>\n                          <span>{event.MAX_DBM}</span>\n                        </td>\n                        <td>\n                          <span>{event.AVG_DBM}</span>\n                        </td>\n                      </tr>\n                    ))\n                }\n                </tbody>\n              </table>\n              <Pager\n                handlePageChange={(newPage) => setPageInfo({...pageInfo, activePageEvent:newPage})}\n                activePage={pageInfo.activePageEvent}\n                totalItemsCount={props.spdcEventListTotalCount}\n                itemsCountPerPage={pageInfo.itemsCountPerPage}\n              />\n            </>\n            :\n            <>\n              <table className=\"table-db\">\n                <thead>\n                <tr>\n                  <th>설비명</th>\n                  <th>센서명</th>\n                  <th>발생일시</th>\n                  <th>최대방전(DBM)</th>\n                  <th>평균방전(DBM)</th>\n                </tr>\n                </thead>\n                <tbody>\n                {\n                  !props.spdcComulateList.length ?\n                    <tr><td colSpan={8}>조회된 데이터가 없습니다. (시작일시 2020.09 이전 조회 시 데이터 조회 가능)</td></tr>\n                    :\n                    props.spdcComulateList.map((cumulate, index) => (\n                      <tr key={index}>\n                        <td>\n                          <a>{cumulate.SNSR_LOC_NM}</a>\n                        </td>\n                        <td>\n                          <a>{cumulate.SNSR_NM}</a>\n                        </td>\n                        <td>\n                          <span>{cumulate.OCCR_TIME}</span>\n                        </td>\n                        <td>\n                          <span>{cumulate.MAX_DBM}</span>\n                        </td>\n                        <td>\n                          <span>{cumulate.AVG_DBM}</span>\n                        </td>\n                      </tr>\n                    ))\n                }\n                </tbody>\n              </table>\n              <Pager\n                handlePageChange={(newPage) => setPageInfo({...pageInfo, activePageCumulate:newPage})}\n                activePage={pageInfo.activePageCumulate}\n                totalItemsCount={props.spdcComulateListTotalCount}\n                itemsCountPerPage={pageInfo.itemsCountPerPage}\n              />\n            </>\n        }\n      </div>\n    </>\n  );\n});\n\nconst mapStateToProps = ({ mtrPdEvent }: IRootState) => ({\n  spdcEventList: mtrPdEvent.spdcEventList,\n  spdcEventListTotalCount: mtrPdEvent.spdcEventListTotalCount,\n  spdcComulateList: mtrPdEvent.spdcComulateList,\n  spdcComulateListTotalCount: mtrPdEvent.spdcComulateListTotalCount,\n});\n\nconst mapDispatchToProps = {\n  getStatusMtrSpdcEvent,\n  getStatusMtrSpdcCumulate,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  null,\n  {\n    getDisplayName: () => 'StatusPdList',\n    forwardRef: true\n  })(StatusPdList);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\status\\pdlist\\status-oltc-pd-list.tsx",["1274","1275","1276","1277","1278","1279","1280","1281","1282"],"import React, { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { getStatusMtrOltcPdEvent, getStatusMtrOltcPdCumulate } from '../../../../views/status/mtr/oltc-spdc/oltc-spdc.reducer';\nimport moment from 'moment';\nimport Pager from '../../pager/Pager';\n\nexport interface IStatusPdList {\n  fromDate: Date;         // 시작일시\n  toDate: Date;           // 종료일시\n  eqipId: string;         // 설비ID\n  snsrId: string;         // 센서ID\n  diagCont: string;       // 진단선택명\n  onClickRow?: Function   // 리스트의 row를 클릭 시 수행할 함수\n  onClick3D?: Function    // 리스트의 3D 버튼을 선택 시 수행할 함수\n  onClickL?: Function    // 리스트의 L 버튼을 선택 시 수행할 함수\n  onClickRT?: Function    // 리스트의 RT 버튼을 선택 시 수행할 함수\n}\nexport interface IStatusPdListProps extends StateProps, DispatchProps, IStatusPdList {}\n\nexport const StatusPdList = forwardRef((props: IStatusPdListProps, ref) => {\n\n  // 부분방전 현황 노출종류(탭)\n  enum ESpdcType { EVENT = 'EVENT', CUMULATE = 'CUMULATE'}\n  const [spdcType, setSpdcType] = useState(ESpdcType.EVENT);\n\n  // 페이징 관련 state\n  const [isPageInfoUpdate, setIsPageInfoUpdate] = useState(false);\n  const [pageInfo, setPageInfo] = useState({\n    activePageEvent: 1,\n    activePageCumulate: 1,\n    itemsCountPerPage: 10,\n  });\n\n  // GIS 부분방전 이벤트 리스트 호출\n  const searchPdEvent = () => {\n    props.getStatusMtrOltcPdEvent(\n      props.fromDate,\n      props.toDate,\n      props.eqipId,\n      props.snsrId,\n      props.diagCont,\n      pageInfo.activePageEvent,\n      pageInfo.itemsCountPerPage);\n  }\n\n  // 누적데이터 리스트 호출\n  const searchPdCumulate = () => {\n    props.getStatusMtrOltcPdCumulate(\n      props.fromDate,\n      props.toDate,\n      props.eqipId,\n      props.snsrId,\n      props.diagCont,\n      pageInfo.activePageCumulate,\n      pageInfo.itemsCountPerPage);\n  }\n\n  // 부모 컴포넌트에서 리스트 조회 기능 이용시 사용\n  useImperativeHandle(ref, () => ({\n    search: () => {\n      if (spdcType === ESpdcType.EVENT) {\n        setPageInfo({\n          ...pageInfo,\n          activePageEvent: 1\n        });\n      } else {\n        setPageInfo({\n          ...pageInfo,\n          activePageCumulate: 1\n        });\n      }\n    }\n  }));\n\n  useEffect(() => {\n  }, []);\n\n  // 페이지 노출개수 변경 시 리스트 재조회\n  useEffect(() => {\n    if (isPageInfoUpdate) {\n      if (spdcType === ESpdcType.EVENT) {\n        searchPdEvent();\n      } else {\n        searchPdCumulate();\n      }\n    } else {\n      setIsPageInfoUpdate(true);\n    }\n  }, [pageInfo]);\n\n  return (\n    <>\n      <div className=\"contents-table\">\n        <div className=\"contents-tabmenu gap-down-10\">\n          <a className={'btn_tab left' + (spdcType === ESpdcType.EVENT ? ' on' : '')}\n             onClick={() => setSpdcType(ESpdcType.EVENT)}>이벤트</a>\n          <a className={'btn_tab right' + (spdcType === ESpdcType.CUMULATE ? ' on' : '')}\n             onClick={() => setSpdcType(ESpdcType.CUMULATE)}>누적 데이터</a>\n          <div className=\"obj-select option\">\n            <form className=\"select-cover\">\n              <div className=\"select-box\">\n                <input type=\"checkbox\" id=\"select-indicator06\" />\n                <label className=\"select small\" htmlFor=\"select-indicator06\">{pageInfo.itemsCountPerPage}</label>\n                <div className=\"option small\">\n                  {\n                    [10, 25, 50, 100].map((value, index) =>\n                      <a key={index}\n                         onClick={() => {\n                           setPageInfo({...pageInfo, itemsCountPerPage: value});\n                           $('#select-indicator06').prop('checked', false);\n                         }}\n                      >{value}</a>\n                    )\n                  }\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n        {\n          spdcType === ESpdcType.EVENT ?\n            <>\n              <table className=\"table-db\">\n                <colgroup>\n                  <col style={{width: '70px'}}/>\n                  <col style={{width: '130px'}}/>\n                  <col style={{width: '100px'}}/>\n                  <col style={{width: '100px'}}/>\n                  <col/>\n                  <col/>\n                  <col/>\n                  <col/>\n                </colgroup>\n                <thead>\n                <tr>\n                  <th>&nbsp;</th>\n                  <th>설비명</th>\n                  <th colSpan={2}>센서명</th>\n                  <th>발생일시</th>\n                  <th>진단내용</th>\n                  <th>최대방전(DBM)</th>\n                  <th>평균방전(DBM)</th>\n                </tr>\n                </thead>\n                <tbody>\n                {\n                  !props.spdcEventList.length ?\n                    <tr><td colSpan={8}>조회된 데이터가 없습니다. (시작일시 2020.09 이전 조회 시 데이터 조회 가능)</td></tr>\n                    :\n                    props.spdcEventList.map((event, index) => (\n                      <tr key={index} onClick={() => props.onClickRow && props.onClickRow(event)}>\n                        <td>\n                          <input type=\"checkbox\" className=\"obj-check\" id={`list_${index}`}/>\n                          <label className=\"obj-check-box\" htmlFor={`list_${index}`}></label>\n                        </td>\n                        <td>{event.SNSR_LOC_NM}</td>\n                        <td>{event.SNSR_NM}</td>\n                        <td>\n                          <a className=\"btn grid small tooltip\" onClick={() => {\n                            props.onClick3D && props.onClick3D(event);\n                          }}>3D<span className=\"tooltip-text\">3D PRPD보기</span>\n                          </a>&nbsp;\n                          <a className=\"btn grid small tooltip\" onClick={() => {\n                            props.onClickL && props.onClickL(event);\n                          }}>L<span className=\"tooltip-text\">라이브러리</span>\n                          </a>&nbsp;\n                          <a className=\"btn grid small tooltip\" onClick={() => {\n                            props.onClickRT && props.onClickRT(event);\n                          }}>\n                            RT<span className=\"tooltip-text\">실시간</span>\n                          </a>\n                        </td>\n                        <td>\n                          <span>{moment(event.OCCR_TIME).format('YYYY-MM-DD HH:mm:ss')}</span>\n                        </td>\n                        <td>\n                          <span>{event.DIAG_CONT}</span>\n                        </td>\n                        <td>\n                          <span>{event.MAX_DBM}</span>\n                        </td>\n                        <td>\n                          <span>{event.AVG_DBM}</span>\n                        </td>\n                      </tr>\n                    ))\n                }\n                </tbody>\n              </table>\n              <Pager\n                handlePageChange={(newPage) => setPageInfo({...pageInfo, activePageEvent:newPage})}\n                activePage={pageInfo.activePageEvent}\n                totalItemsCount={props.spdcEventListTotalCount}\n                itemsCountPerPage={pageInfo.itemsCountPerPage}\n              />\n            </>\n            :\n            <>\n              <table className=\"table-db\">\n                <thead>\n                <tr>\n                  <th>설비명</th>\n                  <th>센서명</th>\n                  <th>발생일시</th>\n                  <th>최대방전(DBM)</th>\n                  <th>평균방전(DBM)</th>\n                </tr>\n                </thead>\n                <tbody>\n                {\n                  !props.spdcComulateList.length ?\n                    <tr><td colSpan={8}>조회된 데이터가 없습니다. (시작일시 2020.09 이전 조회 시 데이터 조회 가능)</td></tr>\n                    :\n                    props.spdcComulateList.map((cumulate, index) => (\n                      <tr key={index}>\n                        <td>\n                          <a>{cumulate.SNSR_LOC_NM}</a>\n                        </td>\n                        <td>\n                          <a>{cumulate.SNSR_NM}</a>\n                        </td>\n                        <td>\n                          <span>{cumulate.OCCR_TIME}</span>\n                        </td>\n                        <td>\n                          <span>{cumulate.MAX_DBM}</span>\n                        </td>\n                        <td>\n                          <span>{cumulate.AVG_DBM}</span>\n                        </td>\n                      </tr>\n                    ))\n                }\n                </tbody>\n              </table>\n              <Pager\n                handlePageChange={(newPage) => setPageInfo({...pageInfo, activePageCumulate:newPage})}\n                activePage={pageInfo.activePageCumulate}\n                totalItemsCount={props.spdcComulateListTotalCount}\n                itemsCountPerPage={pageInfo.itemsCountPerPage}\n              />\n            </>\n        }\n      </div>\n    </>\n  );\n});\n\nconst mapStateToProps = ({ mtrOltcPdEvent }: IRootState) => ({\n  spdcEventList: mtrOltcPdEvent.oltcSpdcEventList,\n  spdcEventListTotalCount: mtrOltcPdEvent.oltcSpdcEventListTotalCount,\n  spdcComulateList: mtrOltcPdEvent.oltcSpdcComulateList,\n  spdcComulateListTotalCount: mtrOltcPdEvent.oltcSpdcComulateListTotalCount,\n});\n\nconst mapDispatchToProps = {\n  getStatusMtrOltcPdEvent,\n  getStatusMtrOltcPdCumulate,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  null,\n  {\n    getDisplayName: () => 'StatusPdList',\n    forwardRef: true\n  })(StatusPdList);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\status\\ofulist\\satus-oltc-ofu-list.tsx",["1283","1284","1285"],"import React, { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport moment from 'moment';\nimport Pager from '../../pager/Pager';\nimport { getStatusMtrOltcOfuEvent } from '../../../../views/status/mtr/oltc-ofu/oltc-ofu.reducer';\n\nexport interface IStatusOfuList {\n  fromDate: Date;         // 시작일시\n  toDate: Date;           // 종료일시\n  eqipId: string;         // 설비ID\n  snsrId: string;         // 센서ID\n  diagCont: string;       // 진단선택명\n\n  onClickDetail?: Function //리스트의 상세보기 버튼을 선택 시 수행할 함수\n\n}\nexport interface IStatusOfuListProps extends StateProps, DispatchProps, IStatusOfuList {}\n\n\nexport const StatusOfuList = forwardRef((props: IStatusOfuListProps, ref) => {\n\n  // 페이징 관련 state\n  const [isPageInfoUpdate, setIsPageInfoUpdate] = useState(false);\n  const [pageInfo, setPageInfo] = useState({\n    activePageEvent: 1,\n    itemsCountPerPage: 10,\n  });\n\n\n  // Oltc 모터 동작 현황 이벤트 리스트 호출\n  const searchOfuEvent = () => {\n    props.getStatusMtrOltcOfuEvent(\n      props.fromDate,\n      props.toDate,\n      props.eqipId,\n      props.snsrId,\n      props.diagCont,\n      pageInfo.activePageEvent,\n      pageInfo.itemsCountPerPage);\n  }\n\n  // 부모 컴포넌트에서 리스트 조회 기능 이용시 사용\n  useImperativeHandle(ref, () => ({\n    search: () => setPageInfo({\n      ...pageInfo,\n      activePageEvent: 1\n    })\n  }));\n\n  // 페이지 노출개수 변경 시 리스트 재조회\n  useEffect(() => {\n    if (isPageInfoUpdate) {\n      searchOfuEvent();\n    } else {\n      setIsPageInfoUpdate(true);\n    }\n  }, [pageInfo]);\n\n  return (\n    <>\n      <div className=\"contents-table\">\n        <div className=\"contents-tabmenu gap-down-10\">\n          <div className=\"obj-select option\">\n            <form className=\"select-cover\">\n              <div className=\"select-box\">\n                <input type=\"checkbox\" id=\"select-indicator06\"/>\n                <label className=\"select small\" htmlFor=\"select-indicator06\">{pageInfo.itemsCountPerPage}</label>\n                <div className=\"option small\">\n                  {\n                    [10, 25, 50, 100].map((value, index) =>\n                      <a key={index}\n                         onClick={() => {\n                           setPageInfo({...pageInfo, itemsCountPerPage: value});\n                           $('#select-indicator06').prop('checked', false);\n                         }}\n                      >{value}</a>\n                    )\n                  }\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n        <table className=\"table-db\">\n          <colgroup>\n            {/* TODO - grid width 설정 */}\n            {/* 퍼블리싱 페이지가 없어서 col의 width 임의로 설정 */}\n            <col style={{width: '100px'}}/>\n            <col style={{width: '10%'}}/>\n            <col style={{width: '10%'}}/>\n            <col style={{width: '20%'}}/>\n            <col style={{width: '10%'}}/>\n            <col style={{width: '10%'}}/>\n            <col style={{width: '5%'}}/>\n            <col/>\n          </colgroup>\n          <thead>\n          <tr>\n            <th>&nbsp;</th>\n            <th>설비명</th>\n            <th>센서명</th>\n            <th>발생일시</th>\n            <th>진단결과</th>\n            <th>3상 전체 최대전류(A)</th>\n            <th>3상 전체 평균전류(A)</th>\n            <th>동작시간(ms)</th>\n            <th>TAP 위치</th>\n          </tr>\n          </thead>\n          <tbody>\n          {\n            !props.oltcOfuEventList.length ?\n              <tr>\n                <td colSpan={8}>조회된 데이터가 없습니다. (시작일시 2020.09.22 이전, 종료일시 2020.09.25 조회 시 데이터 조회 가능)</td>\n              </tr>\n              :\n              props.oltcOfuEventList.map((event, index) => (\n                <tr key={index}>\n                  <td>\n                    <span>\n                      <a className=\"call-popup btn white narrow\"\n                         data-layer=\"notice-info\"\n                         onClick={() => {props.onClickDetail(event)}}\n                      >상세\n                      </a>\n                    </span>\n                  </td>\n                  <td>\n                    {/* TODO - api 컬럼에 설비명 누락, 센서명으로 임시대체 */}\n                    <span>{event.SNSR_NM}</span>\n                  </td>\n                  <td>\n                    <span>{event.SNSR_NM}</span>\n                  </td>\n                  <td>\n                    <span>{moment(event.OCCR_TIME).format('YYYY-MM-DD HH:mm:ss')}</span>\n                  </td>\n                  <td>\n                    <span>{event.DIAG_RSLT}</span>\n                  </td>\n                  <td>\n                    <span>{event.PEAK_CURR_3}</span>\n                  </td>\n                  <td>\n                    <span>{event.AVG_CURR_3}</span>\n                  </td>\n                  <td>\n                    <span>{event.OP_TIME}</span>\n                  </td>\n                  <td>\n                    <span>{event.TAP_POS}</span>\n                  </td>\n                </tr>\n              ))\n          }\n          </tbody>\n        </table>\n        <Pager\n          handlePageChange={(newPage) => setPageInfo({...pageInfo, activePageEvent:newPage})}\n          activePage={pageInfo.activePageEvent}\n          totalItemsCount={props.oltcOfuEventListTotalCount}\n          itemsCountPerPage={pageInfo.itemsCountPerPage}\n        />\n      </div>\n    </>\n  );\n});\n\n// 리덕스 스토어를 가지는 객체\nconst mapStateToProps = ({ mtrOltcOfuEvent }: IRootState) => ({\n  oltcOfuEventList: mtrOltcOfuEvent.oltcOfuEventList,\n  oltcOfuEventListTotalCount: mtrOltcOfuEvent.oltcOfuEventListTotalCount\n});\n\n// 리듀스 액션 함수를 가지는 객체\nconst mapDispatchToProps = {\n  getStatusMtrOltcOfuEvent,\n};\n\n// 스토어/액션함수 객체의 타입을 정의\n// (상단 컴포넌트의 파라미터에서 받을 인터페이스에서 사용)\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\n// 스토어, 액션함수를 컴포넌트에 연결\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  null,\n  {\n    getDisplayName: () => 'StatusOfuList',\n    forwardRef: true\n  })(StatusOfuList);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\popup\\pdevent\\modal-pdevent.tsx",["1286","1287","1288","1289"],"import { useEffect, useRef, useState } from \"react\";\nimport { PrpsFile } from \"shared/component/file/prpsfile\";\nimport { PrpdChartComponent } from \"shared/component/chart/prpd/prpd-chart-component\";\nimport { PrpsChartComponent } from \"shared/component/chart/prps/prps-chart-component\";\nimport { PrpsDrawingStatus } from \"shared/component/chart/prps/prps-chart-graph\";\nimport { IRootState } from \"shared/reducers\";\nimport { connect } from \"react-redux\";\nimport { ISpdcEvent } from \"shared/model/spdc-event.model\";\nimport { get3DPrps } from 'shared/reducers/3d-prps.reducer';\nimport moment from \"moment\";\n\nexport interface IModalPdEventArgs {\n  children? : React.ReactNode,\n\teventRow: ISpdcEvent,\n  close: Function,        // 팝업을 닫았을 때 호출할 함수\n}\n\nexport interface IModalPdEventProps extends StateProps, DispatchProps, IModalPdEventArgs {}\n\nconst PdEvent = ( props : IModalPdEventProps ) =>\n{\n\t// 추가적으로 가지고 있어야 하는 것\n\t// prps file\n\t// console.log('re-render ModalPdEvent');\n\n\tconst [isRunning, setRunningState] = useState(false);\n\tconst [is3dForEvent, set3dForEvent] = useState(true);\n\tconst [is3dForNoise, set3dForNoise] = useState(true);\n\tconst [prpsStatus, setPrpsStatus] = useState(null);\n\tif( prpsStatus == null )\n\t{\n\t\tsetPrpsStatus( new PrpsDrawingStatus() );\n\t}\n\n\tconst [noiseStatus, setNoiseStatus] = useState(null);\n\tif( noiseStatus == null )\n\t{\n\t\tsetNoiseStatus( new PrpsDrawingStatus() );\n\t}\n\n\tconst refPrpd = useRef(null);\n\tconst refNoise = useRef(null);\n\n\tconst [eventOffset, setEventOffset] = useState(0);\n\tconst [eventPhase, setEventPhase] = useState(0);\n\tconst [noiseOffset, setNoiseOffset] = useState(0);\n\tconst [noisePhase, setNoisePhase] = useState(0);\n\tconst [seconds, setSeconds] = useState(0);\n\tconst prpsFile = new PrpsFile(128);\n\tconst noiseFile = new PrpsFile(128);\n\tprpsFile.setData(props.eventPrps);\n\tnoiseFile.setData(props.noisePrps);\n\n\tuseEffect(() => {\n\t\tprops.get3DPrps(props.eventRow.EVNT_ID);\n\t}, [])\n\t\n\tuseEffect(() => {\n\t\tconsole.log('PRPS 수신');\n\t\tprpsFile.setData(props.eventPrps);\n\t\tnoiseFile.setData(props.noisePrps);\n\n\t\tinitPrpd();\n\t\tinitNoise();\n\t}, [props.eventPrps, props.noisePrps])\n\n\t// 슬라이더 변경\n\tconst setSliderValue = ( seconds : number ) => {\n\t\tsetSeconds(seconds);\n\t\tdocument.getElementById('event-timer-value').innerHTML=String(seconds);\n\t}\n\n\t// 화면 클리어\n\tconst clearAll = () => {\n\t\tsetSliderValue(0);\n\n\t\t// prps 데이터 초기화\n\t\tprpsStatus.clear();\n\t\tnoiseStatus.clear();\n\n\t\t// prpd 초기화\n\t\trefPrpd.current?.clearPrpd();\n\t\trefNoise.current?.clearPrpd();\n\n\t\t// 정지\n\t\tsetRunningState(false);\t\t// 정지\n\t}\n\n\t// event PRPD를 그리는 callback\n\tconst initPrpd = () => {\n\t\t// console.log(`updatePrpd : ${accTime}`);\n\t\trefPrpd.current?.initData({ accTime: 0, prpsData : prpsFile.getPdData()});\n\t}\n\n\tconst updatePrpd = ( accTime : number ) => {\n\t\t// console.log(`updatePrpd : ${accTime}`);\n\t\trefPrpd.current?.updateFrame({ accTime : accTime });\n\t\tsetSliderValue(accTime);\n\t}\n\n\t// noise PRPD를 그리는 callback\n\tconst initNoise = () => {\n\t\t// console.log(`updateNoise : ${accTime}`);\n\t\trefNoise?.current?.initData({ accTime: 0, prpsData : noiseFile.getPdData()});\n\t}\n\n\tconst updateNoise = ( accTime : number ) => {\n\t\t// console.log(`updateNoise : ${accTime}`);\n\t\trefNoise.current?.updateFrame({ accTime : accTime });\n\t}\n\n\tconst clickPlay = () => {\n\t\tconsole.log(`플레이 : ${isRunning} > ${!isRunning}`);\n\t\tsetRunningState(!isRunning);\n\t}\n\n\tconst clickReset = () => {\n\t\tclearAll();\n\t}\n\n\t// const clickClose = () =>{\n\t// \t// 창닫힘 초기화\n\t// \tlayer_close();\n\t// \tclearAll();\n\t// }\n\n\tconst changeSlider = ( value : string ) => {\n\t\tlet seconds = Number(value);\n\t\tsetSliderValue(seconds);\n\n\t\t// prps, prpd 변경\n\t\t// console.log(`update PRPD [${seconds}]`);\n\t\trefPrpd.current?.updateFrameBySeconds({ accTime: seconds, prpsData : prpsFile.getPdData()});\n\t\trefNoise.current?.updateFrameBySeconds({ accTime: seconds, prpsData : noiseFile.getPdData()});\n\n\t\t// 슬라이더를 변경하면 정지\n\t\tsetRunningState(false);\t\t// 정지\n\t}\n\n\tconst checkChange = () => {}\n\n\tconst eventPrpdProps =\n\t{\n\t\tchartName : 'event',\n\t};\n\n\tconst noisePrpdProps =\n\t{\n\t\tchartName : 'noise',\n\t};\n\treturn (\n\t\t<>\n      <div className=\"layer-wrap pdEvent\" data-layer=\"pdEvent\">\n        <div className=\"full-popup\">\n          <aside className=\"lib left\">\n            <div className=\"tit\">\n              <h2>PD Event</h2>\n              <h2>{props.eventRow.EVNT_ID}</h2>\n            </div>\n            <div className=\"left index\">\n              <p>현재 재생 중인 이벤트 시간</p>\n              <p className=\"times\">{moment(props.eventRow.OCCR_TIME).format('YYYY-MM-DD HH:mm:ss')}</p>\n            </div>\n          </aside>\n          <aside className=\"lib contents\">\n            <div className=\"event controller\">\n              <input className=\"dis-none\" id=\"play\" type=\"checkbox\"/>\n              <label className=\"play\" htmlFor=\"play\" onClick={clickPlay}></label>\n              <button className=\"replay\" onClick={clickReset}><img src={require('assets/img/pd-replay.png').default}/></button>\n              <input id=\"timer\" type=\"range\" name=\"timer\" min=\"0\" max=\"60\" value={seconds} step=\"1\" onChange={({target : target}) => {changeSlider(target.value);}}/>\n              <p><span id=\"event-timer-value\">0</span>초</p>\n              <div className=\"btn-close\" onClick={() => props.close()}><i className=\"icon-close\"></i></div>\n            </div>\n            <div className=\"graph wrap gap-up-50\">\n              <h2 id=\"equip02\">{props.eventRow.SNSR_LOC_NM}-{props.eventRow.SNSR_NM}</h2>\n              <div className=\"offset controller\">\n                <div className=\"input number\" style={{height: \"368px\"}}>\n                  <label className=\"text-box gap-down-10\">\n                    <span>Offset</span>\n                    <input type=\"text\" name=\"offset\" value={eventOffset}\n                           onChange={({target: {value}}) => setEventOffset(Number(value))}/>\n                  </label>\n                  <label className=\"text-box gap-down-20\">\n                    <span>Phase</span>\n                    <input type=\"text\" name=\"phase\" value={eventPhase}\n                           onChange={({target: {value}}) => setEventPhase(Number(value))}/>\n                  </label>\n                  <label>\n                    <input type=\"radio\" name=\"equip01\" checked={is3dForEvent} onClick={() => set3dForEvent(true)}\n                           onChange={checkChange}/>\n                    <span>3D</span>\n                  </label>\n                  <label>\n                    <input type=\"radio\" name=\"equip01\" checked={!is3dForEvent} onClick={() => set3dForEvent(false)}\n                           onChange={checkChange}/>\n                    <span>2D</span>\n                  </label>\n                </div>\n                <div className=\"graph chart-3d\">\n                  <div className=\"graph-container\" style={{height: \"368px\"}}>\n                    <PrpsChartComponent\n                      isRunning={isRunning}\n                      is3d={is3dForEvent}\n\t\t\t\t\t\t\t\t\t\t  prpsStatus={prpsStatus}\n                      callbackInitData={initPrpd}\n                      callbackUpdateFrame={updatePrpd}\n\t\t\t\t\t\t\t\t\t\t\tcameraZoom={0.9}\n                      pdFile={prpsFile}>\n                    </PrpsChartComponent>\n                  </div>\n                </div>\n                <div className=\"graph chart-2d\">\n                  <div className=\"graph-container\" style={{height: \"368px\", padding: \"25px\"}}>\n                    <PrpdChartComponent\n                      ref={refPrpd}\n                      {...eventPrpdProps}\n                    >\n                    </PrpdChartComponent>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"graph wrap gap-up-50\">\n              <h2 id=\"equip02\">NOISE</h2>\n              <div className=\"offset controller\">\n                <div className=\"input number\" style={{height: \"368px\"}}>\n                  <label className=\"text-box gap-down-10\">\n                    <span>Offset</span>\n                    <input type=\"text\" name=\"offset\" value={noiseOffset}\n                           onChange={({target: {value}}) => setNoiseOffset(Number(value))}/>\n                  </label>\n                  <label className=\"text-box gap-down-20\">\n                    <span>Phase</span>\n                    <input type=\"text\" name=\"phase\" value={noisePhase}\n                           onChange={({target: {value}}) => setNoisePhase(Number(value))}/>\n                  </label>\n                  <label>\n                    <input type=\"radio\" name=\"equip02\" checked={is3dForNoise} onClick={() => set3dForNoise(true)}\n                           onChange={checkChange}/>\n                    <span>3D</span>\n                  </label>\n                  <label>\n                    <input type=\"radio\" name=\"equip02\" checked={!is3dForNoise} onClick={() => set3dForNoise(false)}\n                           onChange={checkChange}/>\n                    <span>2D</span>\n                  </label>\n                </div>\n                <div className=\"graph chart-3d\">\n                  <div className=\"graph-container\" style={{height: \"368px\"}}>\n                    <PrpsChartComponent\n                      isRunning={isRunning}\n                      is3d={is3dForNoise}\n\t\t\t\t\t  \t\t\t\t\tprpsStatus={noiseStatus}\n                      callbackInitData={initNoise}\n                      callbackUpdateFrame={updateNoise}\n\t\t\t\t\t\t\t\t\t\t\tcameraZoom={0.9}\n                      pdFile={noiseFile}>\n                    </PrpsChartComponent>\n                  </div>\n                </div>\n                <div className=\"graph chart-2d\">\n                  <div className=\"graph-container\" style={{height: \"368px\", padding: \"25px\"}}>\n                    <PrpdChartComponent\n                      ref={refNoise}\n                      {...noisePrpdProps}\n                    >\n                    </PrpdChartComponent>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </aside>\n        </div>\n      </div>\n    </>\n\t);\n}\n\nconst mapStateToProps = ({prps3D}: IRootState) => ({\n\teventPrps: prps3D.eventPrps,\n\tnoisePrps: prps3D.noisePrps,\n});\n\nconst mapDispatchToProps = {\n  get3DPrps,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport const ModalPdEvent = connect(mapStateToProps, mapDispatchToProps)(PdEvent);","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\popup\\realtime\\modal-realtime.tsx",["1290","1291","1292","1293","1294","1295"],"import { useEffect, useMemo, useRef, useState } from \"react\";\n\nimport { layer_close } from \"shared/util/publish-utils\";\nimport { getCommonEquipmentList, getCommonSensorList } from 'shared/reducers/substation';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport RealtimeComponent from \"./realtime-component\";\n\nexport interface IModalReatimeProps extends StateProps, DispatchProps {\n  children? : React.ReactNode,\n  close: Function,        // 팝업을 닫았을 때 호출할 함수\n}\nexport const ModalRealtime = ( props : IModalReatimeProps ) =>\n{\n\tconst [isRunning, setRunningState] = useState(false);\n\n\tconst clickPlay = () => {\n\t\tconsole.log(`플레이 : ${isRunning} > ${!isRunning}`);\n\t\tsetRunningState(!isRunning);\n\t}\n\n\t// const clickClose = () =>{\n\t//\n\t// \t// 창닫힘 초기화\n\t// \tlayer_close();\n\t// }\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"layer-wrap pdRealtime\" data-layer=\"pdRealtime\">\n\t\t\t\t<div className=\"full-popup\">\n\t\t\t\t\t<aside className=\"lib contents rt\">\n\t\t\t\t\t\t<div className=\"event controller rt\">\n\t\t\t\t\t\t\t<h2><span className=\"gap-right-20\">실시간</span>\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<a href=\"#\" className=\"btn-close\" onClick={() => props.close()}><i className=\"icon-close\"></i></a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"gap-up-30 gap-left-50\">\n\n\t\t\t\t\t\t\t<RealtimeComponent\n\t\t\t\t\t\t\t\tno=\"1\"\n\t\t\t\t\t\t\t\tisRunning={isRunning}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t</RealtimeComponent>\n\t\t\t\t\t\t\t<RealtimeComponent\n\t\t\t\t\t\t\t\tno=\"2\"\n\t\t\t\t\t\t\t\tisRunning={isRunning}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t</RealtimeComponent>\n\t\t\t\t\t\t\t<RealtimeComponent\n\t\t\t\t\t\t\t\tno=\"3\"\n\t\t\t\t\t\t\t\tisRunning={isRunning}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t</RealtimeComponent>\n\t\t\t\t\t\t\t<RealtimeComponent\n\t\t\t\t\t\t\t\tno=\"4\"\n\t\t\t\t\t\t\t\tisRunning={isRunning}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t</RealtimeComponent>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</aside>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n}\n\nconst mapStateToProps = ({ substation }: IRootState) => ({\n\tequipmentList: substation.equipmentList,\n\tsensorList: substation.sensorList,\n  });\n\nconst mapDispatchToProps = {\n\tgetCommonEquipmentList,\n\tgetCommonSensorList,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\tmapStateToProps, mapDispatchToProps )(ModalRealtime);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\status\\dgalist\\status-dga-list.tsx",["1296","1297"],"import React, { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { getStatusMtrDgaEvent } from '../../../../views/status/mtr/dga/dga.reducer';\nimport moment from 'moment';\nimport Pager from '../../pager/Pager';\n\nexport interface IStatusDgaList {\n  fromDate: Date;         // 시작일시\n  toDate: Date;           // 종료일시\n  eqipId: string;         // 설비ID\n  snsrId: string;         // 센서ID\n  diagCont: string;       // 진단선택명\n  onClickRow?: Function   // 리스트의 row를 클릭 시 수행할 함수\n}\nexport interface IStatusDgaListProps extends StateProps, DispatchProps, IStatusDgaList {}\n\nexport const StatusDgaList = forwardRef((props: IStatusDgaListProps, ref) => {\n\n  // 페이징 관련 state\n  const [isPageInfoUpdate, setIsPageInfoUpdate] = useState(false);\n  const [pageInfo, setPageInfo] = useState({\n    activePageEvent: 1,\n    itemsCountPerPage: 10,\n  });\n\n  // 유증가스 현황 이벤트 리스트 호출\n  const searchDgaEvent = () => {\n    props.getStatusMtrDgaEvent(\n      props.fromDate,\n      props.toDate,\n      props.eqipId,\n      props.snsrId,\n      props.diagCont,\n      pageInfo.activePageEvent,\n      pageInfo.itemsCountPerPage);\n  }\n\n  // 부모 컴포넌트에서 리스트 조회 기능 이용시 사용\n  useImperativeHandle(ref, () => ({\n    search: () => setPageInfo({\n      ...pageInfo,\n      activePageEvent: 1\n    })\n  }));\n\n  useEffect(() => {\n  }, []);\n\n  // 페이지 노출개수 변경 시 리스트 재조회\n  useEffect(() => {\n    if (isPageInfoUpdate) {\n      searchDgaEvent();\n    } else {\n      setIsPageInfoUpdate(true);\n    }\n  }, [pageInfo]);\n\n  return (\n    <>\n      <div className=\"contents-table\">\n        <div className=\"contents-tabmenu gap-down-10\">\n          <div className=\"obj-select option\">\n            <form className=\"select-cover\">\n              <div className=\"select-box\">\n                <input type=\"checkbox\" id=\"select-indicator06\" />\n                <label className=\"select small\" htmlFor=\"select-indicator06\">{pageInfo.itemsCountPerPage}</label>\n                <div className=\"option small\">\n                  {\n                    [10, 25, 50, 100].map((value, index) =>\n                      <a key={index}\n                         onClick={() => {\n                           setPageInfo({...pageInfo, itemsCountPerPage: value});\n                           $('#select-indicator06').prop('checked', false);\n                         }}\n                      >{value}</a>\n                    )\n                  }\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n        <table className=\"table-db\">\n          <colgroup>\n            {/* <col style={{width: '70px'}}/> */}\n            <col style={{width: '130px'}}/>\n            <col style={{width: '100px'}}/>\n            <col style={{width: '200px'}}/>\n            <col/>\n            <col/>\n            <col/>\n            <col/>\n          </colgroup>\n          <thead>\n          <tr>\n            {/* <th>&nbsp;</th> */}\n            <th>설비명</th>\n            <th>센서명</th>\n            <th>발생일시</th>\n            <th>진단결과</th>\n            <th>H2O(ppm)</th>\n            <th>H2(ppm)</th>\n            <th>CO(ppm)</th>\n            <th>C2H2(ppm)</th>\n          </tr>\n          </thead>\n          <tbody>\n          {\n            !props.dgaEventList.length ?\n              <tr>\n                <td colSpan={8}>조회된 데이터가 없습니다. (시작일시 2020.09.22 이전, 종료일시 2020.09.25 조회 시 데이터 조회 가능)</td>\n              </tr>\n              :\n              props.dgaEventList.map((event, index) => (\n                <tr key={index} onClick={() => props.onClickRow && props.onClickRow(event)}>\n                  {/* <td>\n                    <input type=\"checkbox\" className=\"obj-check\" id={`list_${index}`}/>\n                    <label className=\"obj-check-box\" htmlFor={`list_${index}`}></label>\n                  </td> */}\n                  <td>\n                    <span>{event.SNSR_LOC_NM}</span>\n                  </td>\n                  <td>\n                    <span>{event.SNSR_NM}</span>\n                  </td>\n                  <td>\n                    <span>{moment(event.OCCR_TIME).format('YYYY-MM-DD HH:mm:ss')}</span>\n                  </td>\n                  <td>\n                    <span>{event.DIAG_RSLT}</span>\n                  </td>\n                  <td>\n                    <span>{event.H2O}</span>\n                  </td>\n                  <td>\n                    <span>{event.H2}</span>\n                  </td>\n                  <td>\n                    <span>{event.CO}</span>\n                  </td>\n                  <td>\n                    <span>{event.C2H2}</span>\n                  </td>\n                </tr>\n              ))\n          }\n          </tbody>\n        </table>\n        <Pager\n          handlePageChange={(newPage) => setPageInfo({...pageInfo, activePageEvent:newPage})}\n          activePage={pageInfo.activePageEvent}\n          totalItemsCount={props.dgaEventListTotalCount}\n          itemsCountPerPage={pageInfo.itemsCountPerPage}\n        />\n      </div>\n    </>\n  );\n});\n\nconst mapStateToProps = ({ mtrDgaEvent }: IRootState) => ({\n  dgaEventList: mtrDgaEvent.dgaEventList,\n  dgaEventListTotalCount: mtrDgaEvent.dgaEventListTotalCount,\n});\n\nconst mapDispatchToProps = {\n  getStatusMtrDgaEvent,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  null,\n  {\n    getDisplayName: () => 'StatusDgaList',\n    forwardRef: true\n  })(StatusDgaList);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\chart\\prpd\\prpd-chart-improve.tsx",["1298","1299","1300","1301","1302","1303","1304","1305"],"import React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { prpdColors } from './prpd-colors';\n\nclass PrpdRenderData {\n\n\tprpdData : number[];\n\taccTime: number;\n\tprpdIndex: number;\n\tchartName: string;\n\tsampling: number;\n\tprpsSecArr2 = new Array(60);\n\n\tconstructor(sampling : number){\n\t\tthis.sampling = sampling;\n\t\tthis.prpdData = new Array<number>(sampling * 256).fill(0);\n\t\tthis.prpdIndex = 0;\n\t\tthis.chartName = String(Math.random());\n\t\tthis.accTime = 0;\n\t\tfor (let i = 0; i < 60; i++) {\n\t\t\tthis.prpsSecArr2[i] = new Array(this.sampling * 60);\n\t\t}\n\n\t\tconsole.log(`PrpdRenderData`);\n\t}\n}\n\nexport interface IPrpdChartImproveArgs {\n  width? : number;\t\t\t\t\t\t// 전체 폭 (범례를 포함)\n  height? : number; \t\t\t\t\t// 전페 높이 (범례를 포함)\n  chart_width? : number;\t\t\t// 차트 폭\n  chart_height? : number; \t\t// 차트 높이\n  sampling? : number; \t\t\t\t// 샘플링 크기(케이블:256, 종합예방:128)\n  isLegend? : boolean;\t\t\t\t// 범례 여부\n\tseriesType?: string;\t\t\t\t// 1~5 없으면 기존 PRPD\n  chartData?: Array<number>;\t// 데이터\n\tisImage?: boolean;\t\t\t\t\t// true: PRPD 이미지, false: PRPD 재생\n}\n\nexport interface IPrpdChartImproveProps extends StateProps, DispatchProps, IPrpdChartImproveArgs {}\n\nconst _PrpdChartImprove  = forwardRef((props: IPrpdChartImproveProps, ref) => {\n\n  const textColor = \"#000000\";\n  const width = props.width ?? 400;\n  const height = props.height ?? 330;\n  const chart_width = props.chart_width ?? 320;\n  const chart_height = props.chart_height ?? 317.5;\n  const sampling = props.sampling ?? 128;\n  const isLegend = props.isLegend ?? true;\n  const legendRef = useRef(null);  // 오른쪽 무지개 범례\n  const chartRef = useRef(null);\n\tconst chartData = props.chartData ?? [];\t\t// render data로 이동???\n\tconst isImage = props.isImage ?? true;\n\n\t// 부모 컴포넌트에서 조회버튼 기능 이용시 사용\n\tuseImperativeHandle(ref, () => ({\n\t\tclear: clearPrpd,\t\t\t\t\t\t\t\t\t\t\t\t// PRPD 지우기\n\n\t\t// 재생\n\t\tinit: initData,\t\t\t\t\t\t\t\t\t\t\t\t\t// 초기 데이터\n\t\tset1minData: set1minData,\t\t\t\t\t\t\t\t// 1분 데이터 세팅\n\t\tupdateFrame: updateFrame,\t\t\t\t\t\t\t\t// PRPS에서 매 프레임 호출(이벤트)\n\t\tupdateFrameBySeconds: dummyFunction,\t\t//  슬라이드바에 맞춘 계산\n\t\t\n\t\t// 실시간\n\t\tset1secData: set1secData,\t\t\t\t\t\t\t\t// 1초 데이터 세팅(실시간)\n\t\tupdateFrameReaTime: updateFrameReaTime,\t\t\t// PRPS에서 매 프레임 호출(실시간)\n\t}));\n\n\t// realtime에서 사용하는 멤버가 몇개 존재\n\t\t// prpsDataIndex 저장필요\n\t// PRPD 차트 그리는 용도\n\t// private prpdData : any;\t\t\t\t\t// PRPD 색상 계산\n\t// private prpsSecArr2 = new Array(60);\n\t// private accTime = 0;\n\t// private prpdIndex = 0;\n\t// private chartName : string = String(Math.random());\n\t// private yAxisType : string = '';\n\t// public isInit : boolean = false;\n\n\tconst dummyFunction = () => {\n\t\tconsole.log(`Prpd Chart`);\n\n\t}\n\n\tconst [renderData] = useState(new PrpdRenderData(sampling));\n\n\t// 처음 1회 범례 그리기\n\tuseEffect(() => {\n\n\t\t// 데이터 초기화?\n\n\t\tif( isLegend ) {\n\t\t\tsetLegendColor();\n\t\t}\n\n\t}, []);\n\n\t// 데이터 변경시 PRPD 그리기\n\tuseEffect(() => {\n\n\t\tif( isImage ) {\n\t\t\tclearPrpd();\n\t\t\tsetChartData();\n\t\t}\n\n\t}, [chartData]);\n\n\tconst initData = ( data ) =>\t{\n\t\t// console.log(`PRPD Init Data`);\n\t\trenderData.accTime = data.accTime;\n\t\trenderData.prpdIndex = 0;\n\t\tset1minData( data.prpsData );\n\n\t\t// this.isInit = true;\n\t}\n\n\t// clearPrpd()\n\t// {\n\t// \twhile( this.chartRef.current?.hasChildNodes() )\n\t// \t{\n\t// \t\tthis.chartRef.current?.removeChild( this.chartRef.current?.firstChild);\n\t// \t}\n\n\t// \tthis.accTime = 0;\n\n\t// \t// PRPD 그래프 크기\n\t// \tfor( let i = 0; i < this.sampling * 256; i++ )\n\t// \t{\n\t// \t\tthis.prpdData[i] = 0;\n\t// \t}\n\n\t// \tfor (let i = 0; i < 60; i++) {\n\t// \t\tfor (let j = 0; j < this.sampling * 256; j++) {\n\t// \t\t\tthis.prpsSecArr2[i][j] = 0;\n\t// \t\t}\n\t// \t}\n\n\t// \tthis.isInit = false;\n\t// }\n\n\t// clearPrpdData()\n\t// {\n\t// \twhile( this.chartRef.current?.hasChildNodes() )\n\t// \t{\n\t// \t\tthis.chartRef.current?.removeChild( this.chartRef.current?.firstChild);\n\t// \t}\n\n\t// \tfor( let i = 0; i < this.sampling * 256; i++ )\n\t// \t{\n\t// \t\tthis.prpdData[i] = 0;\n\t// \t}\n\t// }\n\n\tconst set1minData = (prpsData) =>\t{\n\t\tif( prpsData == null )\n\t\t{\n\t\t\tconsole.log('prps 데이터가 설정되지 않음');\n\t\t\treturn;\n\t\t}\n\n\t\t//60s 이벤트 데이터를 60개로 쪼갠다.\n\t\tfor (var i = 0; i < 60; i++) {\n\t\t\trenderData.prpsSecArr2[i] = new Array(renderData.sampling * 60);\n\t\t\tfor (var k = 0; k < renderData.sampling * 60; k++) {\n\t\t\t\trenderData.prpsSecArr2[i][k] = prpsData[renderData.sampling * 60 * i + k];\n\t\t\t}\n\t\t}\n\t}\n\n\tconst set1secData = (prpsData) => {\n\t\t// console.log(\"매초 \");\n\t\t// console.log(prpsData);\n\t\trenderData.accTime = 0;\n\t\trenderData.prpdIndex = 0;\n\t\t// renderData.isInit = true;\n\n\t\tif( prpsData == null )\n\t\t{\n\t\t\tconsole.log('prps 데이터가 설정되지 않음');\n\t\t\treturn;\n\t\t}\n\t\t// else\n\t\t// {\n\t\t// \tconsole.log('1sec prps');\n\t\t// \tconsole.log(prpsData);\n\t\t// }\n\n\t\trenderData.prpsSecArr2[0] = new Array(renderData.sampling * 60);\n\t\tfor (var k = 0; k < renderData.sampling * 60; k++) {\n\t\t\trenderData.prpsSecArr2[0][k] = prpsData[renderData.sampling * 60 * 0 + k];\n\t\t}\n\t}\n\n\t// 매 프레임 호출\n\tconst updateFrame = (data) =>\t{\n\t\trenderData.accTime = data.accTime;\n\n\t\tif (renderData.prpsSecArr2[renderData.accTime] != null) {\n\t\t\tfor( let cnt = 0; cnt < 147; cnt++ )\t// 147이 52 frame정도에 해당\n\t\t\t{\n\t\t\t\tlet k = renderData.prpdIndex % renderData.sampling;\n\t\t\t\tlet idx = k + renderData.prpsSecArr2[renderData.accTime][renderData.prpdIndex] * renderData.sampling;\n\t\t\t\tif( isNaN(idx))\n\t\t\t\t{\n\t\t\t\t\tidx = isNaN(idx) ? 0 : idx;\n\t\t\t\t}\n\n\t\t\t\tif (renderData.prpsSecArr2[renderData.accTime][renderData.prpdIndex] != 0) {\n\t\t\t\t\trenderData.prpdData[idx]++;\n\n\t\t\t\t\tonRealtimeAdd2(renderData.prpsSecArr2[renderData.accTime][renderData.prpdIndex], k, renderData.prpdData);\n\t\t\t\t}\n\n\t\t\t\tif (renderData.prpsSecArr2[renderData.accTime].length == renderData.prpdIndex + 1) {\n\t\t\t\t\trenderData.prpdIndex = 0;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\trenderData.prpdIndex++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 실시간을 위한 임시함수\n\t// private prpsDataIdex: number = 0; // 현재 어디를 하고 있는 지 체크하는 것\n\tconst updateFrameReaTime = (data) => {\n\t\t// 데이터 보다 많이 검색할 수는 없음 (256*60)\n\t\tif( renderData.prpdIndex >= renderData.sampling * 60 )\n\t\t\treturn;\n\n\t\t// 데이터가 없으면 return\n\t\tif( !renderData.prpsSecArr2[0] )\n\t\t\treturn;\n\n\t\t// for( let cnt = 0; cnt < 147; cnt++ )\t// 147이 52 frame정도에 해당\n\t\t// {\n\t\t// \tlet k = renderData.prpdIndex % renderData.sampling;\n\t\t// \tlet idx = k + renderData.prpsSecArr2[0][renderData.prpdIndex] * renderData.sampling;\n\t\t// \tif( isNaN(idx))\n\t\t// \t{\n\t\t// \t\tidx = isNaN(idx) ? 0 : idx;\n\t\t// \t}\n\n\t\t// \tif (renderData.prpsSecArr2[0][renderData.prpdIndex] != 0) {\n\t\t// \t\trenderData.prpdData[idx]++;\n\n\t\t// \t\tonRealtimeAdd2(renderData.prpsSecArr2[0][renderData.prpdIndex], k, renderData.prpdData);\n\t\t// \t}\n\n\t\t// \tif (renderData.prpsSecArr2[0].length == renderData.prpdIndex + 1) {\n\t\t// \t\trenderData.prpdIndex = 0;\n\t\t// \t}\n\t\t// \telse {\n\t\t// \t\trenderData.prpdIndex++;\n\t\t// \t}\n\t\t// }\n\n\t\tfor( let i = 0; i < 147; i++ ){ // 147이 52 frame정도에 해당(1초 52 frame)\n\t\t\tlet prpdX = renderData.prpdIndex % renderData.sampling;\n\t\t\tlet prpdY = renderData.prpdIndex / renderData.sampling;\n\n\t\t\tif( !renderData.prpsSecArr2[renderData.prpdIndex] )\n\t\t\t{\n\t\t\t\trenderData.prpdData[prpdX + prpdY * renderData.sampling]++; \n\t\t\t\tonRealtimeAdd2(prpdY, prpdX, renderData.prpdData);\t\t// onRealtimeAdd2를 개선할 것\n\t\t\t}\n\n\t\t\trenderData.prpdIndex++;\n\t\t}\n\n\t\t// this.accTime = 0;\n\n\t\t// if (this.prpsSecArr2[0] != null) {\n\t\t// \tfor( let cnt = 0; cnt < 147; cnt++ )\t// 147이 52 frame정도에 해당\n\t\t// \t{\n\t\t// \t\tlet k = this.prpdIndex % this.sampling;\n\t\t// \t\tlet idx = k + this.prpsSecArr2[this.accTime][this.prpdIndex] * this.sampling;\n\t\t// \t\tif( isNaN(idx))\n\t\t// \t\t{\n\t\t// \t\t\tidx = isNaN(idx) ? 0 : idx;\n\t\t// \t\t}\n\n\t\t// \t\tif (this.prpsSecArr2[this.accTime][this.prpdIndex] != 0) {\n\t\t// \t\t\tthis.prpdData[idx]++;\n\n\t\t// \t\t\tthis.onRealtimeAdd2(this.prpsSecArr2[this.accTime][this.prpdIndex], k, this.prpdData);\n\t\t// \t\t}\n\n\t\t// \t\tif (this.prpsSecArr2[this.accTime].length == this.prpdIndex + 1) {\n\t\t// \t\t\tthis.prpdIndex = 0;\n\t\t// \t\t}\n\t\t// \t\telse {\n\t\t// \t\t\tthis.prpdIndex++;\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\t}\n\t// // 해당 시간의 PRPD\n\t// public updateFrameBySeconds( props : any )\n\t// {\n\t// \tlet seconds : number = props.accTime;\n\n\t// \tif( this.isInit == false )\n\t// \t{\n\t// \t\tthis.initData(props);\n\t// \t}\n\n\t// \tthis.clearPrpdData();\n\n\t// \tfor (let i = 0; i < seconds; i++) {\n\t// \t\tlet cnt = 0;\n\t// \t\twhile (cnt < this.sampling * 60) {\n\t// \t\t\tlet k = this.prpdIndex % this.sampling;\n\t// \t\t\tlet idx = k + this.prpsSecArr2[i][this.prpdIndex] * this.sampling;\n\t// \t\t\tidx = isNaN(idx) ? 0 : idx;\n\n\t// \t\t\tif (this.prpsSecArr2[i][this.prpdIndex] != 0) {\n\t// \t\t\t\tthis.prpdData[idx]++;\n\t// \t\t\t\tthis.onRealtimeAdd2(this.prpsSecArr2[i][this.prpdIndex], k, this.prpdData);\n\t// \t\t\t}\n\n\t// \t\t\tif (this.prpsSecArr2[i].length == this.prpdIndex + 1) {\n\t// \t\t\t\tthis.prpdIndex = 0;\n\t// \t\t\t}\n\t// \t\t\telse {\n\t// \t\t\t\tthis.prpdIndex++;\n\t// \t\t\t}\n\n\t// \t\t\tcnt++;\n\t// \t\t}\n\t// \t\t// msseq += 10;\n\t// \t}\n\t// }\n\n\t//  PRPD에 실시간 데이터를 추가한다.\n\tconst onRealtimeAdd2 = ( x, y, data ) =>\t{\n\t\tlet svgns = \"http://www.w3.org/2000/svg\";\n\n\t\tvar rows = 256;\n\t\tvar tile_height = chart_height / rows;\t\t\t// 1칸의 높이\n\t\tvar tile_width = chart_width / sampling;\t// 1칸의 너비(차트 크기/샘플링)\n\n\t\t// console.log(`x[${x}] y[${y}]`);\n\t\t// console.log(`샘플링[${this.sampling}] tile_width[${tile_width}]`);\n\t\n\t\tlet phase = 0;\t// 이후 phase 대응\t\n\t\tphase = phase * 0.8888888888888889;\n\t\tvar temp = chart_width - phase;\n\t\tvar xVal = 0 * 1;\n\n\t\tvar value = data[x * sampling + y];\n\t\tif( !value )\n\t\t{\n\t\t\tconsole.log(`데이터 없음 index[${x*sampling+y}]`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (value >= 100)\n\t\t\tvalue = 99;\n\t\tif (value <= 0)\n\t\t\treturn;\n\n\t\tlet id = renderData.chartName + \"_block_\" + (x * 128 + y);\n\t\tlet rect = document.getElementById(id);\n\n\t\tif (rect == null) {\n\t\t\tif (y * tile_width > temp) {\n\t\t\t\txVal = (y * tile_width) - temp;\n\t\t\t}\n\t\t\telse {\n\t\t\t\txVal = y * tile_width + phase;\n\n\t\t\t\t// 마이너스로 쉬프트할 경우 x축 값이 마이너스 값이 되므로 360도 만큼 값을 더하여 표시한다.\n\t\t\t\tif (xVal < 0) {\n\t\t\t\t\txVal = xVal + phase;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 신규 생성하고 색상 설정\n\t\t\tlet rect2 = document.createElementNS(svgns, 'rect');\n\t\t\tlet xPos = xVal;\n\t\t\tlet yPos = chart_height - (x * tile_height);\n\t\t\t\n\t\t\trect2.setAttributeNS(null, 'id', id);\n\t\t\trect2.setAttributeNS(null, 'x', String(xPos));\n\t\t\trect2.setAttributeNS(null, 'y', String(yPos));\n\t\t\trect2.setAttributeNS(null, 'height', String(tile_height));\n\t\t\trect2.setAttributeNS(null, 'width', String(tile_width));\n\t\t\t\n\t\t\tlet color = (\"000000\" + prpdColors(value % 100).toString(16)).substr(-6);\n\t\t\trect2.setAttributeNS(null, 'fill', '#' + color);\n\t\t\trect2.setAttributeNS(null, 'title', 'color');\n\n\t\t\tchartRef.current?.appendChild(rect2);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// 색상만 설정\n\t\t\tlet color = (\"000000\" + prpdColors(value % 100).toString(16)).substr(-6);\n\t\t\trect.setAttributeNS(null, 'fill', '#' + color);\n\t\t\trect.setAttributeNS(null, 'title', 'color');\n\t\t}\n\t}\n\n\tconst setLegendColor = () => {\n\t\tvar svgns = \"http://www.w3.org/2000/svg\";\n\t\tfor (var i = 1; i < 100; i++) {\n\t\t\tvar regendRect = document.createElementNS(svgns, 'rect');\n\t\t\tregendRect.setAttributeNS(null, 'x', '0');\n\t\t\tregendRect.setAttributeNS(null, 'y', String(i * (chart_height / 100)));\n\t\t\tregendRect.setAttributeNS(null, 'height', String((chart_height / 100)));\n\t\t\tregendRect.setAttributeNS(null, 'width', '8');\n\n\t\t\tvar color = (\"000000\" + prpdColors(100 - i).toString(16)).substr(-6);\n\t\t\tregendRect.setAttributeNS(null, 'fill', '#' + color);\n\t\t\tlegendRef.current?.appendChild(regendRect);\n\t\t}\n\t}\n\n\tconst setChartData = () => {\n\n\t\tif( chartData.length == 0 ){\n\t\t\treturn;\n\t\t}\n\n\t\tlet svgns = \"http://www.w3.org/2000/svg\";\n\n\t\tvar rows = 256;\n\t\tvar tile_height = chart_height / rows;\t\t// 1칸의 높이\n\t\tvar tile_width = chart_width / sampling;\t// 1칸의 너비(차트 크기/샘플링)\n\n\t\tlet phase = 0;\t// 이후 phase 대응\n\t\tvar temp = chart_width - phase;\n\t\tvar cnt = 0 * 1;\n\t\tvar xVal = 0 * 1;\n\n\t\t// PRPD 차트의 크기가 sampling * 256\n\t\tfor (var i = 1; i < 256; i++) {\n\t\t\tfor (var j = 0; j < sampling; j++) {\n\t\t\t\tvar value = chartData[i * sampling + j];\n\t\t\t\tif (value >= 100)\n\t\t\t\t\tvalue = 99;\n\t\t\t\tif (value <= 0)\n\t\t\t\t\tcontinue;\n\n\t\t\t\t// 현재 찍어야할 위치가 360도보다 벗어날 경우 0도 쪽으로 이동한다.\n\t\t\t\tif (j * tile_width > temp) {\n\t\t\t\t\txVal = (j * tile_width) - temp;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\txVal = j * tile_width + phase;\n\n\t\t\t\t\t// 마이너스로 쉬프트할 경우 x축 값이 마이너스 값이 되므로 360도 만큼 값을 더하여 표시한다.\n\t\t\t\t\tif (xVal < 0) {\n\t\t\t\t\t\txVal = xVal + (360 * 0.8888888888888889);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet rect = document.createElementNS(svgns, 'rect');\n\t\t\t\tlet xPos = xVal;\n\t\t\t\tlet yPos = chart_height - (i * tile_height);\n\n\t\t\t\trect.setAttributeNS(null, 'x', String(xPos));\n\t\t\t\trect.setAttributeNS(null, 'y', String(yPos));\n\t\t\t\trect.setAttributeNS(null, 'height', String(tile_height));\n\t\t\t\trect.setAttributeNS(null, 'width', String(tile_width));\n\n\t\t\t\tif( isNaN(value) )\n\t\t\t\t{\n\t\t\t\t\tconsole.log(`value[${value}] i[${i}] j[${j}]값이 이상한데`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tvar color = (\"000000\" + prpdColors(value % 100).toString(16)).substr(-6);\n\t\t\t\trect.setAttributeNS(null, 'fill', '#' + color);\n\t\t\t\trect.setAttributeNS(null, 'title', 'color');\n\t\t\t\tchartRef.current?.appendChild(rect);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst clearPrpd = () =>\n\t{\n\t\twhile( chartRef.current?.hasChildNodes() )\n\t\t{\n\t\t\tchartRef.current?.removeChild( chartRef.current?.firstChild);\n\t\t}\n\t}\n\n\tconst guideLines = () => {\n\t\t\t\n\t\tlet a = 29.17;\n\t\tlet lines  = [];\n\n\t\t// 가로줄\n\t\tfor( let i = 1; i <= 10; i++ )\n\t\t{\n\t\t\tlet id = \"hline_\"+i;\n\t\t\tlet pos_y = chart_height / 11 * i;\n\t\t\tlines.push(<line key={id} x1=\"0\" x2={chart_width} y1={pos_y} y2={pos_y} stroke=\"#BBBBBB\" strokeWidth=\"0.5\" strokeDasharray=\"5, 5\"></line>);\n\t\t}\n\n\t\t// 세로\n\t\tfor( let i = 1; i <= 4; i++ )\n\t\t{\n\t\t\tlet id = \"vline_\"+i;\n\t\t\tlet pos_x = chart_width / 4 * i;\n\t\t\tlines.push(<line key={id} x1={pos_x} x2={pos_x} y1=\"0\" y2={chart_height} stroke=\"#BBBBBB\" strokeWidth=\"0.5\" strokeDasharray=\"5, 5\"></line>);\n\t\t}\n\t\t\n\t\treturn lines;\n\t}\n\n\tconst xAxis = () => {\n\t\t// 위치 조정\n\t\tconst trans_degree = `translate(0, ${chart_height + 9})`;\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<g transform={trans_degree} fontSize=\"9\">\n\t\t\t\t\t<text x={0} y=\"0\" fill={textColor} strokeWidth=\"0\">0º</text>\n\t\t\t\t\t<text x={chart_width/4-6} y=\"0\" fill={textColor} strokeWidth=\"0\">90º</text>\n\t\t\t\t\t<text x={chart_width/2-10} y=\"0\" fill={textColor} strokeWidth=\"0\">180º</text>\n\t\t\t\t\t<text x={chart_width/4*3-10} y=\"0\" fill={textColor} strokeWidth=\"0\">270º</text>\n\t\t\t\t\t<text x={chart_width-20} y=\"0\" fill={textColor} strokeWidth=\"0\">360º</text>\n\t\t\t\t</g>\n\t\t\t</>\n\t\t);\n\t}\n\n\tconst yAxisPRPD = () => {\n\t\tconst trans_dBm = `translate(${chart_width}, 0)`;\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<g transform={trans_dBm} fontSize=\"9\">\n\t\t\t\t\t{/* 단위는 dBm */}\n\t\t\t\t\t<text x=\"8\" y={chart_height/11*0 +8} fill={textColor} strokeWidth=\"0\">0</text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*2 } fill={textColor} strokeWidth=\"0\">-10</text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*4 } fill={textColor} strokeWidth=\"0\">-20</text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*6 } fill={textColor} strokeWidth=\"0\">-30</text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*8 } fill={textColor} strokeWidth=\"0\">-40</text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*10} fill={textColor} strokeWidth=\"0\">-50</text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*11} fill={textColor} strokeWidth=\"0\">dBm</text>\n\t\t\t\t</g>\n\t\t\t</>\n\t\t);\n\t}\n\n\tconst yAxisLv1 = () => {\n\t\tconst trans_dBm = `translate(${chart_width}, 0)`;\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<g transform={trans_dBm} fontSize=\"9\">\n\t\t\t\t\t<text x=\"8\" y={chart_height/11*0 +8} fill={textColor} strokeWidth=\"0\">3.5mv</text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*2 } fill={textColor} strokeWidth=\"0\"></text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*4 } fill={textColor} strokeWidth=\"0\"></text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*6 } fill={textColor} strokeWidth=\"0\"></text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*8 } fill={textColor} strokeWidth=\"0\"></text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*10} fill={textColor} strokeWidth=\"0\"></text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*11} fill={textColor} strokeWidth=\"0\">0mv</text>\n\t\t\t\t</g>\n\t\t\t</>\n\t\t);\n\t}\n\n\tconst yAxisLv2 = () => {\n\n\t\tconst trans_dBm = `translate(${chart_width}, 0)`;\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<g transform={trans_dBm} fontSize=\"9\">\n\t\t\t\t\t<text x=\"8\" y={chart_height/11*0 +8} fill={textColor} strokeWidth=\"0\">10mv</text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*2 } fill={textColor} strokeWidth=\"0\"></text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*4 } fill={textColor} strokeWidth=\"0\"></text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*6 } fill={textColor} strokeWidth=\"0\"></text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*8 } fill={textColor} strokeWidth=\"0\"></text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*10} fill={textColor} strokeWidth=\"0\"></text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*11} fill={textColor} strokeWidth=\"0\">0mV</text>\n\t\t\t\t</g>\n\t\t\t</>\n\t\t);\n\t}\n\n\tconst yAxisLv3 = () => {\n\t\tconst trans_dBm = `translate(${chart_width}, 0)`;\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<g transform={trans_dBm} fontSize=\"9\">\n\t\t\t\t\t<text x=\"8\" y={chart_height/11*0 +8} fill={textColor} strokeWidth=\"0\">35mv</text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*2 } fill={textColor} strokeWidth=\"0\"></text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*4 } fill={textColor} strokeWidth=\"0\"></text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*6 } fill={textColor} strokeWidth=\"0\"></text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*8 } fill={textColor} strokeWidth=\"0\"></text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*10} fill={textColor} strokeWidth=\"0\"></text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*11} fill={textColor} strokeWidth=\"0\">0mV</text>\n\t\t\t\t</g>\n\t\t\t</>\n\t\t);\n\t}\n\n\tconst yAxisLv4 = () => {\n\t\tconst trans_dBm = `translate(${chart_width}, 0)`;\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<g transform={trans_dBm} fontSize=\"9\">\n\t\t\t\t\t<text x=\"8\" y={chart_height/11*0 +8} fill={textColor} strokeWidth=\"0\">110mv</text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*2 } fill={textColor} strokeWidth=\"0\"></text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*4 } fill={textColor} strokeWidth=\"0\"></text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*6 } fill={textColor} strokeWidth=\"0\"></text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*8 } fill={textColor} strokeWidth=\"0\"></text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*10} fill={textColor} strokeWidth=\"0\"></text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*11} fill={textColor} strokeWidth=\"0\">0mV</text>\n\t\t\t\t</g>\n\t\t\t</>\n\t\t);\n\t}\n\n\tconst yAxisLv5 = () => {\n\t\tconst trans_dBm = `translate(${chart_width}, 0)`;\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<g transform={trans_dBm} fontSize=\"9\">\n\t\t\t\t\t<text x=\"8\" y={chart_height/11*0 +8} fill={textColor} strokeWidth=\"0\">350mv</text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*2 } fill={textColor} strokeWidth=\"0\"></text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*4 } fill={textColor} strokeWidth=\"0\"></text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*6 } fill={textColor} strokeWidth=\"0\"></text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*8 } fill={textColor} strokeWidth=\"0\"></text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*10} fill={textColor} strokeWidth=\"0\"></text>\n\t\t\t\t\t<text x=\"0\" y={chart_height/11*11} fill={textColor} strokeWidth=\"0\">0mV</text>\n\t\t\t\t</g>\n\t\t\t</>\n\t\t);\n\t}\n\n\tconst series = () => {\n\t\tlet yAxis = null;\n\t\tswitch( props.seriesType )\n\t\t{\n\t\t\tcase \"1\": yAxis = yAxisLv1; break;\n\t\t\tcase \"2\": yAxis = yAxisLv2; break;\n\t\t\tcase \"3\": yAxis = yAxisLv3; break;\n\t\t\tcase \"4\": yAxis = yAxisLv4; break;\n\t\t\tcase \"5\": yAxis = yAxisLv5; break;\n\t\t\tdefault: yAxis = yAxisPRPD; break;\n\t\t}\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{ xAxis() }\n\t\t\t\t{ yAxis() }\n\t\t\t</>\n\t\t);\n\t}\n\n\tconst legends = () => {\n\t\tif( isLegend ) {\n\t\t\t// 위치 조정\n\t\t\tconst trans_legend = `translate(${chart_width + 20}, 0)`;\n\t\t\treturn(\n\t\t\t\t<>\n\t\t\t\t\t<g id=\"legendPrpd\" transform={trans_legend} fontSize=\"9\" ref={legendRef}>\n\t\t\t\t\t\t<text x=\"12\" y={chart_height/4*0 +8} fill={textColor} strokeWidth=\"0\">100</text>\n\t\t\t\t\t\t<text x=\"12\" y={chart_height/4*1} fill={textColor} strokeWidth=\"0\">75</text>\n\t\t\t\t\t\t<text x=\"12\" y={chart_height/4*2} fill={textColor} strokeWidth=\"0\">50</text>\n\t\t\t\t\t\t<text x=\"12\" y={chart_height/4*3} fill={textColor} strokeWidth=\"0\">25</text>\n\t\t\t\t\t\t<text x=\"12\" y={chart_height/4*4} fill={textColor} strokeWidth=\"0\">0</text>\n\t\t\t\t\t</g>\n\t\t\t\t</>\n\t\t\t);\n\t\t}\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n\nreturn (\n    <>\n      <div>\n        <svg width={width} height={height} xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\">\n\t\t  \n\t\t\t\t\t{/* 배경 그리기 */}\n\t\t\t\t\t<rect x=\"0\" y=\"0\" fill=\"#848484\" width={chart_width} height={chart_height} stroke=\"orange\" strokeWidth=\"2\" />\n\n\t\t\t\t\t{/* 눈금 그리기 */}\n\t\t\t\t\t{guideLines()}\n\t\t\t\n\t\t\t\t\t{/* 좌표축 표시 */}\n\t\t\t\t\t{series()}\n\t\t\t\t\t\n\t\t\t\t\t{/* 색상 블럭 */}\n\t\t\t\t\t<g ref={chartRef} />\n\n\t\t\t\t\t{/* 무지개 범례 */}\n\t\t\t\t\t{legends()}\n\n        </svg>\n      </div>\n    </>\n  );\n});\n\nconst mapStateToProps = ({}: IRootState) => ({\n});\n\nconst mapDispatchToProps = {\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport const PrpdChartImprove = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  null,\n  {\n    getDisplayName: () => 'PrpdChartImprove',\n    forwardRef: true\n  })(_PrpdChartImprove);\n\n\t","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\all\\all-oltc-spdc.tsx",["1306","1307","1308","1309","1310","1311","1312","1313","1314","1315","1316","1317","1318","1319","1320"],"import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { getStatusMtrAllOltcSpdcEvent } from './all.reducer';\nimport moment from 'moment';\n\nexport interface MtrAllOltcSpdcStatus {\n  eqipId: string | number;\n}\nexport interface IMtrAllOltcSpdcStatusProps extends StateProps, DispatchProps, MtrAllOltcSpdcStatus {}\n\nexport const MtrAllOltcSpdcStatus = (props: IMtrAllOltcSpdcStatusProps) => {\n\n  useEffect(() => {\n    if (props.eqipId != 0) {\n      props.getStatusMtrAllOltcSpdcEvent(props.eqipId);\n    }\n  }, [props.eqipId]);\n\n  return (\n    <>\n      <div className=\"contents-table\">\n        <h6 className=\"table-selected\">실시간</h6>\n        <table className=\"table-db\">\n          <colgroup>\n            <col style={{width:'25%'}}/>\n            <col style={{width:'25%'}}/>\n            <col style={{width:'25%'}}/>\n            <col style={{width:'25%'}}/>\n          </colgroup>\n          <thead>\n          <tr>\n            <th>센서명</th>\n            <th>최대방전(DBM)</th>\n            <th>평균방전(DBM)</th>\n            <th>&nbsp;</th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr>\n            <td><a href=\"\">GLU101-PD01</a></td>\n            <td><span>-30.508</span></td>\n            <td><span>0.008</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">실시간</a></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD02</a></td>\n            <td><span>-0.508</span></td>\n            <td><span>0.016</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">실시간</a></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD03</a></td>\n            <td><span>-30.128</span></td>\n            <td><span>0.003</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">실시간</a></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD04</a></td>\n            <td><span>-31.428</span></td>\n            <td><span>0.002</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">실시간</a></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD05</a></td>\n            <td><span>-30.930</span></td>\n            <td><span>0.001423</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">실시간</a></td>\n          </tr>\n          </tbody>\n        </table>\n      </div>\n      <div className=\"contents-table\">\n        <h6 className=\"table-selected\">최종 진단정보</h6>\n        <table className=\"table-db\">\n          <colgroup>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'25%'}}/>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'15%'}}/>\n          </colgroup>\n          <thead>\n          <tr>\n            <th>센서명</th>\n            <th>알람일시</th>\n            <th>진단결과</th>\n            <th>최대방전(DBM)</th>\n            <th>평균방전(DBM)</th>\n            <th>&nbsp;</th>\n          </tr>\n          </thead>\n          <tbody>\n          {\n            props.allOltcSpdcEventList.length ?\n              props.allOltcSpdcEventList.map((spdc, index) => {\n                return (\n                  <tr key={index}>\n                    <td>{spdc.SNSR_NM}</td>\n                    <td><span>{moment(spdc.OCCR_TIME).format('YYYY-MM-DD HH:mm:ss')}</span></td>\n                    <td><span>{spdc.PD_TYPE}</span></td>\n                    <td><span>{spdc.MAX_DBM}</span></td>\n                    <td><span>{spdc.AVG_DBM}</span></td>\n                    <td><a href=\"\" className=\"text-pink text-bold\">PRPD</a></td>\n                  </tr>\n                )\n              })\n              :\n              <tr className=\"empty\">\n                <td colSpan={6}>\n                  <img src={require('assets/img/icon_empty.svg').default}/>\n                  <p>결과가 없습니다.</p>\n                </td>\n              </tr>\n          }\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ mtrAllEvent }: IRootState) => ({\n  allOltcSpdcEventList: mtrAllEvent.allOltcSpdcEventList,\n});\n\nconst mapDispatchToProps = {\n  getStatusMtrAllOltcSpdcEvent\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MtrAllOltcSpdcStatus);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\all\\all-oltc-ofu.tsx",["1321","1322","1323","1324","1325","1326","1327","1328","1329"],"import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { getStatusMtrAllOltcOfuEvent } from './all.reducer';\nimport moment from 'moment';\n\nexport interface MtrAllOltcOfuStatus {\n  eqipId: string | number;\n}\nexport interface IMtrAllOltcOfuStatusProps extends StateProps, DispatchProps, MtrAllOltcOfuStatus {}\n\nexport const MtrAllOltcOfuStatus = (props: IMtrAllOltcOfuStatusProps) => {\n\n  useEffect(() => {\n    if (props.eqipId != 0) {\n      props.getStatusMtrAllOltcOfuEvent(props.eqipId);\n    }\n  }, [props.eqipId]);\n\n  return (\n    <>\n      <div className=\"contents-table\">\n        <h6 className=\"table-selected\">실시간</h6>\n        <table className=\"table-db\">\n          <colgroup>\n            <col style={{width:'50%'}}/>\n            <col style={{width:'50%'}}/>\n          </colgroup>\n          <thead>\n          <tr>\n            <th>센서명</th>\n            <th>MTR Tap 위치</th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr>\n            <td><a href=\"\">OLTC</a></td>\n            <td><span>값 입력</span></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">OLTC</a></td>\n            <td><span>값 입력</span></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">OLTC</a></td>\n            <td><span>값 입력</span></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">OLTC</a></td>\n            <td><span>값 입력</span></td>\n          </tr>\n          </tbody>\n        </table>\n      </div>\n      <div className=\"contents-table\">\n        <h6 className=\"table-selected\">최종 진단정보</h6>\n        <table className=\"table-db\">\n          <colgroup>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'25%'}}/>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'15%'}}/>\n          </colgroup>\n          <thead>\n          <tr>\n            <th>센서명</th>\n            <th>알람일시</th>\n            <th>진단결과</th>\n            <th>3상 최대전류(A)</th>\n            <th>3상 평균전류(A)</th>\n            <th>동작시간(ms)</th>\n          </tr>\n          </thead>\n          <tbody>\n          {\n            props.allOltcOfuEventList.length ?\n              props.allOltcOfuEventList.map((ofu, index) => {\n                return (\n                  <tr key={index}>\n                    <td>{ofu.SNSR_NM}</td>\n                    <td><span>{moment(ofu.OCCR_TIME).format('YYYY-MM-DD HH:mm:ss')}</span></td>\n                    <td><span>{ofu.DIAG_RSLT}</span></td>\n                    <td><span>{ofu.PEAK_CURR_3}</span></td>\n                    <td><span>{ofu.AVG_CURR_3}</span></td>\n                    <td>{ofu.OP_TIME}</td>\n                  </tr>\n                )\n              })\n              :\n              <tr className=\"empty\">\n                <td colSpan={6}>\n                  <img src={require('assets/img/icon_empty.svg').default}/>\n                  <p>결과가 없습니다.</p>\n                </td>\n              </tr>\n          }\n          <tr>\n            <td><a href=\"\">GLU101-PD01</a></td>\n            <td><span>2021-04-14- 12:34:56</span></td>\n            <td><span>양호</span></td>\n            <td><span>0.00</span></td>\n            <td><span>0.00</span></td>\n            <td>4092</td>\n          </tr>\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ mtrAllEvent }: IRootState) => ({\n  allOltcOfuEventList: mtrAllEvent.allOltcOfuEventList,\n});\n\nconst mapDispatchToProps = {\n  getStatusMtrAllOltcOfuEvent\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MtrAllOltcOfuStatus);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\all\\all-dga.tsx",["1330","1331","1332","1333","1334","1335","1336","1337"],"import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { getStatusMtrAllDgaEvent } from './all.reducer';\nimport moment from 'moment';\n\nexport interface MtrAllDgaStatus {\n  eqipId: string | number;\n}\nexport interface IMtrAllDgaStatusProps extends StateProps, DispatchProps, MtrAllDgaStatus {}\n\nexport const MtrAllDgaStatus = (props: IMtrAllDgaStatusProps) => {\n\n  useEffect(() => {\n    if (props.eqipId != 0) {\n      props.getStatusMtrAllDgaEvent(props.eqipId);\n    }\n  }, [props.eqipId]);\n\n  return (\n    <>\n      <div className=\"contents-table\">\n        <h6 className=\"table-selected\">실시간</h6>\n        <table className=\"table-db\">\n          <colgroup>\n            <col style={{width:'20%'}}/>\n            <col style={{width:'20%'}}/>\n            <col style={{width:'20%'}}/>\n            <col style={{width:'20%'}}/>\n          </colgroup>\n          <thead>\n          <tr>\n            <th>센서명</th>\n            <th>H2(ppm)</th>\n            <th>H2O(ppm)</th>\n            <th>CO(ppm)</th>\n            <th>C2H2(ppm)</th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr>\n            <td><a href=\"\">GLU101-PD01</a></td>\n            <td><span>-30.508</span></td>\n            <td><span>0.008</span></td>\n            <td><span>0.228</span></td>\n            <td><span>0.334</span></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD01</a></td>\n            <td><span>-30.508</span></td>\n            <td><span>0.008</span></td>\n            <td><span>0.228</span></td>\n            <td><span>0.334</span></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD01</a></td>\n            <td><span>-30.508</span></td>\n            <td><span>0.008</span></td>\n            <td><span>0.228</span></td>\n            <td><span>0.334</span></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD01</a></td>\n            <td><span>-30.508</span></td>\n            <td><span>0.008</span></td>\n            <td><span>0.228</span></td>\n            <td><span>0.334</span></td>\n          </tr>\n          </tbody>\n        </table>\n      </div>\n      <div className=\"contents-table\">\n        <h6 className=\"table-selected\">최종 진단정보</h6>\n        <table className=\"table-db\">\n          <colgroup>\n            <col style={{width:'10%'}}/>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'15%'}}/>\n          </colgroup>\n          <thead>\n          <tr>\n            <th>센서명</th>\n            <th>알람일시</th>\n            <th>진단결과</th>\n            <th>H2(ppm)</th>\n            <th>H2O(ppm)</th>\n            <th>CO(ppm)</th>\n            <th>C2H2(ppm)</th>\n          </tr>\n          </thead>\n          <tbody>\n          {\n            props.allDgaEventList.length ?\n              props.allDgaEventList.map((dga, index) => {\n                return (\n                  <tr key={index}>\n                    <td>{dga.SNSR_NM}</td>\n                    <td><span>{moment(dga.OCCR_TIME).format('YYYY-MM-DD HH:mm:ss')}</span></td>\n                    <td><span>{dga.DIAG_RSLT}</span></td>\n                    <td><span>{dga.H2}</span></td>\n                    <td><span>{dga.H2O}</span></td>\n                    <td><span>{dga.CO}</span></td>\n                    <td><span>{dga.C2H2}</span></td>\n                  </tr>\n                )\n              })\n              :\n              <tr className=\"empty\">\n                <td colSpan={7}>\n                  <img src={require('assets/img/icon_empty.svg').default}/>\n                  <p>결과가 없습니다.</p>\n                </td>\n              </tr>\n          }\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ mtrAllEvent }: IRootState) => ({\n  allDgaEventList: mtrAllEvent.allDgaEventList,\n});\n\nconst mapDispatchToProps = {\n  getStatusMtrAllDgaEvent\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MtrAllDgaStatus);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\setup\\eqip\\setup-mtr-position-module.tsx",["1338","1339","1340"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { IDiagramEquipment } from '../../../../shared/model/diagram-equipment.model';\nimport { setSldLocation, setSldUseYnTitle } from './eqip.reducer';\n\nexport interface SetupMtrPositionModule {\n  mtr: IDiagramEquipment;       // 장비 객체\n  updateCallback?: Function;     // 업데이트(저장) 이후 콜백\n}\nexport interface ISetupMtrPositionModuleProps extends StateProps, DispatchProps, SetupMtrPositionModule {}\n\nexport const SetupMtrPositionModule = (props: ISetupMtrPositionModuleProps) => {\n\n  const [mtrInfo, setMtrInfo] = useState({\n    gisMtr: props.mtr.GIS_MTR,\n    gisMtrNum: props.mtr.GIS_MTR_NUM,\n    useYN: (props.mtr.USE_YN === 'Y'),\n    title: props.mtr.GIS_MTR_TITLE,\n  });\n  const [sensorIdList, setSensorIdList] = useState([]);\n\n  useEffect(() => {\n    const sensorList = props.gisMtrLocation.filter(sensor => sensor.GIS_MTR === 'MTR' && sensor.GIS_MTR_NUM === props.mtr.GIS_MTR_NUM);\n    setSensorIdList([\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 1)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 2)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 3)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 4)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 5)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 6)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 7)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 8)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 9)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 10)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 11)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 12)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 13)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 14)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 15)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 16)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 17)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 18)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 19)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 20)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 21)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 22)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 23)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 24)[0]?.SNSR?.ID || 0),\n      (sensorList.filter(sensor => parseInt(sensor.CELL_NUM) === 25)[0]?.SNSR?.ID || 0),\n    ]);\n  }, [props.gisMtrLocation]);\n\n  useEffect(() => {\n  }, []);\n\n  // MTR 정보 저장\n  const updateMtr = async () => {\n    await props.setSldUseYnTitle(mtrInfo.gisMtr, mtrInfo.gisMtrNum, mtrInfo.useYN ? 'Y' : 'N', mtrInfo.title);\n    await sensorIdList.map((sensorId, index) => {\n      props.setSldLocation(mtrInfo.gisMtr, mtrInfo.gisMtrNum, index+1, sensorId);\n    })\n    if (props.updateCallback) props.updateCallback();\n  }\n\n  return (\n    <>\n      <div className=\"tbl-col\">\n        <table>\n          <colgroup>\n            <col width=\"\" />\n            <col width=\"\" />\n            <col width=\"\" />\n            <col width=\"\" />\n            <col width=\"\" />\n          </colgroup>\n          <thead>\n          <tr>\n            <th colSpan={5}>\n              <input type=\"checkbox\" className=\"form-check-input\" checked={mtrInfo.useYN} onClick={() => setMtrInfo({...mtrInfo, useYN: !mtrInfo.useYN})} />\n              <input type=\"text\" className=\"ipt-tit\" value={mtrInfo.title} onChange={(e) => setMtrInfo({...mtrInfo, title: e.target.value})} />\n              <label className=\"obj-text-box one\" onClick={updateMtr}\n                     style={{float: 'right', marginRight: '10px', textAlign: 'center'}}>저장</label>\n            </th>\n          </tr>\n          </thead>\n          <tbody>\n          {\n            [\n              [1, 2, 3, 4, 5],\n              [6, 7, 8, 9, 10],\n              [11, 12, 13, 14, 15],\n              [16, 17, 18, 19, 20],\n              [21, 22, 23, 24, 25]\n            ].map((value, index) => {\n              return (\n                <tr key={index}>\n                  {value.map(subValue => {\n                    return (\n                      <td key={subValue}>\n                        <ul className=\"select-ul ul-col2\">\n                          <li>\n                            <select className=\"optional\"\n                                    value={sensorIdList[subValue-1]}\n                                    onChange={(e) => {\n                                      let newSensorInfo = [...sensorIdList];\n                                      newSensorInfo[subValue-1] = parseInt(e.target.value);\n                                      setSensorIdList(newSensorInfo);\n                                    }}>\n                              <option value='0'>미선택</option>\n                              {\n                                props.allSensorList\n                                  // .filter(sensor => sensor.GIS_MTR === 'GIS')  // 센서가 현재 붙어있는 (위치)설비를 가리키며, 해당 센서가 어디에만 붙일 수 있는지 알수가 없다.\n                                  .slice()  // ReadonlyArray를 sort 사용하기위해 사용\n                                  .sort((a, b) => a.ID > b.ID ? 1 : 0)  // ID 기준으로 asc 소팅\n                                  .map((sensor, index) => {\n                                    return <option key={index} value={sensor.ID}>{sensor.SNSR_NM}</option>\n                                  })\n                              }\n                            </select>\n                          </li>\n                        </ul>\n                      </td>\n                    )\n                  })}\n                </tr>\n              )\n            })\n          }\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ diagram, substation }: IRootState) => ({\n  gisMtrLocation: diagram.gisMtrLocation,\n  allSensorList: substation.allSensorList,\n});\n\nconst mapDispatchToProps = {\n  setSldUseYnTitle,\n  setSldLocation,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SetupMtrPositionModule);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\user\\user-list.tsx",["1341","1342","1343","1344","1345"],"import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { getSettingUserList } from './user.reducer';\nimport Pager from '../../../shared/component/pager/Pager';\nimport moment from 'moment';\nimport UserModalAdd from './user-modal-add';\nimport UserModalUpdate from './user-modal-update';\nimport { IUser } from '../../../shared/model/user.model';\nimport UserModalDel from './user-modal-del';\n\nexport interface IUserListProps extends StateProps, DispatchProps {}\n\nexport const UserList = (props: IUserListProps) => {\n\n  const [isShowUserModalAdd, setIsShowUserModalAdd] = useState(false);\n  const [isShowUserModalUpdate, setIsShowUserModalUpdate] = useState(false);\n  const [selectedUser, setSelectedUser] = useState(null as IUser);\n  const [isShowUserModalDel, setIsShowUserModalDel] = useState(false);\n\n  const listCountRef = useRef(null);\n  const [pageInfo, setPageInfo] = useState({\n    activePageEvent: 1,\n    itemsCountPerPage: 10,\n  });\n\n  useEffect(() => {\n  }, []);\n\n  useEffect(() => {\n    getUserList();\n  }, [pageInfo]);\n\n  const getUserList = () => {\n    props.getSettingUserList(pageInfo.activePageEvent, pageInfo.itemsCountPerPage);\n  }\n\n  return (\n    <>\n      <div className=\"section-box\">\n        <div className=\"contents-table\">\n          <div className=\"contents-tabmenu gap-down-10\">\n            <h3>사용자 현황 <span className=\"tag-number text-pink text-bold\">{props.userList.length}</span></h3>\n            <a className=\"btn white narrow\" onClick={() => setIsShowUserModalAdd(true)}>사용자 추가 +</a>\n            <div className=\"obj-select option\">\n              <form className=\"select-cover\">\n                <div className=\"select-box\">\n                  <input type=\"checkbox\" id=\"select-user-count\" ref={listCountRef}/>\n                  <label className=\"select small\" htmlFor=\"select-user-count\">{pageInfo.itemsCountPerPage}</label>\n                  <div className=\"option small\">\n                    {\n                      [10, 25, 50, 100].map((value, index) =>\n                        <a key={index}\n                           onClick={() => {\n                             setPageInfo({...pageInfo, itemsCountPerPage: value});\n                             listCountRef.current.checked = false;\n                           }}\n                        >{value}</a>\n                      )\n                    }\n                  </div>\n                </div>\n              </form>\n            </div>\n          </div>\n          <table className=\"table-db\">\n            <colgroup>\n              <col style={{width:'10%'}} />\n              <col style={{width:'10%'}} />\n              <col style={{width:'27%'}} />\n              <col/>\n              <col/>\n              <col/>\n              <col style={{width:'70px'}} />\n              <col style={{width:'70px'}} />\n            </colgroup>\n            <thead>\n            <tr>\n              <th>로그인 ID</th>\n              <th>사용자명</th>\n              <th>생성일자</th>\n              <th>기관명</th>\n              <th>전화번호</th>\n              <th>권한</th>\n              <th>&nbsp;</th>\n              <th>&nbsp;</th>\n            </tr>\n            </thead>\n            <tbody>\n            {\n              props.userList.length ?\n                props.userList.map((user, index) => {\n                  return (\n                    <tr key={index}>\n                      <td><span>{user.USER_ID}</span></td>\n                      <td><span>{user.USER_NM}</span></td>\n                      <td><span>{moment(user.CREA_TIME).format('YYYY-MM-DD HH:mm:ss')}</span></td>\n                      <td><span>{user.ORGA_NM}</span></td>\n                      <td><span>{user.PHON_NO}</span></td>\n                      <td><span>\n                        {\n                          user.AUTH_LVL === 1 ? '관리자' :\n                          user.AUTH_LVL === 2 ? '운영자' :\n                          user.AUTH_LVL === 3 ? '감시자' :\n                          user.AUTH_LVL === 4 ? '사용자' : ''\n                        }\n                      </span></td>\n                      <td><a className=\"txt-color mint text-bold\"\n                             onClick={() => {\n                               setSelectedUser(user);\n                               setIsShowUserModalUpdate(true);\n                             }}>수정</a></td>\n                      <td><a className=\"txt-color pink text-bold\"\n                             onClick={() => {\n                               setSelectedUser(user);\n                               setIsShowUserModalDel(true);\n                             }}>삭제</a></td>\n                    </tr>\n                  )\n                })\n                :\n                <tr>\n                  <td colSpan={8}><span>데이터가 없습니다.</span></td>\n                </tr>\n            }\n            </tbody>\n          </table>\n          <Pager\n            handlePageChange={(newPage) => setPageInfo({...pageInfo, activePageEvent:newPage})}\n            activePage={pageInfo.activePageEvent}\n            totalItemsCount={props.userListTotalCount}\n            itemsCountPerPage={pageInfo.itemsCountPerPage}\n          />\n        </div>\n      </div>\n      {\n        isShowUserModalAdd &&\n        <UserModalAdd closeCallback={() => setIsShowUserModalAdd(false)}\n                      okCallback={() => {\n                        setIsShowUserModalAdd(false);\n                        getUserList();\n                      }} />\n      }\n      {\n        isShowUserModalUpdate &&\n        <UserModalUpdate user={selectedUser}\n                         closeCallback={() => setIsShowUserModalUpdate(false)}\n                         okCallback={() => {\n                           setIsShowUserModalUpdate(false);\n                           getUserList();\n                         }} />\n      }\n      {\n        isShowUserModalDel &&\n        <UserModalDel user={selectedUser}\n                      closeCallback={() => setIsShowUserModalDel(false)}\n                      okCallback={() => {\n                        setIsShowUserModalDel(false);\n                        getUserList();\n                      }} />\n      }\n    </>\n  );\n}\n\nconst mapStateToProps = ({ user }: IRootState) => ({\n  userList: user.userList,\n  userListTotalCount: user.userListTotalCount,\n});\n\nconst mapDispatchToProps = {\n  getSettingUserList\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserList);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\all\\all-mtr-spdc.tsx",["1346","1347","1348","1349","1350","1351","1352","1353","1354","1355","1356","1357","1358","1359","1360","1361"],"import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { getStatusMtrAllMtrSpdcEvent } from './all.reducer';\nimport moment from 'moment';\n\nexport interface MtrAllSpdcStatus {\n  eqipId: string | number;\n}\nexport interface IMtrAllSpdcStatusProps extends StateProps, DispatchProps, MtrAllSpdcStatus {}\n\nexport const MtrAllMtrSpdcStatus = (props: IMtrAllSpdcStatusProps) => {\n\n  useEffect(() => {\n    if (props.eqipId != 0) {\n      props.getStatusMtrAllMtrSpdcEvent(props.eqipId);\n    }\n  }, [props.eqipId]);\n\n  return (\n    <>\n      <div className=\"contents-table\">\n        <h6 className=\"table-selected\">실시간</h6>\n        <table className=\"table-db\">\n          <colgroup>\n            <col style={{width:'25%'}}/>\n            <col style={{width:'25%'}}/>\n            <col style={{width:'25%'}}/>\n            <col style={{width:'25%'}}/>\n          </colgroup>\n          <thead>\n          <tr>\n            <th>센서명</th>\n            <th>최대방전(DBM)</th>\n            <th>평균방전(DBM)</th>\n            <th>&nbsp;</th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr>\n            <td><a href=\"\">GLU101-PD01</a></td>\n            <td><span>-30.508</span></td>\n            <td><span>0.008</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">실시간</a></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD02</a></td>\n            <td><span>-0.508</span></td>\n            <td><span>0.016</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">실시간</a></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD03</a></td>\n            <td><span>-30.128</span></td>\n            <td><span>0.003</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">실시간</a></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD04</a></td>\n            <td><span>-31.428</span></td>\n            <td><span>0.002</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">실시간</a></td>\n          </tr>\n          <tr>\n            <td><a href=\"\">GLU101-PD05</a></td>\n            <td><span>-30.930</span></td>\n            <td><span>0.001423</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">실시간</a></td>\n          </tr>\n          </tbody>\n        </table>\n      </div>\n      <div className=\"contents-table\">\n        <h6 className=\"table-selected\">최종 진단정보</h6>\n        <table className=\"table-db\">\n          <colgroup>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'25%'}}/>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'15%'}}/>\n            <col style={{width:'15%'}}/>\n          </colgroup>\n          <thead>\n          <tr>\n            <th>센서명</th>\n            <th>알람일시</th>\n            <th>진단결과</th>\n            <th>최대방전(DBM)</th>\n            <th>평균방전(DBM)</th>\n            <th>&nbsp;</th>\n          </tr>\n          </thead>\n          <tbody>\n          {\n            props.allMtrSpdcEventList.length ?\n              props.allMtrSpdcEventList.map((spdc, index) => {\n                return (\n                  <tr key={index}>\n                    <td>{spdc.SNSR_NM}</td>\n                    <td><span>{moment(spdc.OCCR_TIME).format('YYYY-MM-DD HH:mm:ss')}</span></td>\n                    <td><span>{spdc.PD_TYPE}</span></td>\n                    <td><span>{spdc.MAX_DBM}</span></td>\n                    <td><span>{spdc.AVG_DBM}</span></td>\n                    <td><a href=\"\" className=\"text-pink text-bold\">PRPD</a></td>\n                  </tr>\n                )\n              })\n              :\n              <tr className=\"empty\">\n                <td colSpan={6}>\n                  <img src={require('assets/img/icon_empty.svg').default}/>\n                  <p>결과가 없습니다.</p>\n                </td>\n              </tr>\n          }\n          <tr>\n            <td><a href=\"\">GLU101-PD01</a></td>\n            <td><span>2021-04-14- 12:34:56</span></td>\n            <td><span>Noise</span></td>\n            <td><span>-31.428</span></td>\n            <td><span>0.002</span></td>\n            <td><a href=\"\" className=\"text-pink text-bold\">PRPD</a></td>\n          </tr>\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ mtrAllEvent }: IRootState) => ({\n  allMtrSpdcEventList: mtrAllEvent.allMtrSpdcEventList,\n});\n\nconst mapDispatchToProps = {\n  getStatusMtrAllMtrSpdcEvent,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MtrAllMtrSpdcStatus);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\status\\mtr\\all\\all-eqip.tsx",["1362","1363","1364","1365","1366","1367","1368","1369","1370","1371","1372","1373","1374","1375","1376","1377","1378","1379","1380","1381","1382","1383","1384","1385","1386"],"import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { IEquipment } from '../../../../shared/model/equipment.model';\n\nexport interface MtrAllEqipStatus {\n  eqipIdReturnCallback: Function;\n}\nexport interface IMtrAllEqipStatusProps extends StateProps, DispatchProps, MtrAllEqipStatus {}\n\nexport const MtrAllEqipStatus = (props: IMtrAllEqipStatusProps) => {\n\n  const equipInputRef = useRef(null); // 선택된 설비 Input 요소\n  const [selectedEqip, setSelectedEqip] = useState<IEquipment>(); // 선택된 설비 객체\n\n  useEffect(() => {\n  }, []);\n\n  // 설비가 선택되면 부모 컴포넌트로 선택된 설비의 ID 전달\n  useEffect(() => {\n    if (selectedEqip && props.eqipIdReturnCallback) {\n      props.eqipIdReturnCallback(selectedEqip.ID);\n    }\n  }, [selectedEqip]);\n\n  // 화면 로딩 시 MTR의 첫번째 설비가 선택되도록 작업\n  useEffect(() => {\n    let mtrEqipList = props.equipmentList.filter(eqipment => eqipment.EQIP_TYPE == 'MTR');\n    if (mtrEqipList.length) {\n      setSelectedEqip(mtrEqipList[0]);\n    }\n  }, [props.equipmentList]);\n\n  return (\n    <>\n      <div className=\"input selectbox gap-down-30\">\n        <p>설비 선택</p>\n        <form id=\"select-cover\">\n          <div className=\"select-box\">\n            <input ref={equipInputRef} type=\"checkbox\" id=\"select-indicator\"/>\n            <label className=\"select big\" htmlFor=\"select-indicator\">{selectedEqip?.EQIP_NM}</label>\n            <div className=\"option\">\n              {\n                props.equipmentList\n                  .filter(eqipment => eqipment.EQIP_TYPE == 'MTR')\n                  .map((eqipment, index) => {\n                    return (\n                      <a key={index} onClick={() => {\n                        setSelectedEqip(eqipment);\n                        equipInputRef.current.checked = false;  // 설비 리스트 비노출 작업\n                      }}>{eqipment.EQIP_NM}</a>\n                    )\n                  })\n              }\n            </div>\n          </div>\n        </form>\n      </div>\n      <div className=\"input-legend\">\n        <ul>\n          <li><i className=\"sign green\"></i>정상</li>\n          <li><i className=\"sign yellow\"></i>요주의</li>\n          <li><i className=\"sign orange\"></i>이상</li>\n          <li><i className=\"sign red\"></i>위험</li>\n          <li><i className=\"sign grey\"></i>통신이상</li>\n        </ul>\n      </div>\n      <div className=\"caraousel-inner\">\n        {/*<img src=\"../../img/machine/mtr_02.jpg\">*/}\n        <img src={require('assets/img/machine/mtr_02.jpg').default}/>\n        <a href=\"\" className=\"tooltip buzzer\" style={{left:'160px',top:'20px'}}>\n          <p className=\"sensor-tag\" style={{}}>\n            <i className=\"sign green\"></i>\n            <span className=\"tooltip-text\">BUSH-A</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\" style={{left:'262px', top:'20px'}}>\n          <p className=\"sensor-tag\" style={{}}>\n            <i className=\"sign green\"></i>\n            <span className=\"tooltip-text\">BUSH-B</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\" style={{left:'356px', top:'20px'}}>\n          <p className=\"sensor-tag\" style={{}}>\n            <i className=\"sign green\"></i>\n            <span className=\"tooltip-text\">BUSH-C</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\" style={{left:'50px', top:'140px'}}>\n          <p className=\"sensor-tag\" style={{}}>\n            <i className=\"sign green\"></i>\n            <span className=\"tooltip-text\">OPD-01</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\" style={{left:'130px', top:'130px'}}>\n          <p className=\"sensor-tag\" style={{}}>\n            <i className=\"sign green\"></i>\n            <span className=\"tooltip-text\">OPD-02</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\" style={{left:'230px', top:'125px'}}>\n          <p className=\"sensor-tag\" style={{}}>\n            <i className=\"sign green\"></i>\n            <span className=\"tooltip-text\">OPD-03</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\" style={{left:'100px', top:'300px'}}>\n          <p className=\"sensor-tag\" style={{}}>\n            <i className=\"sign green\"></i>\n            <span className=\"tooltip-text\">OPD-N1</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\" style={{left:'95px', top:'335px'}}>\n          <p className=\"sensor-tag\" style={{}}>\n            <i className=\"sign green\"></i>\n            <span className=\"tooltip-text\">OLTC</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\" style={{left:'85px', top:'400px'}}>\n          <p className=\"sensor-tag\" style={{}}>\n            <i className=\"sign green\"></i>\n            <span className=\"tooltip-text\">DGA-A</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\" style={{left:'105px', top:'410px'}}>\n          <p className=\"sensor-tag\" style={{}}>\n            <i className=\"sign green\"></i>\n            <span className=\"tooltip-text\">DGA-B</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\" style={{left:'125px', top:'420px'}}>\n          <p className=\"sensor-tag\" style={{}}>\n            <i className=\"sign green\"></i>\n            <span className=\"tooltip-text\">DGA-C</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\" style={{left:'260px', top:'270px'}}>\n          <p className=\"sensor-tag\" style={{}}>\n            <i className=\"sign green\"></i>\n            <span className=\"tooltip-text\">MPD-01</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\" style={{left:'362px', top:'255px'}}>\n          <p className=\"sensor-tag\" style={{}}>\n            <i className=\"sign green\"></i>\n            <span className=\"tooltip-text\">MPD-02</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\" style={{left:'455px', top:'240px'}}>\n          <p className=\"sensor-tag\" style={{}}>\n            <i className=\"sign green\"></i>\n            <span className=\"tooltip-text\">MPD-03</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\" style={{left:'260px', top:'310px'}}>\n          <p className=\"sensor-tag\" style={{}}>\n            <i className=\"sign green\"></i>\n            <span className=\"tooltip-text\">MPD-04</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\" style={{left:'362px', top:'295px'}}>\n          <p className=\"sensor-tag\" style={{}}>\n            <i className=\"sign green\"></i>\n            <span className=\"tooltip-text\">MPD-05</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\" style={{left:'455px', top:'280px'}}>\n          <p className=\"sensor-tag\" style={{}}>\n            <i className=\"sign green\"></i>\n            <span className=\"tooltip-text\">MPD-06</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\" style={{left:'260px', top:'350px'}}>\n          <p className=\"sensor-tag\" style={{}}>\n            <i className=\"sign green\"></i>\n            <span className=\"tooltip-text\">MPD-07</span>\n          </p>\n        </a>\n        <a href=\"\" className=\"tooltip buzzer\" style={{left:'362px', top:'335px'}}>\n          <p className=\"sensor-tag\" style={{}}>\n            <i className=\"sign green\"></i>\n            <span className=\"tooltip-text\">MPD-N1</span>\n          </p>\n        </a>\n        {/* // Blank markup\n                     // <i> 태그에 buzzer 클래스 추가시 깜빡이는 모션 추가됨\n                <a href=\"\" class=\"tooltip buzzer\" style=\"left:px; top:px;\">\n                    <p class=\"sensor-tag\" style=\"\">\n                    <i class=\"sign green\"></i>\n                    <span class=\"tooltip-text\"> </span>\n                    </p>\n                </a>\n               */}\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ substation }: IRootState) => ({\n  equipmentList: substation.equipmentList,\n});\n\nconst mapDispatchToProps = {\n  // getSession\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MtrAllEqipStatus);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\exam\\test\\test02-fire-method-parent.tsx",["1387","1388"],"import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport Test02FireMethodChild from './test02-fire-method-child';\n\n// 리덕스/액션함수를 포함하는 인터페이스 (명명규칙: I + 컴포넌트명 + Porps)\nexport interface ITemplateProps extends StateProps, DispatchProps {}\n\n// props 에 리덕스/액션함수의 기능이 포함되어 있다.\nexport const Test02FireMethodParent = (props: ITemplateProps) => {\n\n  const childRef = useRef(null);\n\n  const fireChildMethod = () => {\n    let user = childRef.current?.focus();\n    console.log('Test02FireMethodParent - user: ', user);\n  }\n\n  return (\n    <>\n      <br /><br />\n      <h1>[ 소스와 console.log 같이 확인이 필요함 ]</h1><br /><br /><br /><br />\n      <button onClick={fireChildMethod}>자식 메소드 수행</button><br /><br />\n      <Test02FireMethodChild ref={childRef} />\n    </>\n  );\n}\n\n\n// =================================\n// 아래의 코드는 대부분의 컴포넌트가 비슷한 형식으로 가지게 될 예정\n\n// 리덕스 스토어를 가지는 객체\nconst mapStateToProps = ({ authentication }: IRootState) => ({\n  // isAuthenticated: authentication.isAuthenticated,\n  // isAdmin: hasAnyAuthority(authentication.account.authorities, [AUTHORITIES.ADMIN]),\n});\n\n// 리듀스 액션 함수를 가지는 객체\nconst mapDispatchToProps = {\n  // getSession\n};\n\n// 스토어/액션함수 객체의 타입을 정의\n// (상단 컴포넌트의 파라미터에서 받을 인터페이스에서 사용)\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\n// 스토어, 액션함수를 컴포넌트에 연결\nexport default connect(mapStateToProps, mapDispatchToProps)(Test02FireMethodParent);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\exam\\test\\test01.tsx",["1389"],"import React, { useEffect, useState } from \"react\";\nimport Test01ValueScope from './test01-value-scope';\nimport moment from 'moment';\n\nconst Test01 = () => {\n\n  const [nowSecond, setNowSecond] = useState(moment().format('ss'));\n\n  useEffect(() => {\n    // setInterval(updateNowSecond, 3 * 1000);\n  }, []);\n\n  const updateNowSecond = () => {\n    setNowSecond(moment().format('ss'));\n  }\n\n  return (\n    <>\n      <div className=\"contents-area\">\n        <section className=\"contents-header\">\n          <h2>ReRender에 따른 변수 라이프사이클 확인</h2>\n        </section>\n        <div className=\"container\">\n          <Test01ValueScope number={nowSecond} /> <br /><br />\n          <Test01ValueScope number={parseInt(nowSecond) + 10} />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Test01;\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\status\\pdlist\\status-pd-list.tsx",["1390","1391","1392","1393","1394","1395","1396","1397","1398"],"import React, { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { getStatusGisSpdcCumulate, getStatusGisSpdcEvent } from '../../../../views/status/gis/spdc/spdc.reducer';\nimport moment from 'moment';\nimport Pager from '../../pager/Pager';\n\nexport interface IStatusPdList {\n  fromDate: Date;         // 시작일시\n  toDate: Date;           // 종료일시\n  eqipId: string;         // 설비ID\n  snsrId: string;         // 센서ID\n  diagCont: string;       // 진단선택명\n  onClickRow?: Function   // 리스트의 row를 클릭 시 수행할 함수\n  onClick3D?: Function    // 리스트의 3D 버튼을 선택 시 수행할 함수\n  onClickL?: Function    // 리스트의 L 버튼을 선택 시 수행할 함수\n  onClickRT?: Function    // 리스트의 RT 버튼을 선택 시 수행할 함수\n}\nexport interface IStatusPdListProps extends StateProps, DispatchProps, IStatusPdList {}\n\nexport const StatusPdList = forwardRef((props: IStatusPdListProps, ref) => {\n\n  // 부분방전 현황 노출종류(탭)\n  enum ESpdcType { EVENT = 'EVENT', CUMULATE = 'CUMULATE'}\n  const [spdcType, setSpdcType] = useState(ESpdcType.EVENT);\n\n  // 페이징 관련 state\n  const [isPageInfoUpdate, setIsPageInfoUpdate] = useState(false);\n  const [pageInfo, setPageInfo] = useState({\n    activePageEvent: 1,\n    activePageCumulate: 1,\n    itemsCountPerPage: 10,\n  });\n\n  // GIS 부분방전 이벤트 리스트 호출\n  const searchPdEvent = () => {\n    props.getStatusGisSpdcEvent(\n      props.fromDate,\n      props.toDate,\n      props.eqipId,\n      props.snsrId,\n      props.diagCont,\n      pageInfo.activePageEvent,\n      pageInfo.itemsCountPerPage);\n  }\n\n  // 누적데이터 리스트 호출\n  const searchPdCumulate = () => {\n    props.getStatusGisSpdcCumulate(\n      props.fromDate,\n      props.toDate,\n      props.eqipId,\n      props.snsrId,\n      props.diagCont,\n      pageInfo.activePageCumulate,\n      pageInfo.itemsCountPerPage);\n  }\n\n  // 부모 컴포넌트에서 리스트 조회 기능 이용시 사용\n  useImperativeHandle(ref, () => ({\n    search: () => {\n      if (spdcType === ESpdcType.EVENT) {\n        setPageInfo({\n          ...pageInfo,\n          activePageEvent: 1\n        });\n      } else {\n        setPageInfo({\n          ...pageInfo,\n          activePageCumulate: 1\n        });\n      }\n    }\n  }));\n\n  useEffect(() => {\n  }, []);\n\n  // 페이지 노출개수 변경 시 리스트 재조회\n  useEffect(() => {\n    if (isPageInfoUpdate) {\n      if (spdcType === ESpdcType.EVENT) {\n        searchPdEvent();\n      } else {\n        searchPdCumulate();\n      }\n    } else {\n      setIsPageInfoUpdate(true);\n    }\n  }, [pageInfo]);\n\n  return (\n    <>\n      <div className=\"contents-table\">\n        <div className=\"contents-tabmenu gap-down-10\">\n          <a className={'btn_tab left' + (spdcType === ESpdcType.EVENT ? ' on' : '')}\n             onClick={() => setSpdcType(ESpdcType.EVENT)}>이벤트</a>\n          <a className={'btn_tab right' + (spdcType === ESpdcType.CUMULATE ? ' on' : '')}\n             onClick={() => setSpdcType(ESpdcType.CUMULATE)}>누적 데이터</a>\n          <div className=\"obj-select option\">\n            <form className=\"select-cover\">\n              <div className=\"select-box\">\n                <input type=\"checkbox\" id=\"select-indicator06\" />\n                <label className=\"select small\" htmlFor=\"select-indicator06\">{pageInfo.itemsCountPerPage}</label>\n                <div className=\"option small\">\n                  {\n                    [10, 25, 50, 100].map((value, index) =>\n                      <a key={index}\n                         onClick={() => {\n                           setPageInfo({...pageInfo, itemsCountPerPage: value});\n                           $('#select-indicator06').prop('checked', false);\n                         }}\n                      >{value}</a>\n                    )\n                  }\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n        {\n          spdcType === ESpdcType.EVENT ?\n            <>\n              <table className=\"table-db\">\n                <colgroup>\n                  <col style={{width: '70px'}}/>\n                  <col style={{width: '130px'}}/>\n                  <col style={{width: '100px'}}/>\n                  <col style={{width: '100px'}}/>\n                  <col/>\n                  <col/>\n                  <col/>\n                  <col/>\n                </colgroup>\n                <thead>\n                <tr>\n                  <th>&nbsp;</th>\n                  <th>설비명</th>\n                  <th colSpan={2}>센서명</th>\n                  <th>발생일시</th>\n                  <th>진단내용</th>\n                  <th>최대방전(DBM)</th>\n                  <th>평균방전(DBM)</th>\n                </tr>\n                </thead>\n                <tbody>\n                {\n                  !props.spdcEventList.length ?\n                    <tr><td colSpan={8}>조회된 데이터가 없습니다. (시작일시 2020.09 이전 조회 시 데이터 조회 가능)</td></tr>\n                    :\n                    props.spdcEventList.map((event, index) => (\n                      <tr key={index} onClick={() => props.onClickRow && props.onClickRow(event)}>\n                        <td>\n                          <input type=\"checkbox\" className=\"obj-check\" id={`list_${index}`}/>\n                          <label className=\"obj-check-box\" htmlFor={`list_${index}`}></label>\n                        </td>\n                        <td>{event.SNSR_LOC_NM}</td>\n                        <td>{event.SNSR_NM}</td>\n                        <td>\n                          <a className=\"btn grid small tooltip\" onClick={() => {\n                            props.onClick3D && props.onClick3D(event);\n                          }}>3D<span className=\"tooltip-text\">3D PRPD보기</span>\n                          </a>&nbsp;\n                          <a className=\"btn grid small tooltip\" onClick={() => {\n                            props.onClickL && props.onClickL(event);\n                          }}>L<span className=\"tooltip-text\">라이브러리</span>\n                          </a>&nbsp;\n                          <a className=\"btn grid small tooltip\" onClick={() => {\n                            props.onClickRT && props.onClickRT(event);\n                          }}>\n                            RT<span className=\"tooltip-text\">실시간</span>\n                          </a>\n                        </td>\n                        <td>\n                          <span>{moment(event.OCCR_TIME).format('YYYY-MM-DD HH:mm:ss')}</span>\n                        </td>\n                        <td>\n                          <span>{event.DIAG_CONT}</span>\n                        </td>\n                        <td>\n                          <span>{event.MAX_DBM}</span>\n                        </td>\n                        <td>\n                          <span>{event.AVG_DBM}</span>\n                        </td>\n                      </tr>\n                    ))\n                }\n                </tbody>\n              </table>\n              <Pager\n                handlePageChange={(newPage) => setPageInfo({...pageInfo, activePageEvent:newPage})}\n                activePage={pageInfo.activePageEvent}\n                totalItemsCount={props.spdcEventListTotalCount}\n                itemsCountPerPage={pageInfo.itemsCountPerPage}\n              />\n            </>\n            :\n            <>\n              <table className=\"table-db\">\n                <thead>\n                <tr>\n                  <th>설비명</th>\n                  <th>센서명</th>\n                  <th>발생일시</th>\n                  <th>최대방전(DBM)</th>\n                  <th>평균방전(DBM)</th>\n                </tr>\n                </thead>\n                <tbody>\n                {\n                  !props.spdcComulateList.length ?\n                    <tr><td colSpan={8}>조회된 데이터가 없습니다. (시작일시 2020.09 이전 조회 시 데이터 조회 가능)</td></tr>\n                    :\n                    props.spdcComulateList.map((cumulate, index) => (\n                      <tr key={index}>\n                        <td>\n                          <a>{cumulate.SNSR_LOC_NM}</a>\n                        </td>\n                        <td>\n                          <a>{cumulate.SNSR_NM}</a>\n                        </td>\n                        <td>\n                          <span>{cumulate.OCCR_TIME}</span>\n                        </td>\n                        <td>\n                          <span>{cumulate.MAX_DBM}</span>\n                        </td>\n                        <td>\n                          <span>{cumulate.AVG_DBM}</span>\n                        </td>\n                      </tr>\n                    ))\n                }\n                </tbody>\n              </table>\n              <Pager\n                handlePageChange={(newPage) => setPageInfo({...pageInfo, activePageCumulate:newPage})}\n                activePage={pageInfo.activePageCumulate}\n                totalItemsCount={props.spdcComulateListTotalCount}\n                itemsCountPerPage={pageInfo.itemsCountPerPage}\n              />\n            </>\n        }\n      </div>\n    </>\n  );\n});\n\nconst mapStateToProps = ({ gisPdEvent }: IRootState) => ({\n  spdcEventList: gisPdEvent.spdcEventList,\n  spdcEventListTotalCount: gisPdEvent.spdcEventListTotalCount,\n  spdcComulateList: gisPdEvent.spdcComulateList,\n  spdcComulateListTotalCount: gisPdEvent.spdcComulateListTotalCount,\n});\n\nconst mapDispatchToProps = {\n  getStatusGisSpdcEvent,\n  getStatusGisSpdcCumulate,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  null,\n  {\n    getDisplayName: () => 'StatusPdList',\n    forwardRef: true\n  })(StatusPdList);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\chart\\highcharts\\hightchart-line-default1.tsx",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\popup\\modal-status-all-prpd.tsx",["1399","1400","1401"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { getPrpd } from '../../reducers/prpd.reducer';\nimport { PrpdChartImprove } from '../chart/prpd/prpd-chart-improve';\nimport { ISpdcEvent } from '../../model/spdc-event.model';\nimport moment from 'moment';\n\nexport interface ModalStatusAllPrpd {\n  spdcEvent: ISpdcEvent;\n  closeCallback: Function;\n}\nexport interface IModalStatusAllPrpdProps extends StateProps, DispatchProps, ModalStatusAllPrpd {}\n\nexport const ModalStatusAllPrpd = (props: IModalStatusAllPrpdProps) => {\n\n  useEffect(() => {\n    props.getPrpd(props.spdcEvent?.ID ? props.spdcEvent.ID : props.spdcEvent.EVNT_ID);\n  }, []);\n\n  return (\n    <>\n      <div className=\"layer-wrap w600 notice-alarm-info round\" data-layer=\"notice-info\">\n        <div className=\"popup-wrapper\">\n          <div className=\"popup-container\">\n            <div className=\"title-area mint\">\n              <h2>{props.spdcEvent.SNSR_NM} - {moment(props.spdcEvent.OCCR_TIME).format('YYYY-MM-DD HH:mm:ss')}</h2>\n              <div className=\"side-btn\">\n                <div className=\"btn-close\" onClick={() => props.closeCallback()}><i className=\"icon-close\"></i></div>\n              </div>\n            </div>\n            <div className=\"popup-contents\" style={{textAlign: 'center'}}>\n              <PrpdChartImprove width={400} height={400} chart_width={350} chart_height={350} chartData={props.prpd} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ prpd }: IRootState) => ({\n  prpd: prpd.prpd,\n  // isAuthenticated: authentication.isAuthenticated,\n  // isAdmin: hasAnyAuthority(authentication.account.authorities, [AUTHORITIES.ADMIN]),\n});\n\nconst mapDispatchToProps = {\n  getPrpd\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalStatusAllPrpd);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\exam\\language\\value-scope\\value-scope.tsx",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\exam\\language\\class-args\\class-args.tsx",["1402","1403"],"import { useState } from \"react\";\r\n\r\nconst ClassScope = ( props : ClassScopeProps ) => {\r\n\tconst data : ScopeTest = props.scopeTest;\r\n\tconst [count, setCount] = useState(0);\r\n\r\n\tconst addValue = () => {\r\n\t\tdata.count++;\r\n\t}\r\n\r\n\tconst addState = () => {\r\n\t\tsetCount(count+1);\r\n\t}\r\n\r\n\tconst print = () => {\r\n\t\tconsole.log(`클릭 호출: count[${count}] data.count[${data.count}]`);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div>\r\n\t\t\t\t<button onClick={addValue}>클릭 일반</button>\r\n\t\t\t\t<button onClick={addState}>클릭 스테이트</button>\r\n\t\t\t\t<button onClick={print}>클릭 출력</button>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\ninterface ClassScopeProps\r\n{\r\n\tscopeTest : ScopeTest,\r\n\tchildren? : React.ReactNode,\r\n}\r\nclass ScopeTest\r\n{\r\n\tcount : number = 0;\r\n}\r\n\r\nexport const ClassArgs = () => {\r\n\tconst [scope1, setScope1] = useState(new ScopeTest());\r\n\tconst [scope2, setScope2] = useState(new ScopeTest());\r\n\tconst [count, setCount] = useState(0);\r\n\r\n\tconst updateCount = () => {\r\n\t\tsetCount(count+1);\r\n\t\tconsole.log(`ClassArgs 갱신 : count[${count}]`);\r\n\t}\r\n\r\n\tconst printStatus = () => {\r\n\t\tconsole.log(`printStatus in ClassArgs`);\r\n\t\tconsole.log(count);\r\n\t\tconsole.log(scope1);\r\n\t\tconsole.log(scope2);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div style={{height:\"50px\"}}></div>\r\n\t\t\t<button onClick={updateCount}>부모 갱신</button>\r\n\t\t\t<button onClick={printStatus}>scope 보기</button>\r\n\r\n\t\t\t<ClassScope scopeTest={scope1}></ClassScope>\r\n\t\t\t<ClassScope scopeTest={scope2}></ClassScope>\r\n\t\t</>\r\n\t);\r\n}","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\popup\\pdlibrary\\modal-onlylibrary.tsx",["1404","1405","1406","1407","1408","1409","1410","1411","1412","1413","1414","1415","1416","1417","1418"],"import { useEffect, useRef, useState } from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"shared/reducers\";\nimport { ISelectBoxReturn, KeyValuePair, SelectBox } from \"shared/component/control/select-box\";\nimport { getLibPrpd, getLibList,\taddLib,\tdelLib, pdLibRowValue, IPdLibList } from './pdlibrary.reducer';\nimport { PrpdChartImprove } from \"shared/component/chart/prpd/prpd-chart-improve\";\n\nexport interface IModalOnlyLibraryArgs {\n\tpdType: string,\t\t\t\t\t// GIS / MTR\n  close: Function,        // 팝업을 닫았을 때 호출할 함수\n}\n\nexport interface IModalOnlyLibraryProps extends StateProps, DispatchProps, IModalOnlyLibraryArgs {}\n\nconst OnlyLibaray = ( props : IModalOnlyLibraryProps ) =>\n{\n\tuseEffect(() => {\n\t\tprops.getLibList(cmpntState.eventType, props.pdType);\n\t}, [])\n\n\tuseEffect(() => {\n\t\t// if( props.libList.length == 0 )\n\t\t// \treturn;\n\n\t\t// console.log(props.libList);\n\t}, [props.libList])\n\n\tuseEffect(() => {\n\t\tif( !props.libDel )\n\t\t\treturn;\n\n\t\tsetCmpntState({\n\t\t\t...cmpntState,\n\t\t\tlibRow : pdLibRowValue, \t// 선택된 라이브러리 정보 초기화\n\t\t});\n\n\t\tprops.getLibList(cmpntState.eventType, props.pdType);\t\t// select box 완성시 수정\n\n\t}, [props.libDel, props.libAdd])\n\n\tuseEffect(() => {\n\n\t\t// console.log('PRPD 수신');\n\t\t// console.log(props.libPrpd)\n\n\t}, [props.libPrpd])\n\n\tconst libStoreTypeRef = useRef(null);\n\n\tconst libTypeList = () => {\n\t\tconst list = new Array<KeyValuePair>();\n\t\tlist.push({ key: 'C', value: 'Corona'});\n\t\tlist.push({ key: 'F', value: 'Floating'});\n\t\tlist.push({ key: 'P', value: 'Particle'});\n\t\tlist.push({ key: 'Void', value: 'Void'});\n\t\tlist.push({ key: 'Noise', value: 'Noise'});\n\t\n\t\treturn list;\n\t}\n\n\tconst libStoreList = () => {\n\t\tconst list = new Array<KeyValuePair>();\n\t\tlist.push({ key: '1', value: '전체'});\n\t\tlist.push({ key: '2', value: '학습'});\n\t\tlist.push({ key: '3', value: '사용자'});\n\t\n\t\treturn list;\n\t}\n\n\tconst callbackEventType = ( args : ISelectBoxReturn ) => {\n\t\tsetCmpntState({\n\t\t\t...cmpntState,\n\t\t\teventType : args.selected, \t// 선택된 라이브러리 타입 저장\n\t\t});\n\n\t\t// console.log(`이벤트의 타입 선택[${args.selected}]`);\n\t}\n\t\n\n\tconst callbackLibType = ( args : ISelectBoxReturn ) => {\n\t\tsetCmpntState({\n\t\t\t...cmpntState,\n\t\t\tlibType : args.selected, \t// 선택된 라이브러리 타입 저장\n\t\t});\n\n\t\t// console.log(`라이브러리 타입 선택[${args.selected}]`);\n\t}\n\n\t// ref\n\tconst refPrpd = useRef(null);\n\tconst refLibName = useRef(null);\n\tconst refLibDesc = useRef(null);\n\t\n\t\t// 컴포넌트 정보\n\t\tconst [ cmpntState, setCmpntState] = useState({\n\t\t\tseconds: 0,\t\t\t\t\t// 표시 시간(초)\n\t\n\t\t\t// 추가할 사용자 라이브러리\n\t\t\teventType: 'C',\t// 타입\n\t\n\t\t\t// 저장된 라이브러리 목록\n\t\t\tlibType: 'C',\t// 타입\n\t\t\tlibRow : pdLibRowValue, \t// 선택된 라이브러리 정보\n\t\t});\n\t\n\t\tconst changeState = ( type : string, value : any ) => {\n\t\n\t\t\tif( type != 'libList' )\n\t\t\t{\n\t\t\t\t// 확인용\n\t\t\t\tconsole.log(`changeState type[${type}] value[${value}]`);\n\t\t\t}\n\t\n\t\t\tswitch( type )\n\t\t\t{\n\t\t\t\tcase \"seconds\" :\n\t\t\t\t\tsetCmpntState({\n\t\t\t\t\t\t...cmpntState,\n\t\t\t\t\t\tseconds: value,\n\t\t\t\t\t})\n\t\t\t\t\tdocument.getElementById('lib-timer-value').innerHTML=String(value);\t\t// 시간 표시 변경\n\t\t\t\t\t// setRunningState(false);\t\t\t\t\t\t\t\t// 슬라이더 일 때만 변경해야\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase \"eventType\" :\n\t\t\t\t\tsetCmpntState({\n\t\t\t\t\t\t...cmpntState,\n\t\t\t\t\t\teventType: value,\n\t\t\t\t\t})\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"libType\" :\n\t\t\t\t\tsetCmpntState({\n\t\t\t\t\t\t...cmpntState,\n\t\t\t\t\t\tlibType: value,\n\t\t\t\t\t})\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"libId\" :\n\t\t\t\t\tsetCmpntState({\n\t\t\t\t\t\t...cmpntState,\n\t\t\t\t\t\tlibRow: value,\n\t\t\t\t\t})\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\n\t\t// 라이브러리 목록 조회\n\t\tconst clickSearch = () => {\n\t\t\tconsole.log(libStoreTypeRef.current.selected());\n\t\t\tprops.getLibList(cmpntState.libType, props.pdType);\n\t\t}\n\n\t// 라이브러리 삭제\n\tconst clickDelete = () => {\n\t\tif( cmpntState.libRow.ID == '0' )\n\t\t\treturn;\n\t\t\n\t\t// if( cmpntState.libRow.LIBRARY_TYPE != '3' )\t// 사용자 라이브러리가 아니면 삭제 불가\n\t\t// \treturn;\n\n\t\tconsole.log(`del [${cmpntState.libRow.ID}]`);\n\n\t\tprops.delLib(cmpntState.libRow.ID);\n\t}\n\n\t\tconst selectedLibList = ( row : IPdLibList) => {\n\t\n\t\t\tchangeState( 'libId', row );\n\t\t\tprops.getLibPrpd(row.ID);\n\t\n\t\t} \n\n  return (\n    <>\n      <div className=\"layer-wrap pdLibrary\" data-layer=\"pdLibrary\" style={{display: 'none'}}>\n        <div className=\"full-popup\">\n          <aside className=\"lib left\">\n            <div className=\"tit\">\n              <h2>라이브러리</h2>\n            </div>\n            <div className=\"left index\">\n            </div>\n          </aside>\n          <aside className=\"lib contents pd-lib\">\n            <div className=\"event controller\">\n              <a href=\"#\" className=\"btn-close\" onClick={props.close()}><i className=\"icon-close\"></i></a>\n            </div>\n            <div className=\"graph wrap\">\n              <div className=\"offset controller gap-up-20 width-10\">\n                <div className=\"input number rt\">\n                  <div className=\"selector\">\n                    <span className=\"tit\">방전타입</span>\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<SelectBox defaultValue={cmpntState.libType}\n\t\t\t\t\t\t\t\t\t\t\t\t\telementName=\"libTypelist\" \n\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"타입선택\" \n\t\t\t\t\t\t\t\t\t\t\t\t\toptions={libTypeList()}\n\t\t\t\t\t\t\t\t\t\t\t\t\tisLibraryMode={true}\n\t\t\t\t\t\t\t\t\t\t\t\t\tcallback={callbackLibType}/>\n\t\t\t\t\t\t\t\t\t\t</div>\n                  </div>\n\t\t\t\t\t\t\t\t\t<div className=\"selector gap-up-30\">\n                    <span className=\"tit\">라이브러리 타입</span>\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<SelectBox \n\t\t\t\t\t\t\t\t\t\t\t\tref={libStoreTypeRef}\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tdefaultValue={\"1\"}\n\t\t\t\t\t\t\t\t\t\t\t\telementName=\"libStoreList\" \n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"라이브러리 타입\" \n\t\t\t\t\t\t\t\t\t\t\t\toptions={libStoreList()}\n\t\t\t\t\t\t\t\t\t\t\t\tisLibraryMode={true}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</div>\n                  </div>\n                  <button className=\"btn lib gap-up-30\" onClick={clickSearch}><span>조회</span></button>\n                  <button className=\"btn lib\" onClick={clickDelete}><span>삭제</span></button>\n                  {/* <button className=\"btn lib call-popup\" data-layer=\"pd-event\" onClick={click3dPrps}><span>3D PRPS</span></button> */}\n                </div>\n                <div className=\"graph list\">\n                  <div className=\"data-list height-500px\">\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tprops.libList.length == 0 ? null :\n\t\t\t\t\t\t\t\t\t\t\t\tprops.libList.filter( (row) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tswitch( libStoreTypeRef.current?.selected() )\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase \"1\": return true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase \"2\": return row.LIBRARY_TYPE != \"3\"; \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase \"3\": return row.LIBRARY_TYPE == \"3\"; \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t.map( (row) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<p key={\"liblist_\"+row.ID} \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={(row.LIBRARY_TYPE==\"3\" ? \"user\" : \"edu\") + (row.ID == cmpntState.libRow.ID ? \" active\" : \"\")}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => selectedLibList(row)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{row.LBRY_NM}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t))\n                    }\n                    {/* p className에 active 추가하면 하이라이트 효과 나옵니다. */}\n                    {/* <p className=\"active\">00_02_20171228110600.dat</p> */}\n                  </div>\n                </div>\n                <div className=\"graph chart-2d result\">\n                  <div className=\"graph-container height-400px\" >\n\t\t\t\t\t\t\t\t\t\t<PrpdChartImprove\n\t\t\t\t\t\t\t\t\t\t\tchartData={props.libPrpd}\n                      // eventId={Number(cmpntState.libId)}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </aside>\n        </div>\n      </div>\n    </>\n\n  );\n}\n\nconst mapStateToProps = ({ pdLibData, }: IRootState) => ({\n\tlibPrpd: pdLibData.prpd,\n\tlibList: pdLibData.libList,\n\tlibAdd: pdLibData.ackAdd,\n\tlibDel: pdLibData.ackDel,\n});\n\nconst mapDispatchToProps = {\n\tgetLibPrpd,\n\tgetLibList,\n\taddLib,\n\tdelLib,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport const ModalOnlyLibaray = connect(mapStateToProps, mapDispatchToProps)(OnlyLibaray);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\popup\\realtime\\realtime-component.tsx",["1419","1420","1421","1422","1423","1424","1425","1426","1427","1428"],"import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { IRootState } from \"shared/reducers\";\nimport { getCommonEquipmentList, getCommonSensorList } from 'shared/reducers/substation';\nimport { connect } from 'react-redux';\nimport { PrpdChartComponent } from \"shared/component/chart/prpd/prpd-chart-component\";\nimport { PrpsChartComponent } from \"shared/component/chart/prps/prps-chart-component\";\nimport SelectBox from '../../control/select-box';\nimport { PrpsFile } from 'shared/component/file/prpsfile';\n\nexport const RealtimeComponent = ( props : RealtimeComponentProps ) => {\n\n  const [selectedEqipId, setSelectedEqipId] = useState('0');  // 선택된 설비ID\n  const [selectedSnsrId, setSelectedSnsrId] = useState('0');  // 선택된 센서ID\n\n\tconst prpsFile = new PrpsFile(128);\n\t\n  useEffect(() => { // 처음 화면 로딩 시 첫번째 설비가 자동으로 선택되도록..\n    if (props.equipmentList.length) {\n      setSelectedEqipId(props.equipmentList[0].ID);\n    }\n  }, [props.equipmentList]);\n\n  useEffect(() => { // 설비ID가 선택된경우 해당 설비에 속한 첫번째 센서ID로 자동셋팅\n    if (selectedEqipId != '0') {\n      let sensorListForEqip =\n        props.allSensorList\n          .filter(sensor => { // 선택된 설비에 해당하는 센서들만 필터링\n            return sensor.EQIP_ID == selectedEqipId;\n          });\n      setSelectedSnsrId(sensorListForEqip.length ? sensorListForEqip[0].ID : '');\n    }\n  }, [selectedEqipId]);\n\n\tconst [ cmpntState, setCmpntState] = useState({\n\t\teqipId: '0',\n\t\tsnsrId: '0',\n\t\toffset: 0,\n\t\tphase: 0,\n\t\tis3d: true,\n\t});\n\n\tconst changeState = ( type : string, value : any ) => {\n\n\t\tconsole.log(`changeState type[${type}] value[${value}]`);\n\t\tswitch( type )\n\t\t{\n\t\t\tcase \"eqipId\" :\n\t\t\t\tsetCmpntState({\n\t\t\t\t\t...cmpntState,\n\t\t\t\t\teqipId: value,\n\t\t\t\t})\n\t\t\t\tbreak;\n\t\t\tcase \"snsrId\" :\n\t\t\t\tsetCmpntState({\n\t\t\t\t\t...cmpntState,\n\t\t\t\t\tsnsrId: value,\n\t\t\t\t})\n\t\t\t\tbreak;\n\t\t\tcase \"offset\" :\n\t\t\t\tsetCmpntState({\n\t\t\t\t\t...cmpntState,\n\t\t\t\t\toffset: value,\n\t\t\t\t})\n\t\t\t\tbreak;\n\t\t\tcase \"phase\" :\n\t\t\t\tsetCmpntState({\n\t\t\t\t\t...cmpntState,\n\t\t\t\t\tphase: value,\n\t\t\t\t})\n\t\t\t\tbreak;\n\t\t\tcase \"is3d\" :\n\t\t\t\tsetCmpntState({\n\t\t\t\t\t...cmpntState,\n\t\t\t\t\tis3d: value,\n\t\t\t\t})\n\t\t\t\tbreak;\n\t\t}\n\n\t}\n\n\tconst refPrpd = useRef(null);\n\n\t// event PRPD를 그리는 callback\n\tconst initPrpd = ( accTime : number ) => {\n\t\t// console.log(`updatePrpd : ${accTime}`);\n\t\t// refPrpd.current?.initData({ accTime: 0, prpsData : props.prpsFile.getPdData()});\n\t}\n\n\tconst updatePrpd = ( accTime : number ) => {\n\t\t// console.log(`updatePrpd : ${accTime}`);\n\t\trefPrpd.current?.updateFrame({ accTime : accTime });\n\t}\n\n\tconst eventPrpdProps =\n\t{\n\t\tchartName : 'event_' + props.no,\n\t};\n\n\t// radio Box용 더미\n\tconst dummyChange = () => {}\n\n\treturn(\n\t\t<>\n\t\t<div className=\"graph wrap rt gap-right-30\">\n\t\t\t<div className=\"offset controller\">\n\t\t\t\t<div className=\"input number\">\n\t\t\t\t\t<div className=\"selector\">\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li className=\"width-4\">\n\t\t\t\t\t\t\t\t<span className=\"tit\">설비선택</span>\n                <SelectBox defaultValue={selectedEqipId} elementName={`equipmentList_${props.no}`} placeholder=\"설비\" isRealtimeMode={true}\n                           options={[\n                             ...props.equipmentList.map(eqip => {\n                               return {key: eqip.ID, value: eqip.EQIP_NM};\n                             })\n                           ]}\n                           callback={(args) => {\n                             setSelectedEqipId(args.selected);\n                             setSelectedSnsrId('0');\n                           }} />\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li className=\"width-6\">\n\t\t\t\t\t\t\t\t<span className=\"tit\">센서선택</span>\n                <SelectBox defaultValue={selectedSnsrId} elementName={`snsrList_${props.no}`} placeholder=\"센서\" isRealtimeMode={true}\n                           options={[\n                             ...props.allSensorList\n                               .filter(sensor => {  // 설비가 선택되지 않으면 모두 리턴, 선택되면 하위의 센서만 리턴\n                                 return selectedEqipId == '0' ? true : sensor.EQIP_ID == selectedEqipId;\n                               })\n                               .map(sensor => {\n                                 return {key: sensor.ID, value: sensor.SNSR_NM};\n                               })\n                           ]}\n                           callback={(args) => setSelectedSnsrId(args.selected)} />\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\n\t\t\t\t\t</div>\n\t\t\t\t\t<label className=\"text-box\">\n\t\t\t\t\t\t<span>Offset</span>\n\t\t\t\t\t\t<input type=\"text\" name=\"offset\" value={cmpntState.offset} onChange={({ target : target }) => { changeState(\"offset\", target.value); }} />\n\t\t\t\t\t</label>&nbsp;\n\t\t\t\t\t<label className=\"text-box gap-right-20\">\n\t\t\t\t\t\t<span>Phase</span>\n\t\t\t\t\t\t<input type=\"text\" name=\"phase\" value={cmpntState.phase} onChange={({ target : target }) => { changeState(\"phase\", target.value); }} />\n\t\t\t\t\t</label>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input type=\"radio\" name={\"equip_\" + props.no} checked={cmpntState.is3d} onClick={() => { changeState(\"is3d\", true); }} onChange={dummyChange} />\n\t\t\t\t\t\t<span>3D</span>\n\t\t\t\t\t</label>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input type=\"radio\" name={\"equip_\" + props.no} checked={!cmpntState.is3d} onClick={() => { changeState(\"is3d\", false); }} onChange={dummyChange} />\n\t\t\t\t\t\t<span>2D</span>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"graph chart-3d\">\n\t\t\t\t\t<div className=\"graph-container\">\n\t\t\t\t\t\t<div className=\"width-10\" >\n\t\t\t\t\t\t\t<PrpsChartComponent\n\t\t\t\t\t\t\t\tisRunning={props.isRunning}\n\t\t\t\t\t\t\t\tis3d={cmpntState.is3d}\n\t\t\t\t\t\t\t\t// prpsStatus={prpsStatus}\n\t\t\t\t\t\t\t\tcallbackInitData={initPrpd}\n\t\t\t\t\t\t\t\tcallbackUpdateFrame={updatePrpd}\n\t\t\t\t\t\t\t\tpdFile={prpsFile}\n\t\t\t\t\t\t\t\trtFile={[]}\t\t\t// 임시 빈데이터\n\t\t\t\t\t\t\t\tcameraZoom={1.5}\n\t\t\t\t\t\t\t\t// pdFile={props.prpsFile}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t</PrpsChartComponent>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"graph chart-2d\">\n\t\t\t\t\t<div className=\"graph-container\">\n\t\t\t\t\t\t<div className=\"width-10\" >\n\t\t\t\t\t\t\t<PrpdChartComponent\n\t\t\t\t\t\t\t\tref={refPrpd}\n\t\t\t\t\t\t\t\t{...eventPrpdProps}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t</PrpdChartComponent>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t</>\n\t);\n}\n\nexport interface RealtimeComponentProps extends StateProps, DispatchProps\n{\n\tchildren? : React.ReactNode,\n\tno : string,\t\t\t\t\t\t// 컴포넌트 번호\n\tisRunning? : boolean,\t\t\t\t// 동작 여부\n}\n\nconst mapStateToProps = ({ substation }: IRootState) => ({\n  equipmentList: substation.equipmentList,\n  allSensorList: substation.allSensorList,\n});\n\nconst mapDispatchToProps = {\n\t// getCommonEquipmentList,\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\tmapStateToProps, mapDispatchToProps )(RealtimeComponent);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\chart\\prpd\\prpd-colors.tsx",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\user\\user-modal-add.tsx",["1429","1430","1431","1432"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport SelectBox from '../../../shared/component/control/select-box';\nimport { setSettingUserAdd } from './user.reducer';\n\nexport interface UserModalAdd {\n  closeCallback: Function;\n  okCallback: Function;\n}\nexport interface IUserModalAddProps extends StateProps, DispatchProps, UserModalAdd {}\n\nexport const UserModalAdd = (props: IUserModalAddProps) => {\n\n  const [userInfo, setUserInfo] = useState({\n    userId: '',\n    pass: '',\n    userNm: '',\n    org: '',\n    phone: '',\n    authLevel: '4',\n  });\n\n  const userAdd = async () => {\n    await props.setSettingUserAdd(\n      userInfo.userId,\n      userInfo.pass,\n      userInfo.userNm,\n      userInfo.org,\n      userInfo.phone,\n      userInfo.authLevel,\n    );\n    await props.okCallback();\n  }\n\n  useEffect(() => {\n  }, []);\n\n  return (\n    <>\n      <div className=\"layer-wrap input-form w400 round\">\n        <div className=\"popup-wrapper\">\n          <div className=\"popup-container \">\n            <div className=\"title-area mint\">\n              <h2>사용자 추가</h2>\n              <div className=\"side-btn\">\n                <a className=\"btn-close\" onClick={() => props.closeCallback()}><i className=\"icon-close\"></i></a>\n              </div>\n            </div>\n            <div className=\"popup-contents none-padding\">\n              <div className=\"input-area gap-down-30 gap-up-30\">\n                <input type=\"text\" placeholder=\"사용자 ID(최대 16자리)\"\n                       value={userInfo.userId} onChange={(e) => setUserInfo({...userInfo, userId: e.target.value})}/>\n                <input type=\"password\" placeholder=\"비밀번호(최대 32자리)\"\n                       value={userInfo.pass} onChange={(e) => setUserInfo({...userInfo, pass: e.target.value})}/>\n                <input type=\"text\" placeholder=\"사용자명(최대 20자리)\"\n                       value={userInfo.userNm} onChange={(e) => setUserInfo({...userInfo, userNm: e.target.value})}/>\n                <SelectBox defaultValue={userInfo.authLevel} elementName=\"authLevel\" placeholder=\"권한\"\n                           options={[\n                             {key: '4', value: '사용자'},\n                             {key: '3', value: '감시자'},\n                             {key: '2', value: '운영자'},\n                             // {key: '1', value: '관리자'}\n                           ]}\n                           callback={(args) => setUserInfo({...userInfo, authLevel: args.selected})} />\n                <input type=\"text\" placeholder=\"기관명\" style={{marginTop: '10px'}}\n                       value={userInfo.org} onChange={(e) => setUserInfo({...userInfo, org: e.target.value})}/>\n                <input type=\"text\" placeholder=\"전화번호\"\n                       value={userInfo.phone} onChange={(e) => setUserInfo({...userInfo, phone: e.target.value})}/>\n              </div>\n              <div className=\"submit-area\">\n                <a className=\"btn-close\" onClick={() => props.closeCallback()}>취소</a>\n                <a onClick={userAdd}>완료</a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ authentication }: IRootState) => ({\n  // isAuthenticated: authentication.isAuthenticated,\n  // isAdmin: hasAnyAuthority(authentication.account.authorities, [AUTHORITIES.ADMIN]),\n});\n\nconst mapDispatchToProps = {\n  setSettingUserAdd\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserModalAdd);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\user\\user-modal-del.tsx",["1433","1434","1435","1436"],"import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport { IUser } from '../../../shared/model/user.model';\nimport { setSettingUserDel } from './user.reducer';\n\nexport interface UserModalDel {\n  user: IUser;\n  closeCallback: Function;\n  okCallback: Function;\n}\nexport interface IUserModalDelProps extends StateProps, DispatchProps,UserModalDel {}\n\nexport const UserModalDel = (props: IUserModalDelProps) => {\n\n  useEffect(() => {\n  }, []);\n\n  const userDel = async () => {\n    await props.setSettingUserDel(props.user.USER_ID);\n    await props.okCallback();\n  }\n\n  return (\n    <>\n      <div className=\"layer-wrap w400 round confirm\">\n        <div className=\"popup-wrapper\">\n          <div className=\"popup-container \">\n            <div className=\"title-area mint\">\n              <h2>사용자 삭제</h2>\n              <div className=\"side-btn\">\n                <a className=\"btn-close\" onClick={() => props.closeCallback()}><i className=\"icon-close\"></i></a>\n              </div>\n            </div>\n            <div className=\"popup-contents none-padding\">\n              <div className=\"input-area gap-down-60 gap-up-30\">\n                <p>선택한 {props.user.USER_ID} 사용자를 정말로 삭제하시겠습니까?</p>\n              </div>\n              <div className=\"submit-area\">\n                <a className=\"btn-close\" onClick={() => props.closeCallback()}>취소</a>\n                <a onClick={userDel}>삭제</a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ authentication }: IRootState) => ({\n  // isAuthenticated: authentication.isAuthenticated,\n  // isAdmin: hasAnyAuthority(authentication.account.authorities, [AUTHORITIES.ADMIN]),\n});\n\nconst mapDispatchToProps = {\n  setSettingUserDel\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserModalDel);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\settings\\user\\user-modal-update.tsx",["1437","1438","1439","1440"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IRootState } from 'shared/reducers';\nimport SelectBox from '../../../shared/component/control/select-box';\nimport { setSettingUserUpdate } from './user.reducer';\nimport { IUser } from '../../../shared/model/user.model';\n\nexport interface UserModalUpdate {\n  user: IUser;\n  closeCallback: Function;\n  okCallback: Function;\n}\nexport interface IUserModalUpdateProps extends StateProps, DispatchProps, UserModalUpdate {}\n\nexport const UserModalUpdate = (props: IUserModalUpdateProps) => {\n\n  const [userInfo, setUserInfo] = useState({\n    userId: props.user.USER_ID,\n    pass: props.user.USER_PW,\n    userNm: props.user.USER_NM,\n    org: props.user.ORGA_NM,\n    phone: props.user.PHON_NO,\n    authLevel: String(props.user.AUTH_LVL),\n  });\n\n  const userUpdate = async () => {\n    await props.setSettingUserUpdate(\n      userInfo.userId,\n      userInfo.pass,\n      userInfo.userNm,\n      userInfo.org,\n      userInfo.phone,\n      userInfo.authLevel,\n    );\n    await props.okCallback();\n  }\n\n  useEffect(() => {\n  }, []);\n\n  return (\n    <>\n      <div className=\"layer-wrap input-form w400 round\">\n        <div className=\"popup-wrapper\">\n          <div className=\"popup-container \">\n            <div className=\"title-area mint\">\n              <h2>사용자 수정</h2>\n              <div className=\"side-btn\">\n                <a className=\"btn-close\" onClick={() => props.closeCallback()}><i className=\"icon-close\"></i></a>\n              </div>\n            </div>\n            <div className=\"popup-contents none-padding\">\n              <div className=\"input-area gap-down-30 gap-up-30\">\n                <input type=\"text\" placeholder=\"사용자 ID(최대 16자리)\"\n                       value={userInfo.userId} readOnly/>\n                <input type=\"password\" placeholder=\"비밀번호(최대 32자리)\"\n                       value={userInfo.pass} onChange={(e) => setUserInfo({...userInfo, pass: e.target.value})}/>\n                <input type=\"text\" placeholder=\"사용자명(최대 20자리)\"\n                       value={userInfo.userNm} onChange={(e) => setUserInfo({...userInfo, userNm: e.target.value})}/>\n                <SelectBox defaultValue={userInfo.authLevel} elementName=\"authLevel\" placeholder=\"권한\"\n                           options={[\n                             {key: '4', value: '사용자'},\n                             {key: '3', value: '감시자'},\n                             {key: '2', value: '운영자'},\n                             // {key: '1', value: '관리자'}\n                           ]}\n                           callback={(args) => setUserInfo({...userInfo, authLevel: args.selected})} />\n                <input type=\"text\" placeholder=\"기관명\" style={{marginTop: '10px'}}\n                       value={userInfo.org} onChange={(e) => setUserInfo({...userInfo, org: e.target.value})}/>\n                <input type=\"text\" placeholder=\"전화번호\"\n                       value={userInfo.phone} onChange={(e) => setUserInfo({...userInfo, phone: e.target.value})}/>\n              </div>\n              <div className=\"submit-area\">\n                <a className=\"btn-close\" onClick={() => props.closeCallback()}>취소</a>\n                <a onClick={userUpdate}>완료</a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = ({ authentication }: IRootState) => ({\n  // isAuthenticated: authentication.isAuthenticated,\n  // isAdmin: hasAnyAuthority(authentication.account.authorities, [AUTHORITIES.ADMIN]),\n});\n\nconst mapDispatchToProps = {\n  setSettingUserUpdate\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserModalUpdate);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\exam\\test\\test02-fire-method-child.tsx",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\exam\\charts\\prps\\index.tsx",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\chart\\prpd\\prpd-chart-component.tsx",["1441","1442","1443","1444","1445","1446","1447"],"import { nextTick } from \"process\";\r\nimport React from \"react\";\r\nimport { prpdColors } from \"./prpd-colors\";\r\n\r\nexport class PrpdChartComponent extends React.Component{\r\n\r\n\tprivate fr : number = 0;\r\n\r\n\tprivate width : number = 400;\r\n\tprivate height : number = 330;\r\n\tprivate chart_width : number = 320;\r\n\tprivate chart_height : number = 317.5;\r\n\tprivate sampling : number = 256;\r\n\tprivate isLegend : boolean = true;\r\n\r\n\tprivate legendRef = React.createRef<SVGGElement>();\r\n\tprivate chartRef = React.createRef<SVGGElement>();\r\n\r\n\t// PRPD 차트 그리는 용도\r\n\tprivate prpdData : any;\t\t\t\t\t// PRPD 색상 계산\r\n\tprivate prpsSecArr2 = new Array(60);\r\n\tprivate accTime = 0;\r\n\tprivate prpdIndex = 0;\r\n\tprivate chartName : string = String(Math.random());\r\n\tprivate yAxisType : string = '';\r\n\tpublic isInit : boolean = false;\r\n\r\n\tprivate textColor = \"#000000\";\r\n\r\n\tconstructor( props )\r\n\t{\r\n\t\tsuper( props );\r\n\r\n\t\tthis.isInit = false;\r\n\r\n\t\t// 초기값\r\n\t\tthis.width = props.width ?? 400;\r\n\t\tthis.height = props.height ?? 330;\r\n\t\tthis.chart_width = props.chart_width ?? 320;\r\n\t\tthis.chart_height = props.chart_height ?? 317.5;\r\n\t\tthis.sampling = props.sampling ?? 256;\r\n\t\tthis.isLegend = props.isLegend ?? true;\r\n\t\tthis.yAxisType = props.yAxisType ?? '';\r\n\r\n\t\tfor (let i = 0; i < 60; i++) {\r\n\t\t\tthis.prpsSecArr2[i] = new Array(this.sampling * 60);\r\n\t\t}\r\n\r\n\t\tthis.prpdData = new Array(this.sampling * 256);\r\n\t\tfor( let i = 0; i < this.sampling * 256; i++ )\r\n\t\t{\r\n\t\t\tthis.prpdData[i] = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tinitData( data )\r\n\t{\r\n\t\t// console.log(`PRPD Init Data`);\r\n\t\tthis.accTime = data.accTime;\r\n\t\tthis.prpdIndex = 0;\r\n\t\tthis.set1minData( data.prpsData );\r\n\r\n\t\tthis.isInit = true;\r\n\t}\r\n\r\n\tclearPrpd()\r\n\t{\r\n\t\twhile( this.chartRef.current?.hasChildNodes() )\r\n\t\t{\r\n\t\t\tthis.chartRef.current?.removeChild( this.chartRef.current?.firstChild);\r\n\t\t}\r\n\r\n\t\tthis.accTime = 0;\r\n\r\n\t\t// PRPD 그래프 크기\r\n\t\tfor( let i = 0; i < this.sampling * 256; i++ )\r\n\t\t{\r\n\t\t\tthis.prpdData[i] = 0;\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < 60; i++) {\r\n\t\t\tfor (let j = 0; j < this.sampling * 256; j++) {\r\n\t\t\t\tthis.prpsSecArr2[i][j] = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.isInit = false;\r\n\t}\r\n\r\n\tclearPrpdData()\r\n\t{\r\n\t\twhile( this.chartRef.current?.hasChildNodes() )\r\n\t\t{\r\n\t\t\tthis.chartRef.current?.removeChild( this.chartRef.current?.firstChild);\r\n\t\t}\r\n\r\n\t\tfor( let i = 0; i < this.sampling * 256; i++ )\r\n\t\t{\r\n\t\t\tthis.prpdData[i] = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tshouldComponentUpdate(nextProps, nextState)\r\n\t{\r\n\t\tthis.yAxisType = nextProps.yAxisType ?? '';\r\n\t\treturn true;\r\n\t}\r\n\r\n\tcomponentDidMount()\r\n\t{\r\n\t\t// 범례그리기\r\n\t\tthis.setLegendColor();\r\n\t}\r\n\r\n\tprivate setLegendColor = () => {\r\n\t\t// console.log('drawLegend');\r\n\t\tconst svgns = \"http://www.w3.org/2000/svg\";\r\n\t\tfor (let i = 1; i < 100; i++) {\r\n\t\t\tlet regendRect = document.createElementNS(svgns, 'rect');\r\n\t\t\tregendRect.setAttributeNS(null, 'x', '0');\r\n\t\t\tregendRect.setAttributeNS(null, 'y', String(i * (this.chart_height / 100)));\r\n\t\t\tregendRect.setAttributeNS(null, 'height', String((this.chart_height / 100)));\r\n\t\t\tregendRect.setAttributeNS(null, 'width', '8');\r\n\r\n\t\t\tlet color = (\"000000\" + prpdColors(100 - i).toString(16)).substr(-6);\r\n\t\t\tregendRect.setAttributeNS(null, 'fill', '#' + color);\r\n\t\t\tthis.legendRef.current?.appendChild(regendRect);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate set1minData(prpsData) \r\n\t{\r\n\t\tif( prpsData == null )\r\n\t\t{\r\n\t\t\tconsole.log('prps 데이터가 설정되지 않음');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//60s 이벤트 데이터를 60개로 쪼갠다.\r\n\t\tfor (var i = 0; i < 60; i++) {\r\n\t\t\tthis.prpsSecArr2[i] = new Array(this.sampling * 60);\r\n\t\t\tfor (var k = 0; k < this.sampling * 60; k++) {\r\n\t\t\t\tthis.prpsSecArr2[i][k] = prpsData[this.sampling * 60 * i + k];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tset1secData(prpsData) \r\n\t{\r\n\t\t// console.log(\"매초 \");\r\n\t\t// console.log(prpsData);\r\n\t\tthis.accTime = 0;\r\n\t\tthis.prpsDataIdex = 0;\r\n\t\tthis.isInit = true;\r\n\r\n\t\tif( prpsData == null )\r\n\t\t{\r\n\t\t\tconsole.log('prps 데이터가 설정되지 않음');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// else\r\n\t\t// {\r\n\t\t// \tconsole.log('1sec prps');\r\n\t\t// \tconsole.log(prpsData);\r\n\t\t// }\r\n\r\n\t\tthis.prpsSecArr2[0] = new Array(this.sampling * 60);\r\n\t\tfor (var k = 0; k < this.sampling * 60; k++) {\r\n\t\t\tthis.prpsSecArr2[0][k] = prpsData[this.sampling * 60 * 0 + k];\r\n\t\t}\r\n\t}\r\n\r\n\t// 매 프레임 호출\r\n\tpublic updateFrame(data)\r\n\t{\r\n\t\tthis.accTime = data.accTime;\r\n\r\n\t\tif (this.prpsSecArr2[this.accTime] != null) {\r\n\t\t\tfor( let cnt = 0; cnt < 147; cnt++ )\t// 147이 52 frame정도에 해당\r\n\t\t\t{\r\n\t\t\t\tlet k = this.prpdIndex % this.sampling;\r\n\t\t\t\tlet idx = k + this.prpsSecArr2[this.accTime][this.prpdIndex] * this.sampling;\r\n\t\t\t\tif( isNaN(idx))\r\n\t\t\t\t{\r\n\t\t\t\t\tidx = isNaN(idx) ? 0 : idx;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.prpsSecArr2[this.accTime][this.prpdIndex] != 0) {\r\n\t\t\t\t\tthis.prpdData[idx]++;\r\n\r\n\t\t\t\t\tthis.onRealtimeAdd2(this.prpsSecArr2[this.accTime][this.prpdIndex], k, this.prpdData);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.prpsSecArr2[this.accTime].length == this.prpdIndex + 1) {\r\n\t\t\t\t\tthis.prpdIndex = 0;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.prpdIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// 실시간을 위한 임시함수\r\n\tprivate prpsDataIdex: number = 0; // 현재 어디를 하고 있는 지 체크하는 것\r\n\tpublic updateFrameReaTime(data)\r\n\t{\r\n\t\t// 데이터 보다 많이 검색할 수는 없음 (256*60)\r\n\t\tif( this.prpsDataIdex >= this.sampling * 60 )\r\n\t\t\treturn;\r\n\r\n\t\t// 데이터가 없으면 return\r\n\t\tif( !this.prpsSecArr2[0] )\r\n\t\t\treturn;\r\n\r\n\t\tfor( let i = 0; i < 147; i++ ){ // 147이 52 frame정도에 해당(1초 52 frame)\r\n\t\t\tlet prpdX = this.prpsDataIdex % this.sampling;\r\n\t\t\tlet prpdY = this.prpsDataIdex / this.sampling;\r\n\r\n\t\t\tif( !this.prpsSecArr2[this.prpsDataIdex] )\r\n\t\t\t{\r\n\t\t\t\tthis.prpdData[prpdX + prpdY * this.sampling]++; \r\n\t\t\t\tthis.onRealtimeAdd2(prpdY, prpdX, this.prpdData);\t\t// onRealtimeAdd2를 개선할 것\r\n\t\t\t}\r\n\r\n\t\t\tthis.prpsDataIdex++;\r\n\t\t}\r\n\r\n\t\t// this.accTime = 0;\r\n\r\n\t\t// if (this.prpsSecArr2[0] != null) {\r\n\t\t// \tfor( let cnt = 0; cnt < 147; cnt++ )\t// 147이 52 frame정도에 해당\r\n\t\t// \t{\r\n\t\t// \t\tlet k = this.prpdIndex % this.sampling;\r\n\t\t// \t\tlet idx = k + this.prpsSecArr2[this.accTime][this.prpdIndex] * this.sampling;\r\n\t\t// \t\tif( isNaN(idx))\r\n\t\t// \t\t{\r\n\t\t// \t\t\tidx = isNaN(idx) ? 0 : idx;\r\n\t\t// \t\t}\r\n\r\n\t\t// \t\tif (this.prpsSecArr2[this.accTime][this.prpdIndex] != 0) {\r\n\t\t// \t\t\tthis.prpdData[idx]++;\r\n\r\n\t\t// \t\t\tthis.onRealtimeAdd2(this.prpsSecArr2[this.accTime][this.prpdIndex], k, this.prpdData);\r\n\t\t// \t\t}\r\n\r\n\t\t// \t\tif (this.prpsSecArr2[this.accTime].length == this.prpdIndex + 1) {\r\n\t\t// \t\t\tthis.prpdIndex = 0;\r\n\t\t// \t\t}\r\n\t\t// \t\telse {\r\n\t\t// \t\t\tthis.prpdIndex++;\r\n\t\t// \t\t}\r\n\t\t// \t}\r\n\t\t// }\r\n\t}\r\n\t// 해당 시간의 PRPD\r\n\tpublic updateFrameBySeconds( props : any )\r\n\t{\r\n\t\tlet seconds : number = props.accTime;\r\n\r\n\t\tif( this.isInit == false )\r\n\t\t{\r\n\t\t\tthis.initData(props);\r\n\t\t}\r\n\r\n\t\tthis.clearPrpdData();\r\n\r\n\t\tfor (let i = 0; i < seconds; i++) {\r\n\t\t\tlet cnt = 0;\r\n\t\t\twhile (cnt < this.sampling * 60) {\r\n\t\t\t\tlet k = this.prpdIndex % this.sampling;\r\n\t\t\t\tlet idx = k + this.prpsSecArr2[i][this.prpdIndex] * this.sampling;\r\n\t\t\t\tidx = isNaN(idx) ? 0 : idx;\r\n\r\n\t\t\t\tif (this.prpsSecArr2[i][this.prpdIndex] != 0) {\r\n\t\t\t\t\tthis.prpdData[idx]++;\r\n\t\t\t\t\tthis.onRealtimeAdd2(this.prpsSecArr2[i][this.prpdIndex], k, this.prpdData);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.prpsSecArr2[i].length == this.prpdIndex + 1) {\r\n\t\t\t\t\tthis.prpdIndex = 0;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.prpdIndex++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcnt++;\r\n\t\t\t}\r\n\t\t\t// msseq += 10;\r\n\t\t}\r\n\t}\r\n\r\n\t//  PRPD에 실시간 데이터를 추가한다.\r\n\tprivate onRealtimeAdd2( x, y, data) \r\n\t{\r\n\t\tlet svgns = \"http://www.w3.org/2000/svg\";\r\n\r\n\t\tvar rows = 256;\r\n\t\tvar tile_height = this.chart_height / rows;\t\t\t// 1칸의 높이\r\n\t\tvar tile_width = this.chart_width / this.sampling;\t// 1칸의 너비(차트 크기/샘플링)\r\n\r\n\t\t// console.log(`x[${x}] y[${y}]`);\r\n\t\t// console.log(`샘플링[${this.sampling}] tile_width[${tile_width}]`);\r\n\t\r\n\t\tlet phase = 0;\t// 이후 phase 대응\t\r\n\t\tphase = phase * 0.8888888888888889;\r\n\t\tvar temp = this.chart_width - phase;\r\n\t\tvar xVal = 0 * 1;\r\n\r\n\t\tvar value = data[x * this.sampling + y];\r\n\t\tif( !value )\r\n\t\t{\r\n\t\t\tconsole.log(`데이터 없음 index[${x*this.sampling+y}]`);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (value >= 100)\r\n\t\t\tvalue = 99;\r\n\t\tif (value <= 0)\r\n\t\t\treturn;\r\n\r\n\t\tlet id = this.chartName + \"_block_\" + (x * 128 + y);\r\n\t\tlet rect = document.getElementById(id);\r\n\r\n\t\tif (rect == null) {\r\n\t\t\tif (y * tile_width > temp) {\r\n\t\t\t\txVal = (y * tile_width) - temp;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\txVal = y * tile_width + phase;\r\n\r\n\t\t\t\t// 마이너스로 쉬프트할 경우 x축 값이 마이너스 값이 되므로 360도 만큼 값을 더하여 표시한다.\r\n\t\t\t\tif (xVal < 0) {\r\n\t\t\t\t\txVal = xVal + phase;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 신규 생성하고 색상 설정\r\n\t\t\tlet rect2 = document.createElementNS(svgns, 'rect');\r\n\t\t\tlet xPos = xVal;\r\n\t\t\tlet yPos = this.chart_height - (x * tile_height);\r\n\t\t\t\r\n\t\t\trect2.setAttributeNS(null, 'id', id);\r\n\t\t\trect2.setAttributeNS(null, 'x', String(xPos));\r\n\t\t\trect2.setAttributeNS(null, 'y', String(yPos));\r\n\t\t\trect2.setAttributeNS(null, 'height', String(tile_height));\r\n\t\t\trect2.setAttributeNS(null, 'width', String(tile_width));\r\n\t\t\t\r\n\t\t\tlet color = (\"000000\" + prpdColors(value % 100).toString(16)).substr(-6);\r\n\t\t\trect2.setAttributeNS(null, 'fill', '#' + color);\r\n\t\t\trect2.setAttributeNS(null, 'title', 'color');\r\n\r\n\t\t\tthis.chartRef?.current?.appendChild(rect2);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// 색상만 설정\r\n\t\t\tlet color = (\"000000\" + prpdColors(value % 100).toString(16)).substr(-6);\r\n\t\t\trect.setAttributeNS(null, 'fill', '#' + color);\r\n\t\t\trect.setAttributeNS(null, 'title', 'color');\r\n\t\t}\r\n\t}\r\n\r\n\tprivate guideLines = () => {\r\n\t\t\r\n\t\tlet a = 29.17;\r\n\t\tlet lines  = [];\r\n\t\r\n\t\t// 나중에 유니크한 ID값을 붙여줄 것\r\n\t\r\n\t\t// 가로줄\r\n\t\tfor( let i = 1; i <= 10; i++ )\r\n\t\t{\r\n\t\t\tlet id = \"hline_\"+i;\r\n\t\t\tlet pos_y = this.chart_height / 11 * i;\r\n\t\t\tlines.push(<line key={id} x1=\"0\" x2={this.chart_width} y1={pos_y} y2={pos_y} stroke=\"#BBBBBB\" strokeWidth=\"0.5\" strokeDasharray=\"5, 5\"></line>);\r\n\t\t}\r\n\t\r\n\t\t// 세로\r\n\t\tfor( let i = 1; i <= 4; i++ )\r\n\t\t{\r\n\t\t\tlet id = \"vline_\"+i;\r\n\t\t\tlet pos_x = this.chart_width / 4 * i;\r\n\t\t\tlines.push(<line key={id} x1={pos_x} x2={pos_x} y1=\"0\" y2={this.chart_height} stroke=\"#BBBBBB\" strokeWidth=\"0.5\" strokeDasharray=\"5, 5\"></line>);\r\n\t\t}\r\n\t\t\r\n\t\treturn lines;\r\n\t}\r\n\r\n\tprivate xAxis = () => {\r\n\t\t// 위치 조정\r\n\t\tconst trans_degree = `translate(0, ${this.chart_height + 9})`;\r\n\t\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<g transform={trans_degree} fontSize=\"9\">\r\n\t\t\t\t\t<text x={0} y=\"0\" fill={this.textColor} strokeWidth=\"0\">0º</text>\r\n\t\t\t\t\t<text x={this.chart_width/4-6} y=\"0\" fill={this.textColor} strokeWidth=\"0\">90º</text>\r\n\t\t\t\t\t<text x={this.chart_width/2-10} y=\"0\" fill={this.textColor} strokeWidth=\"0\">180º</text>\r\n\t\t\t\t\t<text x={this.chart_width/4*3-10} y=\"0\" fill={this.textColor} strokeWidth=\"0\">270º</text>\r\n\t\t\t\t\t<text x={this.chart_width-20} y=\"0\" fill={this.textColor} strokeWidth=\"0\">360º</text>\r\n\t\t\t\t</g>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n\r\n\tprivate yAxisPRPD = () => {\r\n\t\tconst trans_dBm = `translate(${this.chart_width}, 0)`;\r\n\t\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<g transform={trans_dBm} fontSize=\"9\">\r\n\t\t\t\t\t{/* 단위는 dBm */}\r\n\t\t\t\t\t<text x=\"8\" y={this.chart_height/11*0 +8} fill={this.textColor} strokeWidth=\"0\">0</text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*2 } fill={this.textColor} strokeWidth=\"0\">-10</text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*4 } fill={this.textColor} strokeWidth=\"0\">-20</text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*6 } fill={this.textColor} strokeWidth=\"0\">-30</text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*8 } fill={this.textColor} strokeWidth=\"0\">-40</text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*10} fill={this.textColor} strokeWidth=\"0\">-50</text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*11} fill={this.textColor} strokeWidth=\"0\">dBm</text>\r\n\t\t\t\t</g>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n\r\n\tprivate yAxisLv1 = () => {\r\n\r\n\t\t// ) 실시간 증폭(단계) 기본 1단계 7mv, 2단계 20mv, 3단계 70mv, 4단계 220mv, 5단계 700mv 로 보여지고 각 그래프의 단위도 변경되어야 함, pulse \r\n\t\r\n\t\tconst trans_dBm = `translate(${this.chart_width}, 0)`;\r\n\t\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<g transform={trans_dBm} fontSize=\"9\">\r\n\t\t\t\t\t{/* 단위는 dBm */}\r\n\t\t\t\t\t<text x=\"8\" y={this.chart_height/11*0 +8} fill={this.textColor} strokeWidth=\"0\">3.5mv</text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*2 } fill={this.textColor} strokeWidth=\"0\"></text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*4 } fill={this.textColor} strokeWidth=\"0\"></text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*6 } fill={this.textColor} strokeWidth=\"0\"></text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*8 } fill={this.textColor} strokeWidth=\"0\"></text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*10} fill={this.textColor} strokeWidth=\"0\"></text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*11} fill={this.textColor} strokeWidth=\"0\">0mV</text>\r\n\t\t\t\t</g>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n\r\n\tprivate yAxisLv2 = () => {\r\n\r\n\t\t// ) 실시간 증폭(단계) 기본 1단계 7mv, 2단계 20mv, 3단계 70mv, 4단계 220mv, 5단계 700mv 로 보여지고 각 그래프의 단위도 변경되어야 함, pulse \r\n\t\r\n\t\tconst trans_dBm = `translate(${this.chart_width}, 0)`;\r\n\t\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<g transform={trans_dBm} fontSize=\"9\">\r\n\t\t\t\t\t{/* 단위는 dBm */}\r\n\t\t\t\t\t<text x=\"8\" y={this.chart_height/11*0 +8} fill={this.textColor} strokeWidth=\"0\">10mv</text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*2 } fill={this.textColor} strokeWidth=\"0\"></text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*4 } fill={this.textColor} strokeWidth=\"0\"></text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*6 } fill={this.textColor} strokeWidth=\"0\"></text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*8 } fill={this.textColor} strokeWidth=\"0\"></text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*10} fill={this.textColor} strokeWidth=\"0\"></text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*11} fill={this.textColor} strokeWidth=\"0\">0mV</text>\r\n\t\t\t\t</g>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n\r\n\tprivate yAxisLv3 = () => {\r\n\r\n\t\t// ) 실시간 증폭(단계) 기본 1단계 7mv, 2단계 20mv, 3단계 70mv, 4단계 220mv, 5단계 700mv 로 보여지고 각 그래프의 단위도 변경되어야 함, pulse \r\n\t\r\n\t\tconst trans_dBm = `translate(${this.chart_width}, 0)`;\r\n\t\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<g transform={trans_dBm} fontSize=\"9\">\r\n\t\t\t\t\t{/* 단위는 dBm */}\r\n\t\t\t\t\t<text x=\"8\" y={this.chart_height/11*0 +8} fill={this.textColor} strokeWidth=\"0\">35mv</text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*2 } fill={this.textColor} strokeWidth=\"0\"></text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*4 } fill={this.textColor} strokeWidth=\"0\"></text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*6 } fill={this.textColor} strokeWidth=\"0\"></text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*8 } fill={this.textColor} strokeWidth=\"0\"></text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*10} fill={this.textColor} strokeWidth=\"0\"></text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*11} fill={this.textColor} strokeWidth=\"0\">0mV</text>\r\n\t\t\t\t</g>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n\r\n\tprivate yAxisLv4 = () => {\r\n\r\n\t\t// ) 실시간 증폭(단계) 기본 1단계 7mv, 2단계 20mv, 3단계 70mv, 4단계 220mv, 5단계 700mv 로 보여지고 각 그래프의 단위도 변경되어야 함, pulse \r\n\t\r\n\t\tconst trans_dBm = `translate(${this.chart_width}, 0)`;\r\n\t\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<g transform={trans_dBm} fontSize=\"9\">\r\n\t\t\t\t\t{/* 단위는 dBm */}\r\n\t\t\t\t\t<text x=\"8\" y={this.chart_height/11*0 +8} fill={this.textColor} strokeWidth=\"0\">110mv</text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*2 } fill={this.textColor} strokeWidth=\"0\"></text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*4 } fill={this.textColor} strokeWidth=\"0\"></text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*6 } fill={this.textColor} strokeWidth=\"0\"></text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*8 } fill={this.textColor} strokeWidth=\"0\"></text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*10} fill={this.textColor} strokeWidth=\"0\"></text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*11} fill={this.textColor} strokeWidth=\"0\">0mV</text>\r\n\t\t\t\t</g>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n\r\n\tprivate yAxisLv5 = () => {\r\n\r\n\t\t// ) 실시간 증폭(단계) 기본 1단계 7mv, 2단계 20mv, 3단계 70mv, 4단계 220mv, 5단계 700mv 로 보여지고 각 그래프의 단위도 변경되어야 함, pulse \r\n\t\r\n\t\tconst trans_dBm = `translate(${this.chart_width}, 0)`;\r\n\t\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<g transform={trans_dBm} fontSize=\"9\">\r\n\t\t\t\t\t{/* 단위는 dBm */}\r\n\t\t\t\t\t<text x=\"8\" y={this.chart_height/11*0 +8} fill={this.textColor} strokeWidth=\"0\">350mv</text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*2 } fill={this.textColor} strokeWidth=\"0\"></text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*4 } fill={this.textColor} strokeWidth=\"0\"></text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*6 } fill={this.textColor} strokeWidth=\"0\"></text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*8 } fill={this.textColor} strokeWidth=\"0\"></text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*10} fill={this.textColor} strokeWidth=\"0\"></text>\r\n\t\t\t\t\t<text x=\"0\" y={this.chart_height/11*11} fill={this.textColor} strokeWidth=\"0\">0mV</text>\r\n\t\t\t\t</g>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n\r\n\tprivate series = () => {\r\n\t\tlet yAxis = null;\r\n\t\t// console.log(`축 타입[${this.yAxisType}]`);\r\n\t\tswitch( this.yAxisType )\r\n\t\t{\r\n\t\t\tcase \"1\": yAxis = this.yAxisLv1; break;\r\n\t\t\tcase \"2\": yAxis = this.yAxisLv2; break;\r\n\t\t\tcase \"3\": yAxis = this.yAxisLv3; break;\r\n\t\t\tcase \"4\": yAxis = this.yAxisLv4; break;\r\n\t\t\tcase \"5\": yAxis = this.yAxisLv5; break;\r\n\t\t\tdefault: yAxis = this.yAxisPRPD; break;\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t{ this.xAxis() }\r\n\t\t\t\t{ yAxis() }\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n\t\r\n\tprivate legends = () => {\r\n\t\tif( this.isLegend ) {\r\n\t\t\t// 위치 조정\r\n\t\t\tconst trans_legend = `translate(${this.chart_width + 33}, 0)`;\r\n\t\t\treturn(\r\n\t\t\t\t<>\r\n\t\t\t\t\t<g id=\"legendPrpd\" transform={trans_legend} fontSize=\"9\" ref={this.legendRef}>\r\n\t\t\t\t\t\t<text x=\"12\" y={this.chart_height/4*0 +8} fill={this.textColor} strokeWidth=\"0\">100</text>\r\n\t\t\t\t\t\t<text x=\"12\" y={this.chart_height/4*1} fill={this.textColor} strokeWidth=\"0\">75</text>\r\n\t\t\t\t\t\t<text x=\"12\" y={this.chart_height/4*2} fill={this.textColor} strokeWidth=\"0\">50</text>\r\n\t\t\t\t\t\t<text x=\"12\" y={this.chart_height/4*3} fill={this.textColor} strokeWidth=\"0\">25</text>\r\n\t\t\t\t\t\t<text x=\"12\" y={this.chart_height/4*4} fill={this.textColor} strokeWidth=\"0\">0</text>\r\n\t\t\t\t\t</g>\r\n\t\t\t\t</>\r\n\t\t\t);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn(\r\n\t\t\t\t<>\r\n\t\t\t\t</>\r\n\t\t\t); \r\n\t\t}\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<div>\r\n\t\t\t\t<svg width={this.width} height={this.height} xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\">\r\n\t\t\t\t\t\r\n\t\t\t\t\t{/* 배경 그리기 */}\r\n\t\t\t\t\t<rect x=\"0\" y=\"0\" fill=\"#848484\" width={this.chart_width} height={this.chart_height} stroke=\"orange\" strokeWidth=\"2\" />\r\n\r\n\t\t\t\t\t{/* 눈금 그리기 */}\r\n\t\t\t\t\t{ this.guideLines() }\r\n\r\n\t\t\t\t\t{/* 좌표축 표시 */}\r\n\t\t\t\t\t{ this.series() }\r\n\r\n\t\t\t\t\t{/* 색상 블럭 */}\r\n\t\t\t\t\t<g ref={this.chartRef} />\r\n\r\n\t\t\t\t\t{/* 무지개 범례 */}\r\n\t\t\t\t\t{ this.legends() }\r\n\t\t\t\t</svg>\r\n\t\t\t</div>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n}\r\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\exam\\test\\test01-value-scope.tsx",["1448","1449"],"import React, { Component, useRef, useState } from \"react\";\nimport { IRootState } from '../../../shared/reducers';\nimport { connect } from 'react-redux';\nimport { test01Redux, Test01State as test01State } from './test01-value-scope.reducer';\n\n// 리덕스/액션함수를 포함하는 인터페이스\ninterface CustomProps { number; }\nexport interface IAppProps extends StateProps, DispatchProps, CustomProps {}\n\nconst func_out_const = 0;\nlet func_out_let = 0;                                   // Global하게 생성되는 것으로 추측되고 그로 인해 객체 내부에서 접속가능, 객체별로 값을 유지하기는 어려움\nvar func_out_var = 0;\n\nconst Test01ValueScope: React.FC<IAppProps> = (props: IAppProps) => {\n  const func_number = props.number;                   // re-render되면 초기화되는 것은 마찬가지이나 인수값이 같다면 유지됨\n  const func_in_const = 0;                            // const라 값을 변경할 수 없었음. atomic이 아니면 객체의 값은 바꾸는 것이 가능함\n  let func_in_let = 0;                                // re-render 되면 초기화 됨,\n  var func_in_var = 0;                                // scope 상의 var와 let은 큰차이가 없어보임. let을 쓰는 게 recommand\n  const [func_in_state, setCount ] = useState(0);     // re-render 해도 이전 값을 기억하고 싶다면 Hook으로 넣는 방법 외에는 없다. re-render하지않는 Hook을 찾아볼 것\n  console.log(`함수 호출[${func_number}]: ${func_out_const} ${func_out_let} ${func_out_var} / ${func_in_const} ${func_in_let} ${func_in_var} ${func_in_state}`);\n\n  const logDiv = useRef(null);\n\n  const addValue = () => {\n    func_out_let++;\n    func_out_var++;\n    func_in_let++;\n    func_in_var++;\n    print();\n  }\n\n  const addState = () => {\n    setCount(func_in_state+1);\n    print();\n  }\n\n  const print = () => {\n    console.log($(logDiv.current));\n    const $logDiv = $(logDiv.current)\n    $logDiv.html($logDiv.html() + '<br />' +\n      `[props.number]: ${func_number}&nbsp;&nbsp;\n        [func_out_const]: ${func_out_const}&nbsp;&nbsp;\n        [func_out_let]: ${func_out_let}&nbsp;&nbsp;\n        [func_out_var]: ${func_out_var}&nbsp;&nbsp;&nbsp;/&nbsp;\n        [func_in_const]: ${func_in_const}&nbsp;&nbsp;\n        [func_in_let]: ${func_in_let}&nbsp;&nbsp;\n        [func_in_var]: ${func_in_var}&nbsp;&nbsp;\n        [func_in_state]: ${func_in_state}&nbsp;&nbsp;\n        [Redux-testValue]: ${props.testValue}`);\n  }\n\n  return (\n    <>\n      <div>\n        <button onClick={addValue}>클릭 일반</button>\n        <button onClick={addState}>클릭 스테이트</button>\n        <button onClick={print}>클릭 출력</button>\n        <button onClick={props.test01Redux}>리덕스 실행</button>\n      </div>\n      <div>\n        <span style={{fontWeight:'bold'}}>\n          [props.number]: {props.number}&nbsp;&nbsp;\n          [func_out_const]: {func_out_const}&nbsp;&nbsp;\n          [func_out_let]: {func_out_let}&nbsp;&nbsp;\n          [func_out_var]: {func_out_var}&nbsp;&nbsp;&nbsp;/&nbsp;\n          [func_in_const]: {func_in_const}&nbsp;&nbsp;\n          [func_in_let]: {func_in_let}&nbsp;&nbsp;\n          [func_in_var]: {func_in_var}&nbsp;&nbsp;\n          [func_in_state]: {func_in_state}&nbsp;&nbsp;\n          [Redux-testValue]: {props.testValue}\n        </span>\n      </div>\n      <div ref={logDiv} style={{border:'1px black solid', height:'500px', overflowY:'scroll'}}></div>\n    </>\n  );\n};\n\n// 리덕스 스토어를 가지는 객체\nconst mapStateToProps = ({ test01 }: IRootState) => ({\n  testValue: test01.testValue,\n});\n\n// 리듀스 액션 함수를 가지는 객체\nconst mapDispatchToProps = {\n  test01Redux\n};\n\n// 스토어/액션함수 객체의 타입을 정의\n// (상단 컴포넌트의 파라미터에서 받을 인터페이스에서 사용)\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\n// 스토어, 액션함수를 컴포넌트에 연결\nexport default connect(mapStateToProps, mapDispatchToProps)(Test01ValueScope);\n","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\chart\\prps\\prps-chart-component.tsx",["1450","1451","1452"],"import { useState } from \"react\";\r\n\r\nimport { Canvas, useThree, Vector3 } from \"@react-three/fiber\"\r\nimport { OrthographicCamera, OrbitControls, Stats } from \"@react-three/drei\";\r\n\r\nimport { PrpsCoordinatePlane } from \"./prps-coordinate-plane\";\r\nimport { PrpsPhaseMarker } from \"./prps-phase-marker\";\r\nimport { PrpsChartGraph, PrpsDrawingStatus } from \"./prps-chart-graph\";\r\nimport { PrpsFile } from \"../../file/prpsfile\";\r\nimport { PrpdChartImprove } from \"../prpd/prpd-chart-improve\";\r\nimport { PrpsDbmMarker } from \"./prps-dbm-marker\";\r\n\r\nexport const PrpsChartComponent = (props : PrpsComponentProps) => {\r\n\r\n\treturn (\r\n\t\t<Canvas>\r\n\t\t\t{/* R3F 상태 표시 */}\r\n\t\t\t{/* <Stats /> */}\r\n\r\n\t\t\t{/* 조명 세팅 */}\r\n\t\t\t<ambientLight \r\n\t\t\t\tcolor={0xbbbbbb}\r\n\t\t\t\t/>\r\n\t\t\t<directionalLight\r\n\t\t\t\tcolor={0xdddddd}\r\n\t\t\t\tintensity={1.5}\r\n\t\t\t\tposition={[-80, 200, 0]}\r\n\t\t\t\t/>\r\n\t\t\t<pointLight\r\n\t\t\t\tcolor={0xffee88}\r\n\t\t\t\tintensity={1}\r\n\t\t\t\tdistance={100}\r\n\t\t\t\tdecay={2}\r\n\t\t\t\tposition={[-80, 200, 0]}\r\n\t\t\t\tcastShadow\r\n\t\t\t\t/>\r\n\r\n\t\t\t<OrthographicCamera\r\n\t\t\t\tleft={-100}\r\n\t\t\t\tright={100}\r\n\t\t\t\ttop={75}\r\n\t\t\t\tbottom={-75}\r\n\t\t\t\tnear={1}\r\n\t\t\t\tfar={1000}\r\n\t\t\t\tmakeDefault\r\n\t\t\t\tposition={ props.cameraPosition ?? [120, 80, 170]}\r\n\t\t\t\tzoom={ props.cameraZoom ?? 2}\r\n\t\t\t\t/>\r\n\r\n\t\t\t<PrpsCoordinatePlane />\r\n\t\t\t<PrpsDbmMarker is3d={props.is3d} />\r\n\t\t\t<PrpsPhaseMarker is3d={props.is3d} />\r\n\t\t\t<PrpsChartGraph\r\n\t\t\t\tisRunning={props.isRunning}\r\n\t\t\t\tis3d={props.is3d}\r\n\t\t\t\ttype={props.type}\r\n\t\t\t\tpdFile={props.pdFile}\r\n\t\t\t\trtFile={props.rtFile}\r\n\t\t\t\tprpsStatus={props.prpsStatus}\r\n\t\t\t\tcallbackInitData={props.callbackInitData}\r\n\t\t\t\tcallbackUpdateFrame={props.callbackUpdateFrame}\r\n\t\t\t\t >\r\n\t\t\t</PrpsChartGraph>\r\n\t\t\t<OrbitControls enabled={props.is3d} />\r\n\r\n\t\t</Canvas>\r\n\t);\r\n}\r\n\r\nexport interface PrpsComponentProps\r\n{\r\n\tisRunning? : boolean,\r\n\tis3d? : boolean,\r\n\tisClosed? : boolean,\r\n\tcameraPosition? : Vector3,\r\n\tcameraZoom? : number,\r\n\ttype?: string,\t\t// RealTime or Event\r\n\tpdFile? : PrpsFile,\r\n\trtFile? : any,\r\n\tprpsStatus? : PrpsDrawingStatus,\r\n\tprpdRef? : React.MutableRefObject<typeof PrpdChartImprove>,\r\n\tseriesType?: string;\t\t\t\t// 1~5 없으면 기존 PRPD\r\n\tcallbackInitData? : any,\r\n\tcallbackUpdateFrame? : any,\r\n\tchildren? : React.ReactNode,\r\n}","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\chart\\prps\\prps-chart-graph.tsx",["1453","1454","1455","1456","1457","1458","1459","1460","1461","1462","1463","1464","1465","1466","1467"],"import { useFrame, useThree } from \"@react-three/fiber\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { PrpsFile } from \"../../file/prpsfile\";\r\nimport * as THREE from \"three\";\r\nimport { Euler } from \"three\";\r\nimport { PrpdChartImprove } from \"../prpd/prpd-chart-improve\";\r\n\r\nexport class PrpsDrawingStatus\r\n{\r\n\tpublic msseq : number;\t\t\t\t\t// 재생된 프레임 수\r\n\tpublic accTime : number;\t\t\t\t// 현재 재생중인 초\r\n\t// pdFile : PrpsFile;\r\n\tpublic sceneIdx : number;\t\t\t\t//\r\n\tpublic is3dSet : boolean;\r\n\tpublic is2dSet : boolean;\r\n\tpublic prpsMeshs : THREE.LineSegments[];\r\n\tpublic fr : number;\r\n\tpublic isInvalid : boolean;\r\n\r\n\tconstructor(){\r\n\t\t\r\n\t\tthis.prpsMeshs = new Array<THREE.LineSegments>(4);\r\n\t\tthis.clear();\r\n\r\n\t\t// console.log(`PrpsDrawingStatus - constructor`);\r\n\t}\r\n\r\n\tpublic \tclear()\t{\r\n\t\tthis.msseq = 0;\r\n\t\tthis.accTime = 0;\r\n\t\tthis.sceneIdx = 0;\r\n\r\n\t\tthis.is3dSet = true;\r\n\t\tthis.is2dSet = true;\r\n\r\n\t\tthis.fr = 0;\r\n\r\n\t\tfor( let i = 0; i < 4; i++)\r\n\t\t{\r\n\t\t\tthis.prpsMeshs[i]?.removeFromParent();\r\n\t\t\tthis.prpsMeshs[i]?.geometry.dispose();\r\n\t\t}\r\n\t}\r\n}\r\n\r\ninterface sceneProps\r\n{\r\n\taccTime : number,\r\n\tpdFile : PrpsFile,\r\n\tscene : THREE.Scene,\r\n\tsceneIdx : number,\r\n\tprpsMeshs : THREE.LineSegments[],\r\n\tfr : number,\r\n}\r\n\r\nexport const PrpsChartGraph = ( props : PrpsChartGraphProps ) => {\r\n\t\r\n\tconst groupName = \"PrpsChartGraph\";\r\n\tconst clock = useThree( (state) => state.clock );\r\n\tconst scene = useThree( (state) => state.scene );\r\n\tconst gl = useThree((state) => state.gl);\r\n\tconst camera = useThree((state) => state.camera);\r\n\r\n\tlet isRunning : boolean = props.isRunning;\r\n\tconst pdFile : PrpsFile = props.pdFile;\r\n\tconst prpsStatus : PrpsDrawingStatus = props.prpsStatus ?? new PrpsDrawingStatus();\r\n\tconst type = props.type ?? \"Event\";\r\n\r\n\tconst callbackInitData = props.callbackInitData;\r\n\tconst callbackUseFrame = props.callbackUpdateFrame;\r\n\r\n\tuseEffect(() => {\r\n\t\tgl.setPixelRatio(window.devicePixelRatio);\r\n\t\t\r\n\t\t// 종합예방\r\n\t\tgl.setSize(550, 368);\r\n\t\tcamera.lookAt( 0, 0, 10 );\r\n\t\t// camera.zoom = 1;\r\n\t\tcamera.updateProjectionMatrix();\r\n\r\n\t\t// 케이블\r\n\t\t// gl.setSize(294, 200);\t\t\t\t// 케이블 사이즈 props로 받아올 것\r\n\t\t\r\n\t\t// gl.setClearColor(0x000000);\r\n\r\n\t\tgl.localClippingEnabled = true;\r\n\r\n\t\t// 잘 안 먹힘\r\n\t\t// camera.position.set( 120, 80, 170);\r\n\t\t// camera.lookAt(0, 0, 10);\r\n\t\t// camera.zoom = 0.1;\r\n\t\t// camera.updateProjectionMatrix();\r\n\r\n\t}, [])\r\n\r\n\tuseEffect(() => {\r\n\t\tpdFile.setData(props.rtFile);\r\n\t}, [props.rtFile])\r\n\r\n\tif( props.is3d )\r\n\t{\r\n\t\tif( prpsStatus.is3dSet )\r\n\t\t{\r\n\t\t\tcamera.position.set(120, 80, 170);\r\n\t\t\tcamera.lookAt( 0, 0, 10 );\r\n\t\t\tcamera.zoom = 0.8;\r\n\t\t\tcamera.updateProjectionMatrix();\r\n\r\n\t\t\tprpsStatus.is3dSet = false;\r\n\t\t\tprpsStatus.is2dSet = true;\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tif( prpsStatus.is2dSet )\r\n\t\t{\r\n\t\t\t// 2D\r\n\t\t\tcamera.position.set(0, 220, 10);\r\n\t\t\tcamera.lookAt( 0, 0, 10 ) ;\r\n\t\t\tcamera.zoom = 1;\r\n\t\t\tcamera.updateProjectionMatrix();\r\n\r\n\t\t\tprpsStatus.is3dSet = true;\r\n\t\t\tprpsStatus.is2dSet = false;\r\n\t\t}\r\n\t}\r\n\r\n\tuseFrame( () => {\r\n\r\n\t\t// 이슈\r\n\t\t// - 최초 9 fr이 1초가 됨\r\n\t\t// - 52 fr이 1초가 됨\r\n\t\t// - re-render가 일어날때 조치가 요망\r\n\t\t// console.log(`pos[${camera.position.x}, ${camera.position.y}, ${camera.position.z} ] scale[${camera.scale.x}, ${camera.scale.y}, ${camera.scale.z}] zoom[${camera.zoom}]`);\r\n\t\t// console.log(camera);\r\n\r\n\t\tif( isRunning == false )\r\n\t\t\treturn;\r\n\r\n\t\tlet fr = prpsStatus.msseq % 52;\r\n\t\tif( prpsStatus.accTime == 0 && fr == 0)\r\n\t\t{\r\n\t\t\t// first frame\r\n\t\t\ttype == 'RealTime' ? makeSceneRealTime() :\r\n\t\t\t \tmakeScene({ accTime : prpsStatus.accTime, pdFile : pdFile, scene : scene, sceneIdx : prpsStatus.sceneIdx, prpsMeshs : prpsStatus.prpsMeshs, fr: fr });\r\n\t\t\r\n\t\t\tif( callbackInitData )\r\n\t\t\t{\r\n\t\t\t\tconsole.log(`PPRS 1 frame`);\r\n\t\t\t\tconsole.log(pdFile.getPdData());\r\n\t\t\t\tcallbackInitData();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tif (fr == 0) {\r\n\t\t\tprpsStatus.sceneIdx = prpsStatus.sceneIdx + 1;\r\n\t\t\tprpsStatus.sceneIdx = prpsStatus.sceneIdx % 4;\r\n\t\t}\r\n\r\n\t\tif( type == 'Event' && prpsStatus.accTime >= 60 )\r\n\t\t{\r\n\t\t\t// 1분 경과시 정지 (알려줘야함) -- 슬라이더의 영향으로 다시 true로 바뀜\r\n\t\t\tisRunning = false;\r\n\t\t}\r\n\r\n\t\tif( fr == 9 )\r\n\t\t{\r\n\t\t\t// 1초 경과\r\n\t\t\tprpsStatus.accTime++;\r\n\t\t\ttype == 'RealTime' ? makeSceneRealTime() :\r\n\t\t\t\t\tmakeScene({ accTime : prpsStatus.accTime, pdFile : pdFile, scene : scene, sceneIdx : prpsStatus.sceneIdx, prpsMeshs : prpsStatus.prpsMeshs, fr: fr });\r\n\r\n\t\t\tconsole.log(`시간 경과 : msseq[${prpsStatus.msseq}] fr[${fr}] accTime[${prpsStatus.accTime}]`);\r\n\t\t}\r\n\r\n\t\ttype == 'RealTime' ? showDataRealTime(fr) : \r\n\t\t\tshowData({ accTime : prpsStatus.accTime, pdFile : pdFile, scene : scene, sceneIdx : prpsStatus.sceneIdx, prpsMeshs : prpsStatus.prpsMeshs, fr: fr });\r\n\t\t\r\n\r\n\t\tif( callbackUseFrame )\r\n\t\t{\r\n\t\t\tcallbackUseFrame(prpsStatus.accTime);\r\n\t\t}\r\n\t\tprpsStatus.msseq++;\r\n\t});\r\n\r\n\t// 1분 재생 이후 실시간 재생과 같이 대응할 수 있게 통합할 것\r\n\t// useFrame( () => {\r\n\r\n\t// \t// 이슈\r\n\t// \t// - 최초 9 fr이 1초가 됨\r\n\t// \t// - 52 fr이 1초가 됨\r\n\t// \t// - re-render가 일어날때 조치가 요망\r\n\t// \t// console.log(`pos[${camera.position.x}, ${camera.position.y}, ${camera.position.z} ] scale[${camera.scale.x}, ${camera.scale.y}, ${camera.scale.z}] zoom[${camera.zoom}]`);\r\n\t// \t// console.log(camera);\r\n\r\n\t// \tif( isRunning == false )\r\n\t// \t\treturn;\r\n\r\n\t// \tlet fr = prpsStatus.msseq % 52;\r\n\t// \tif( prpsStatus.accTime == 0 && fr == 0)\r\n\t// \t{\r\n\r\n\t// \t\t// first frame\r\n\t// \t\tmakeScene({ accTime : prpsStatus.accTime, pdFile : pdFile, scene : scene, sceneIdx : prpsStatus.sceneIdx, prpsMeshs : prpsStatus.prpsMeshs, fr: fr });\r\n\t\t\r\n\t// \t\tif( callbackInitData )\r\n\t// \t\t{\r\n\t// \t\t\tcallbackInitData();\r\n\t// \t\t}\r\n\t// \t}\r\n\r\n\r\n\t// \tif (fr == 0) {\r\n  //           prpsStatus.sceneIdx = prpsStatus.sceneIdx + 1;\r\n  //           prpsStatus.sceneIdx = prpsStatus.sceneIdx % 4;\r\n  //       }\r\n\r\n\t// \tif( prpsStatus.accTime >= 60 )\r\n\t// \t{\r\n\t// \t\t// 1분 경과시 다음 파일 혹은 정지\r\n\t// \t\tisRunning = false;\r\n\t// \t}\r\n\r\n\r\n\t// \tif( fr == 9 )\r\n\t// \t{\r\n\t// \t\t// 1초 경과\r\n\t// \t\tprpsStatus.accTime++;\r\n\t// \t\tmakeScene({ accTime : prpsStatus.accTime, pdFile : pdFile, scene : scene, sceneIdx : prpsStatus.sceneIdx, prpsMeshs : prpsStatus.prpsMeshs, fr: fr });\r\n\t// \t\tconsole.log(`시간 경과 : msseq[${prpsStatus.msseq}] fr[${fr}] accTime[${prpsStatus.accTime}]`);\r\n\t// \t}\r\n\r\n\t// \tshowData({ accTime : prpsStatus.accTime, pdFile : pdFile, scene : scene, sceneIdx : prpsStatus.sceneIdx, prpsMeshs : prpsStatus.prpsMeshs, fr: fr });\r\n\r\n\t// \tif( callbackUseFrame )\r\n\t// \t{\r\n\t// \t\tcallbackUseFrame(prpsStatus.accTime);\r\n\t// \t}\r\n\t// \tprpsStatus.msseq++;\r\n\t// });\r\n\r\n\tconst makeSceneRealTime = () =>{\r\n\t\t// console.log('makeScene RealTime');\r\n\r\n\t\tlet accTime : 0;\t// 실시간이라 항상 첫번째 것을 표시\r\n\t\tlet sceneIdx : number = prpsStatus.sceneIdx;\r\n\t\tlet prpsMeshs : THREE.LineSegments[] = prpsStatus.prpsMeshs;\r\n\t\r\n\t\tlet chart = scene.getObjectByName(\"PrpsChartGraph\");\r\n\t\tif( chart == null )\r\n\t\t\treturn;\r\n\t\r\n\t\t// 기존 Mesh 삭제\r\n\t\tprpsMeshs[sceneIdx]?.removeFromParent();\r\n\t\tprpsMeshs[sceneIdx]?.geometry.dispose();\r\n\t\r\n\t\tlet geometry = new THREE.BufferGeometry();\r\n\t\r\n\t\t// Array 의 Length를 지정\r\n\t\t// 60 * 128 의 의미 (60 * 128 = 7680) > 60 * 256\r\n\t\t// 3 * 2    의 의미 (x,y,z 3축 * 시작점,끝점 2점)\r\n\t\tlet linePositions = new Float32Array(60 * 128 * 3 * 2 * 2);\r\n\t\tlet denominator = 4.2;\r\n\t\r\n\t\tvar lineCnt = 0;\r\n\t\tvar data = pdFile.getData(accTime);\r\n\t\r\n\t\tlet unitSize = pdFile.unitSize;\r\n\t\tlet samplingSize = pdFile.samplingSize;\r\n\t\tfor (var i = 0; i < unitSize; i++) {\r\n\t\r\n\t\t\tlet x = i % samplingSize;\r\n\t\t\tlet y = Math.floor(i / samplingSize);\r\n\t\t\t// let y = (i - (i % samplingSize)) / samplingSize;\r\n\t\t\t// var idx = y * 128 + x - parseInt((phase * 0.3555555555555556));\r\n\t\t\tlet idx = y * samplingSize + x;\r\n\t\r\n\t\t\tif (idx < 0)\r\n\t\t\t\tidx = 0;\r\n\t\t\telse if (idx >= unitSize)\r\n\t\t\t\tidx = idx % unitSize;\r\n\r\n\t\t\tif( !data[idx] || isNaN(data[idx]))\r\n\t\t\t\tcontinue;\r\n\t\r\n\t\t\t// 데이터 높이 표시를 위한 라인\r\n\t\t\tlinePositions[lineCnt * 6 + 0] = x - 64;\r\n\t\t\tlinePositions[lineCnt * 6 + 1] = 1;//0-0.5; <-- 바닥에 깔리는 애들이 안보여서 1로 조정해봄\r\n\t\t\tlinePositions[lineCnt * 6 + 2] = y - 60;\r\n\t\t\tlinePositions[lineCnt * 6 + 3] = x - 64;\r\n\t\t\tlinePositions[lineCnt * 6 + 4] = data[idx] / denominator - 0.5;\r\n\t\t\tlinePositions[lineCnt * 6 + 5] = y - 60;\r\n\t\t\tlineCnt++;\r\n\r\n\t\t\t// 상단, 하단에서 Line이 보이지 않는 현상을 보완하기 위해 상단 점을 그려줍니다.\r\n\t\t\tlinePositions[lineCnt * 6 + 0] = x - 64;\r\n\t\t\tlinePositions[lineCnt * 6 + 1] = data[idx] / denominator - 0.5;\r\n\t\t\tlinePositions[lineCnt * 6 + 2] = y - 60 - 0.1;\r\n\t\t\tlinePositions[lineCnt * 6 + 3] = x - 64;\r\n\t\t\tlinePositions[lineCnt * 6 + 4] = data[idx] / denominator - 0.5;\r\n\t\t\tlinePositions[lineCnt * 6 + 5] = y - 60 + 0.1;\r\n\t\t\tlineCnt++;\r\n\t\t}\r\n\r\n\t\t// console.log(`lineCnt[${lineCnt}] linePositions Length[${linePositions.length}]`);\r\n\t\tgeometry.setAttribute('position', new THREE.BufferAttribute(linePositions, 3));\r\n\t\t//geometry.addAttribute( 'vertColor', new THREE.BufferAttribute( lineColors, 3 ) );\r\n\t\tgeometry.computeBoundingSphere();\r\n\t\r\n\t\t// 실시간 차트의 그려지는 영역을 제한하기 위한 범위를 설정합니다.\r\n\t\tvar clipPlanes = [\r\n\t\t\tnew THREE.Plane(new THREE.Vector3(1, 0, 0), 64),\r\n\t\t\tnew THREE.Plane(new THREE.Vector3(0, 1, 0), -0.5),\r\n\t\t\tnew THREE.Plane(new THREE.Vector3(0, 0, -1), 60),\r\n\t\t\tnew THREE.Plane(new THREE.Vector3(0, 0, 1), 60)\r\n\t\t];\r\n\t\r\n\t\tvar shaderMaterial = new THREE.ShaderMaterial({\r\n\t\t\tvertexShader: \r\n\t\t\t\t\t`\r\n\t\t\t\t\tvarying vec2 vUv;\r\n\t\t\t\t\tvarying vec4 worldCoord;\r\n\t\t\r\n\t\t\t\t\t#include <clipping_planes_pars_vertex>\r\n\t\t\r\n\t\t\t\t\tvoid main()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t#include <begin_vertex>\r\n\t\t\t\t\t\tvUv = uv;\r\n\t\t\t\t\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\t\t\t\t\t\tgl_Position = projectionMatrix * mvPosition;\r\n\t\t\r\n\t\t\t\t\t\tworldCoord = modelMatrix * vec4( position, 1.0 );\r\n\t\t\t\t\t\t#include <clipping_planes_vertex>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t`,\r\n\t\t\tfragmentShader: \r\n\t\t\t\t\t`\r\n\t\t\t\t\tvarying vec2 vUv;\r\n\t\t\t\t\tvarying vec4 worldCoord;\r\n\t\t\t\r\n\t\t\t\t\t#include <clipping_planes_pars_fragment>\r\n\t\t\t\r\n\t\t\t\t\tvoid main() {\r\n\t\t\t\r\n\t\t\t\t\t\t#include <clipping_planes_fragment>\r\n\t\t\t\t\t\tfloat red = 0.0;\r\n\t\t\t\t\t\tfloat green = 0.0;\r\n\t\t\t\t\t\tfloat blue = 0.0;\r\n\t\t\t\t\t\tfloat alpha = 1.0;\r\n\t\t\t\r\n\t\t\t\t\t\tfloat y = worldCoord.y;\r\n\t\t\t\t\t\tif(y > 60.0)\r\n\t\t\t\t\t\t\ty = 60.0;\r\n\t\t\t\r\n\t\t\t\t\t\tfloat l = y / 0.6;\r\n\t\t\t\r\n\t\t\t\t\t\tif (l < 50.0)\r\n\t\t\t\t\t\t\tred = 0.0;\r\n\t\t\t\t\t\telse if (l >= 75.0)\r\n\t\t\t\t\t\t\tred = 1.0;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tred = (l - 50.0) / 25.0;\r\n\t\t\t\r\n\t\t\t\t\t\tif (l >= 25.0 && l < 75.0)\r\n\t\t\t\t\t\t\tgreen = 1.0;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tgreen = (25.0 - (abs(l - 50.0) - 25.0)) / 25.0;\r\n\t\t\t\r\n\t\t\t\t\t\tif (l < 25.0)\r\n\t\t\t\t\t\t\tblue = 1.0;\r\n\t\t\t\t\t\telse if(l >= 50.0)\r\n\t\t\t\t\t\t\tblue = 0.0;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tblue = (50.0 - l) / 25.0;\r\n\t\t\t\r\n\t\t\t\t\t\tif (l <= 0.0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\talpha = 0.1;\r\n\t\t\t\t\t\t\tred = 0.0;\r\n\t\t\t\t\t\t\tgreen = 0.0;\r\n\t\t\t\t\t\t\tblue = 0.0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\t\t\tif (worldCoord.z < -61.0 || worldCoord.z > 61.0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\talpha = 0.1;\r\n\t\t\t\t\t\t\tred = 0.0;\r\n\t\t\t\t\t\t\tgreen = 0.0;\r\n\t\t\t\t\t\t\tblue = 0.0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\t\t\tgl_FragColor = vec4(red, green, blue, alpha);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t`,\r\n\t\t\tside: THREE.DoubleSide,\r\n\t\t\tclipping: true,\r\n\t\t\tclippingPlanes: clipPlanes\r\n\t\t});\r\n\t\r\n\t\tprpsMeshs[sceneIdx] = new THREE.LineSegments(geometry, shaderMaterial);\r\n\t\tprpsMeshs[sceneIdx].name = `LineMeshes[${sceneIdx}]`;\r\n\t\tchart.add(prpsMeshs[sceneIdx]);\r\n\t}\r\n\r\n\tconst showDataRealTime = ( fr : number ) => {\r\n\r\n\t\tlet sceneIdx : number = prpsStatus.sceneIdx;\r\n\t\tlet prpsMeshs : THREE.LineSegments[] = prpsStatus.prpsMeshs;\r\n\t\t// var p = document.getElementById(\"phase\").value;\r\n\t\r\n\t\t// 막대 이동\r\n\t\tfor (var i = 0; i < 4; i++) {\r\n\t\t\tvar f = 2 - (sceneIdx + 4 - i) % 4;\r\n\t\t\tprpsMeshs[i]?.position.setZ(60 * f + 30 - fr * 1.153846153846154);\r\n\t\t}\r\n\t\r\n\t\t// 타임라인 이동\r\n\t\tscene.getObjectByName(\"timeline1\").position.setZ(60 - fr * 1.153846153846154);\r\n\t\tscene.getObjectByName(\"timeline2\").position.setZ(0 - fr * 1.153846153846154);\r\n\t}\r\n\r\n\tconst makeScene = (props : sceneProps ) =>{\r\n\t\tlet accTime : number = props.accTime;\r\n\t\tlet pdFile : PrpsFile = props.pdFile;\r\n\t\tlet scene : THREE.Scene = props.scene;\r\n\t\tlet sceneIdx : number = props.sceneIdx;\r\n\t\tlet prpsMeshs : THREE.LineSegments[] = props.prpsMeshs;\r\n\t\r\n\t\t// console.log(props);\r\n\r\n\t\tlet chart = scene.getObjectByName(\"PrpsChartGraph\");\r\n\t\tif( chart == null )\r\n\t\t\treturn;\r\n\t\r\n\t\t// 기존 Mesh 삭제\r\n\t\tprpsMeshs[sceneIdx]?.removeFromParent();\r\n\t\tprpsMeshs[sceneIdx]?.geometry.dispose();\r\n\t\r\n\t\tlet geometry = new THREE.BufferGeometry();\r\n\t\r\n\t\t// Array 의 Length를 지정\r\n\t\t// 60 * 128 의 의미 (60 * 128 = 7680) > 60 * 256\r\n\t\t// 3 * 2    의 의미 (x,y,z 3축 * 시작점,끝점 2점)\r\n\t\tlet linePositions = new Float32Array(60 * 128 * 3 * 2 * 2);\r\n\t\tlet denominator = 4.2;\r\n\t\r\n\t\tvar lineCnt = 0;\r\n\t\tvar data = pdFile.getData(accTime);\r\n\t\r\n\t\tlet unitSize = pdFile.unitSize;\r\n\t\tlet samplingSize = pdFile.samplingSize;\r\n\t\tfor (var i = 0; i < unitSize; i++) {\r\n\t\r\n\t\t\tvar x = i % samplingSize;\r\n\t\t\tvar y = (i - (i % samplingSize)) / samplingSize;\r\n\t\t\t// var idx = y * 128 + x - parseInt((phase * 0.3555555555555556));\r\n\t\t\tlet idx = y;\r\n\t\r\n\t\t\tif (idx < 0)\r\n\t\t\t\tidx = 0;\r\n\t\t\telse if (idx >= unitSize)\r\n\t\t\t\tidx = idx % unitSize;\r\n\t\r\n\t\t\tif (data[idx] != 0 && data[idx] != null) {\r\n\t\r\n\t\t\t\tif( isNaN(data[idx]))\r\n\t\t\t\t{\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t// 데이터 높이 표시를 위한 라인\r\n\t\t\t\tlinePositions[lineCnt * 6 + 0] = x - 64;\r\n\t\t\t\tlinePositions[lineCnt * 6 + 1] = 1;//0-0.5; <-- 바닥에 깔리는 애들이 안보여서 1로 조정해봄\r\n\t\t\t\tlinePositions[lineCnt * 6 + 2] = y - 60;\r\n\t\t\t\tlinePositions[lineCnt * 6 + 3] = x - 64;\r\n\t\t\t\tlinePositions[lineCnt * 6 + 4] = data[idx] / denominator - 0.5;\r\n\t\t\t\tlinePositions[lineCnt * 6 + 5] = y - 60;\r\n\t\t\t\tlineCnt++;\r\n\t\r\n\t\t\t\t// 상단, 하단에서 Line이 보이지 않는 현상을 보완하기 위해 상단 점을 그려줍니다.\r\n\t\t\t\tlinePositions[lineCnt * 6 + 0] = x - 64;\r\n\t\t\t\tlinePositions[lineCnt * 6 + 1] = data[idx] / denominator - 0.5;\r\n\t\t\t\tlinePositions[lineCnt * 6 + 2] = y - 60 - 0.1;\r\n\t\t\t\tlinePositions[lineCnt * 6 + 3] = x - 64;\r\n\t\t\t\tlinePositions[lineCnt * 6 + 4] = data[idx] / denominator - 0.5;\r\n\t\t\t\tlinePositions[lineCnt * 6 + 5] = y - 60 + 0.1;\r\n\t\t\t\tlineCnt++;\r\n\t\r\n\t\t\t\t// 차후 라인 별 색상을 적용할때를 위해 남겨놓은 주석.\r\n\t\t\t\t//var color = new THREE.Color (0xff0000);\r\n\t\t\t\t//lineColors[ i * 6 + 0 ] = color.r;\r\n\t\t\t\t//lineColors[ i * 6 + 1 ] = color.g;\r\n\t\t\t\t//lineColors[ i * 6 + 2 ] = color.b;\r\n\t\t\t\t//lineColors[ i * 6 + 3 ] = color.r;\r\n\t\t\t\t//lineColors[ i * 6 + 4 ] = color.g;\r\n\t\t\t\t//lineColors[ i * 6 + 5 ] = color.b;\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// console.log(`lineCnt[${lineCnt}] linePositions Length[${linePositions.length}]`);\r\n\t\r\n\t\tgeometry.setAttribute('position', new THREE.BufferAttribute(linePositions, 3));\r\n\t\t//geometry.addAttribute( 'vertColor', new THREE.BufferAttribute( lineColors, 3 ) );\r\n\t\tgeometry.computeBoundingSphere();\r\n\t\r\n\t\t// 실시간 차트의 그려지는 영역을 제한하기 위한 범위를 설정합니다.\r\n\t\tvar clipPlanes = [\r\n\t\t\tnew THREE.Plane(new THREE.Vector3(1, 0, 0), 64),\r\n\t\t\tnew THREE.Plane(new THREE.Vector3(0, 1, 0), -0.5),\r\n\t\t\tnew THREE.Plane(new THREE.Vector3(0, 0, -1), 60),\r\n\t\t\tnew THREE.Plane(new THREE.Vector3(0, 0, 1), 60)\r\n\t\t];\r\n\t\r\n\t\tvar shaderMaterial = new THREE.ShaderMaterial({\r\n\t\t\tvertexShader: \r\n\t\t\t\t\t`\r\n\t\t\t\t\tvarying vec2 vUv;\r\n\t\t\t\t\tvarying vec4 worldCoord;\r\n\t\t\r\n\t\t\t\t\t#include <clipping_planes_pars_vertex>\r\n\t\t\r\n\t\t\t\t\tvoid main()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t#include <begin_vertex>\r\n\t\t\t\t\t\tvUv = uv;\r\n\t\t\t\t\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\t\t\t\t\t\tgl_Position = projectionMatrix * mvPosition;\r\n\t\t\r\n\t\t\t\t\t\tworldCoord = modelMatrix * vec4( position, 1.0 );\r\n\t\t\t\t\t\t#include <clipping_planes_vertex>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t`,\r\n\t\t\tfragmentShader: \r\n\t\t\t\t\t`\r\n\t\t\t\t\tvarying vec2 vUv;\r\n\t\t\t\t\tvarying vec4 worldCoord;\r\n\t\t\t\r\n\t\t\t\t\t#include <clipping_planes_pars_fragment>\r\n\t\t\t\r\n\t\t\t\t\tvoid main() {\r\n\t\t\t\r\n\t\t\t\t\t\t#include <clipping_planes_fragment>\r\n\t\t\t\t\t\tfloat red = 0.0;\r\n\t\t\t\t\t\tfloat green = 0.0;\r\n\t\t\t\t\t\tfloat blue = 0.0;\r\n\t\t\t\t\t\tfloat alpha = 1.0;\r\n\t\t\t\r\n\t\t\t\t\t\tfloat y = worldCoord.y;\r\n\t\t\t\t\t\tif(y > 60.0)\r\n\t\t\t\t\t\t\ty = 60.0;\r\n\t\t\t\r\n\t\t\t\t\t\tfloat l = y / 0.6;\r\n\t\t\t\r\n\t\t\t\t\t\tif (l < 50.0)\r\n\t\t\t\t\t\t\tred = 0.0;\r\n\t\t\t\t\t\telse if (l >= 75.0)\r\n\t\t\t\t\t\t\tred = 1.0;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tred = (l - 50.0) / 25.0;\r\n\t\t\t\r\n\t\t\t\t\t\tif (l >= 25.0 && l < 75.0)\r\n\t\t\t\t\t\t\tgreen = 1.0;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tgreen = (25.0 - (abs(l - 50.0) - 25.0)) / 25.0;\r\n\t\t\t\r\n\t\t\t\t\t\tif (l < 25.0)\r\n\t\t\t\t\t\t\tblue = 1.0;\r\n\t\t\t\t\t\telse if(l >= 50.0)\r\n\t\t\t\t\t\t\tblue = 0.0;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tblue = (50.0 - l) / 25.0;\r\n\t\t\t\r\n\t\t\t\t\t\tif (l <= 0.0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\talpha = 0.1;\r\n\t\t\t\t\t\t\tred = 0.0;\r\n\t\t\t\t\t\t\tgreen = 0.0;\r\n\t\t\t\t\t\t\tblue = 0.0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\t\t\tif (worldCoord.z < -61.0 || worldCoord.z > 61.0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\talpha = 0.1;\r\n\t\t\t\t\t\t\tred = 0.0;\r\n\t\t\t\t\t\t\tgreen = 0.0;\r\n\t\t\t\t\t\t\tblue = 0.0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\t\t\tgl_FragColor = vec4(red, green, blue, alpha);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t`,\r\n\t\t\tside: THREE.DoubleSide,\r\n\t\t\tclipping: true,\r\n\t\t\tclippingPlanes: clipPlanes\r\n\t\t});\r\n\t\r\n\t\tprpsMeshs[sceneIdx] = new THREE.LineSegments(geometry, shaderMaterial);\r\n\t\tprpsMeshs[sceneIdx].name = `LineMeshes[${sceneIdx}]`;\r\n\t\tchart.add(prpsMeshs[sceneIdx]);\r\n\t}\r\n\r\n\tconst showData = (props : sceneProps) => {\r\n\r\n\t\t// console.log('showData');\r\n\t\t// console.log(props);\r\n\r\n\t\tlet scene : THREE.Scene = props.scene;\r\n\t\tlet fr : number = props.fr;\r\n\t\tlet sceneIdx : number = props.sceneIdx;\r\n\t\tlet prpsMeshs : THREE.LineSegments[] = props.prpsMeshs;\r\n\t\t// var p = document.getElementById(\"phase\").value;\r\n\t\r\n\t\t// 막대 이동\r\n\t\t\tfor (var i = 0; i < 4; i++) {\r\n\t\t\t\t\tvar f = 2 - (sceneIdx + 4 - i) % 4;\r\n\t\t\tprpsMeshs[i]?.position.setZ(60 * f + 30 - fr * 1.153846153846154);\r\n\t\t\r\n\t\t\t// if (prpsMeshs[i] != null)\r\n\t\t\t\t\t//     prpsMeshs[i].position.z = 60 * f + 30 - fr * 1.153846153846154;\r\n\t\t\t\t\t//console.log(\"sceneIdx=\" + sceneIdx + \", i=\" + i + \", fr=\" + fr + \", f=\" + f + \", position=\" + prpsMeshs[i].position.z);\r\n\t\t\t}\r\n\t\r\n\t\t// 타임라인 이동\r\n\t\tscene.getObjectByName(\"timeline1\").position.setZ(60 - fr * 1.153846153846154);\r\n\t\tscene.getObjectByName(\"timeline2\").position.setZ(0 - fr * 1.153846153846154);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<group name={groupName}></group>\r\n\t);\r\n}\r\n\r\nexport interface PrpsChartGraphProps\r\n{\r\n\tisRunning? : boolean,\r\n\tis3d : boolean,\r\n\ttype?: String, // RealTime or Event\r\n\tpdFile? : PrpsFile,\r\n\trtFile? : any,\r\n\tprpsStatus? : PrpsDrawingStatus,\r\n\tprpdRef? : React.MutableRefObject<typeof PrpdChartImprove>,\r\n\tcallbackInitData? : any,\r\n\tcallbackUpdateFrame? : any,\r\n\tchildren? : React.ReactNode,\r\n}","C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\file\\prpsfile.tsx",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\views\\exam\\charts\\prps\\prps-chart.tsx",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\chart\\prps\\prps-coordinate-plane.tsx",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\chart\\prps\\prps-phase-marker.tsx",[],"C:\\Users\\rlarb\\Desktop\\totalD\\src\\shared\\component\\chart\\prps\\prps-dbm-marker.tsx",[],{"ruleId":"1468","replacedBy":"1469"},{"ruleId":"1470","replacedBy":"1471"},{"ruleId":"1472","severity":1,"message":"1473","line":5,"column":8,"nodeType":"1474","messageId":"1475","endLine":5,"endColumn":23},{"ruleId":"1472","severity":1,"message":"1476","line":6,"column":8,"nodeType":"1474","messageId":"1475","endLine":6,"endColumn":30},{"ruleId":"1472","severity":1,"message":"1477","line":7,"column":8,"nodeType":"1474","messageId":"1475","endLine":7,"endColumn":24},{"ruleId":"1478","severity":1,"message":"1479","line":12,"column":1,"nodeType":"1480","endLine":30,"endColumn":2},{"ruleId":"1478","severity":1,"message":"1479","line":32,"column":1,"nodeType":"1480","endLine":97,"endColumn":3},{"ruleId":"1481","severity":1,"message":"1482","line":30,"column":6,"nodeType":"1483","endLine":30,"endColumn":8,"suggestions":"1484"},{"ruleId":"1478","severity":1,"message":"1479","line":28,"column":1,"nodeType":"1480","endLine":78,"endColumn":3},{"ruleId":"1481","severity":1,"message":"1485","line":36,"column":6,"nodeType":"1483","endLine":36,"endColumn":8,"suggestions":"1486"},{"ruleId":"1481","severity":1,"message":"1487","line":42,"column":6,"nodeType":"1483","endLine":42,"endColumn":29,"suggestions":"1488"},{"ruleId":"1489","severity":1,"message":"1490","line":61,"column":11,"nodeType":"1491","endLine":61,"endColumn":37},{"ruleId":"1492","severity":1,"message":"1493","line":83,"column":13,"nodeType":"1491","endLine":83,"endColumn":25},{"ruleId":"1489","severity":1,"message":"1490","line":84,"column":15,"nodeType":"1491","endLine":84,"endColumn":37},{"ruleId":"1472","severity":1,"message":"1494","line":1,"column":17,"nodeType":"1474","messageId":"1475","endLine":1,"endColumn":26},{"ruleId":"1472","severity":1,"message":"1495","line":1,"column":28,"nodeType":"1474","messageId":"1475","endLine":1,"endColumn":36},{"ruleId":"1472","severity":1,"message":"1496","line":7,"column":10,"nodeType":"1474","messageId":"1475","endLine":7,"endColumn":21},{"ruleId":"1472","severity":1,"message":"1497","line":7,"column":23,"nodeType":"1474","messageId":"1475","endLine":7,"endColumn":41},{"ruleId":"1481","severity":1,"message":"1482","line":45,"column":6,"nodeType":"1483","endLine":45,"endColumn":8,"suggestions":"1498"},{"ruleId":"1481","severity":1,"message":"1499","line":56,"column":6,"nodeType":"1483","endLine":56,"endColumn":32,"suggestions":"1500"},{"ruleId":"1492","severity":1,"message":"1501","line":74,"column":15,"nodeType":"1491","endLine":74,"endColumn":89},{"ruleId":"1492","severity":1,"message":"1493","line":82,"column":15,"nodeType":"1491","endLine":82,"endColumn":40},{"ruleId":"1492","severity":1,"message":"1493","line":97,"column":15,"nodeType":"1491","endLine":97,"endColumn":27},{"ruleId":"1492","severity":1,"message":"1493","line":112,"column":15,"nodeType":"1491","endLine":112,"endColumn":27},{"ruleId":"1492","severity":1,"message":"1493","line":127,"column":18,"nodeType":"1491","endLine":127,"endColumn":30},{"ruleId":"1481","severity":1,"message":"1482","line":24,"column":6,"nodeType":"1483","endLine":24,"endColumn":8,"suggestions":"1502"},{"ruleId":"1492","severity":1,"message":"1501","line":32,"column":34,"nodeType":"1491","endLine":32,"endColumn":37},{"ruleId":"1472","severity":1,"message":"1503","line":14,"column":10,"nodeType":"1474","messageId":"1475","endLine":14,"endColumn":26},{"ruleId":"1472","severity":1,"message":"1504","line":15,"column":8,"nodeType":"1474","messageId":"1475","endLine":15,"endColumn":21},{"ruleId":"1481","severity":1,"message":"1482","line":31,"column":6,"nodeType":"1483","endLine":31,"endColumn":8,"suggestions":"1505"},{"ruleId":"1478","severity":1,"message":"1479","line":30,"column":1,"nodeType":"1480","endLine":85,"endColumn":2},{"ruleId":"1478","severity":1,"message":"1479","line":18,"column":1,"nodeType":"1480","endLine":50,"endColumn":2},{"ruleId":"1478","severity":1,"message":"1479","line":17,"column":1,"nodeType":"1480","endLine":35,"endColumn":3},{"ruleId":"1478","severity":1,"message":"1479","line":19,"column":1,"nodeType":"1480","endLine":46,"endColumn":3},{"ruleId":"1506","severity":1,"message":"1507","line":27,"column":5,"nodeType":"1508","messageId":"1509","endLine":30,"endColumn":9},{"ruleId":"1472","severity":1,"message":"1510","line":2,"column":8,"nodeType":"1474","messageId":"1475","endLine":2,"endColumn":13},{"ruleId":"1472","severity":1,"message":"1511","line":3,"column":10,"nodeType":"1474","messageId":"1475","endLine":3,"endColumn":17},{"ruleId":"1472","severity":1,"message":"1512","line":3,"column":19,"nodeType":"1474","messageId":"1475","endLine":3,"endColumn":26},{"ruleId":"1478","severity":1,"message":"1479","line":16,"column":1,"nodeType":"1480","endLine":28,"endColumn":2},{"ruleId":"1506","severity":1,"message":"1507","line":19,"column":5,"nodeType":"1508","messageId":"1509","endLine":24,"endColumn":8},{"ruleId":"1472","severity":1,"message":"1512","line":3,"column":19,"nodeType":"1474","messageId":"1475","endLine":3,"endColumn":26},{"ruleId":"1478","severity":1,"message":"1479","line":20,"column":1,"nodeType":"1480","endLine":54,"endColumn":2},{"ruleId":"1478","severity":1,"message":"1479","line":20,"column":1,"nodeType":"1480","endLine":54,"endColumn":2},{"ruleId":"1478","severity":1,"message":"1479","line":26,"column":1,"nodeType":"1480","endLine":60,"endColumn":2},{"ruleId":"1478","severity":1,"message":"1479","line":23,"column":1,"nodeType":"1480","endLine":47,"endColumn":2},{"ruleId":"1478","severity":1,"message":"1479","line":25,"column":1,"nodeType":"1480","endLine":67,"endColumn":2},{"ruleId":"1513","severity":1,"message":"1514","line":93,"column":46,"nodeType":"1515","messageId":"1516","endLine":93,"endColumn":47},{"ruleId":"1513","severity":1,"message":"1514","line":106,"column":46,"nodeType":"1515","messageId":"1516","endLine":106,"endColumn":47},{"ruleId":"1478","severity":1,"message":"1479","line":28,"column":1,"nodeType":"1480","endLine":68,"endColumn":2},{"ruleId":"1513","severity":1,"message":"1514","line":94,"column":45,"nodeType":"1515","messageId":"1516","endLine":94,"endColumn":46},{"ruleId":"1513","severity":1,"message":"1514","line":104,"column":55,"nodeType":"1515","messageId":"1516","endLine":104,"endColumn":56},{"ruleId":"1478","severity":1,"message":"1479","line":27,"column":1,"nodeType":"1480","endLine":61,"endColumn":2},{"ruleId":"1472","severity":1,"message":"1517","line":4,"column":10,"nodeType":"1474","messageId":"1475","endLine":4,"endColumn":31},{"ruleId":"1478","severity":1,"message":"1479","line":19,"column":1,"nodeType":"1480","endLine":42,"endColumn":2},{"ruleId":"1513","severity":1,"message":"1514","line":50,"column":44,"nodeType":"1515","messageId":"1516","endLine":50,"endColumn":45},{"ruleId":"1472","severity":1,"message":"1518","line":4,"column":10,"nodeType":"1474","messageId":"1475","endLine":4,"endColumn":31},{"ruleId":"1478","severity":1,"message":"1479","line":20,"column":1,"nodeType":"1480","endLine":43,"endColumn":2},{"ruleId":"1513","severity":1,"message":"1514","line":51,"column":44,"nodeType":"1515","messageId":"1516","endLine":51,"endColumn":45},{"ruleId":"1472","severity":1,"message":"1517","line":4,"column":10,"nodeType":"1474","messageId":"1475","endLine":4,"endColumn":31},{"ruleId":"1478","severity":1,"message":"1479","line":19,"column":1,"nodeType":"1480","endLine":42,"endColumn":2},{"ruleId":"1513","severity":1,"message":"1514","line":50,"column":44,"nodeType":"1515","messageId":"1516","endLine":50,"endColumn":45},{"ruleId":"1478","severity":1,"message":"1479","line":18,"column":1,"nodeType":"1480","endLine":42,"endColumn":2},{"ruleId":"1513","severity":1,"message":"1514","line":49,"column":44,"nodeType":"1515","messageId":"1516","endLine":49,"endColumn":45},{"ruleId":"1478","severity":1,"message":"1479","line":24,"column":1,"nodeType":"1480","endLine":65,"endColumn":2},{"ruleId":"1513","severity":1,"message":"1514","line":73,"column":47,"nodeType":"1515","messageId":"1516","endLine":73,"endColumn":48},{"ruleId":"1513","severity":1,"message":"1514","line":90,"column":49,"nodeType":"1515","messageId":"1516","endLine":90,"endColumn":50},{"ruleId":"1513","severity":1,"message":"1514","line":104,"column":51,"nodeType":"1515","messageId":"1516","endLine":104,"endColumn":52},{"ruleId":"1472","severity":1,"message":"1517","line":4,"column":10,"nodeType":"1474","messageId":"1475","endLine":4,"endColumn":31},{"ruleId":"1478","severity":1,"message":"1479","line":19,"column":1,"nodeType":"1480","endLine":42,"endColumn":2},{"ruleId":"1513","severity":1,"message":"1514","line":50,"column":48,"nodeType":"1515","messageId":"1516","endLine":50,"endColumn":49},{"ruleId":"1519","severity":1,"message":"1520","line":19,"column":14,"nodeType":"1474","messageId":"1521","endLine":19,"endColumn":38},{"ruleId":"1481","severity":1,"message":"1482","line":29,"column":6,"nodeType":"1483","endLine":29,"endColumn":8,"suggestions":"1522"},{"ruleId":"1492","severity":1,"message":"1493","line":58,"column":17,"nodeType":"1491","endLine":58,"endColumn":89},{"ruleId":"1472","severity":1,"message":"1495","line":1,"column":28,"nodeType":"1474","messageId":"1475","endLine":1,"endColumn":36},{"ruleId":"1519","severity":1,"message":"1523","line":12,"column":14,"nodeType":"1474","messageId":"1521","endLine":12,"endColumn":29},{"ruleId":"1478","severity":1,"message":"1479","line":19,"column":1,"nodeType":"1480","endLine":42,"endColumn":2},{"ruleId":"1513","severity":1,"message":"1514","line":50,"column":47,"nodeType":"1515","messageId":"1516","endLine":50,"endColumn":48},{"ruleId":"1478","severity":1,"message":"1479","line":27,"column":1,"nodeType":"1480","endLine":78,"endColumn":2},{"ruleId":"1513","severity":1,"message":"1514","line":105,"column":45,"nodeType":"1515","messageId":"1516","endLine":105,"endColumn":46},{"ruleId":"1513","severity":1,"message":"1514","line":118,"column":46,"nodeType":"1515","messageId":"1516","endLine":118,"endColumn":47},{"ruleId":"1513","severity":1,"message":"1514","line":133,"column":45,"nodeType":"1515","messageId":"1516","endLine":133,"endColumn":46},{"ruleId":"1478","severity":1,"message":"1479","line":19,"column":1,"nodeType":"1480","endLine":42,"endColumn":2},{"ruleId":"1513","severity":1,"message":"1514","line":50,"column":39,"nodeType":"1515","messageId":"1516","endLine":50,"endColumn":40},{"ruleId":"1478","severity":1,"message":"1479","line":18,"column":1,"nodeType":"1480","endLine":42,"endColumn":2},{"ruleId":"1513","severity":1,"message":"1514","line":50,"column":44,"nodeType":"1515","messageId":"1516","endLine":50,"endColumn":45},{"ruleId":"1478","severity":1,"message":"1479","line":19,"column":1,"nodeType":"1480","endLine":43,"endColumn":2},{"ruleId":"1513","severity":1,"message":"1514","line":51,"column":35,"nodeType":"1515","messageId":"1516","endLine":51,"endColumn":36},{"ruleId":"1478","severity":1,"message":"1479","line":20,"column":1,"nodeType":"1480","endLine":44,"endColumn":2},{"ruleId":"1513","severity":1,"message":"1514","line":52,"column":35,"nodeType":"1515","messageId":"1516","endLine":52,"endColumn":36},{"ruleId":"1478","severity":1,"message":"1479","line":20,"column":1,"nodeType":"1480","endLine":44,"endColumn":2},{"ruleId":"1513","severity":1,"message":"1514","line":52,"column":35,"nodeType":"1515","messageId":"1516","endLine":52,"endColumn":36},{"ruleId":"1478","severity":1,"message":"1479","line":19,"column":1,"nodeType":"1480","endLine":43,"endColumn":2},{"ruleId":"1513","severity":1,"message":"1514","line":51,"column":35,"nodeType":"1515","messageId":"1516","endLine":51,"endColumn":36},{"ruleId":"1478","severity":1,"message":"1479","line":19,"column":1,"nodeType":"1480","endLine":43,"endColumn":2},{"ruleId":"1513","severity":1,"message":"1514","line":51,"column":35,"nodeType":"1515","messageId":"1516","endLine":51,"endColumn":36},{"ruleId":"1478","severity":1,"message":"1479","line":19,"column":1,"nodeType":"1480","endLine":43,"endColumn":2},{"ruleId":"1513","severity":1,"message":"1514","line":51,"column":35,"nodeType":"1515","messageId":"1516","endLine":51,"endColumn":36},{"ruleId":"1478","severity":1,"message":"1479","line":20,"column":1,"nodeType":"1480","endLine":44,"endColumn":2},{"ruleId":"1513","severity":1,"message":"1514","line":52,"column":35,"nodeType":"1515","messageId":"1516","endLine":52,"endColumn":36},{"ruleId":"1472","severity":1,"message":"1524","line":2,"column":23,"nodeType":"1474","messageId":"1475","endLine":2,"endColumn":30},{"ruleId":"1478","severity":1,"message":"1479","line":51,"column":1,"nodeType":"1480","endLine":97,"endColumn":3},{"ruleId":"1513","severity":1,"message":"1514","line":129,"column":42,"nodeType":"1515","messageId":"1516","endLine":129,"endColumn":43},{"ruleId":"1513","severity":1,"message":"1514","line":129,"column":63,"nodeType":"1515","messageId":"1516","endLine":129,"endColumn":64},{"ruleId":"1513","severity":1,"message":"1514","line":155,"column":46,"nodeType":"1515","messageId":"1516","endLine":155,"endColumn":47},{"ruleId":"1525","severity":1,"message":"1526","line":80,"column":28,"nodeType":"1515","messageId":"1509","endLine":80,"endColumn":30},{"ruleId":"1525","severity":1,"message":"1526","line":137,"column":47,"nodeType":"1515","messageId":"1509","endLine":137,"endColumn":49},{"ruleId":"1525","severity":1,"message":"1526","line":225,"column":46,"nodeType":"1515","messageId":"1509","endLine":225,"endColumn":48},{"ruleId":"1525","severity":1,"message":"1526","line":378,"column":48,"nodeType":"1515","messageId":"1509","endLine":378,"endColumn":50},{"ruleId":"1525","severity":1,"message":"1526","line":82,"column":12,"nodeType":"1515","messageId":"1509","endLine":82,"endColumn":14},{"ruleId":"1525","severity":1,"message":"1526","line":85,"column":19,"nodeType":"1515","messageId":"1509","endLine":85,"endColumn":21},{"ruleId":"1481","severity":1,"message":"1527","line":461,"column":5,"nodeType":"1483","endLine":461,"endColumn":32,"suggestions":"1528"},{"ruleId":"1525","severity":1,"message":"1526","line":465,"column":28,"nodeType":"1515","messageId":"1509","endLine":465,"endColumn":30},{"ruleId":"1472","severity":1,"message":"1529","line":4,"column":10,"nodeType":"1474","messageId":"1475","endLine":4,"endColumn":14},{"ruleId":"1472","severity":1,"message":"1530","line":5,"column":8,"nodeType":"1474","messageId":"1475","endLine":5,"endColumn":14},{"ruleId":"1472","severity":1,"message":"1531","line":6,"column":8,"nodeType":"1474","messageId":"1475","endLine":6,"endColumn":23},{"ruleId":"1525","severity":1,"message":"1526","line":79,"column":29,"nodeType":"1515","messageId":"1509","endLine":79,"endColumn":31},{"ruleId":"1525","severity":1,"message":"1526","line":125,"column":27,"nodeType":"1515","messageId":"1509","endLine":125,"endColumn":29},{"ruleId":"1525","severity":1,"message":"1526","line":178,"column":45,"nodeType":"1515","messageId":"1509","endLine":178,"endColumn":47},{"ruleId":"1525","severity":1,"message":"1526","line":224,"column":45,"nodeType":"1515","messageId":"1509","endLine":224,"endColumn":47},{"ruleId":"1472","severity":1,"message":"1529","line":4,"column":10,"nodeType":"1474","messageId":"1475","endLine":4,"endColumn":14},{"ruleId":"1472","severity":1,"message":"1530","line":5,"column":8,"nodeType":"1474","messageId":"1475","endLine":5,"endColumn":14},{"ruleId":"1472","severity":1,"message":"1531","line":6,"column":8,"nodeType":"1474","messageId":"1475","endLine":6,"endColumn":23},{"ruleId":"1525","severity":1,"message":"1526","line":84,"column":28,"nodeType":"1515","messageId":"1509","endLine":84,"endColumn":30},{"ruleId":"1525","severity":1,"message":"1526","line":130,"column":27,"nodeType":"1515","messageId":"1509","endLine":130,"endColumn":29},{"ruleId":"1525","severity":1,"message":"1526","line":183,"column":44,"nodeType":"1515","messageId":"1509","endLine":183,"endColumn":46},{"ruleId":"1525","severity":1,"message":"1526","line":229,"column":44,"nodeType":"1515","messageId":"1509","endLine":229,"endColumn":46},{"ruleId":"1525","severity":1,"message":"1526","line":78,"column":28,"nodeType":"1515","messageId":"1509","endLine":78,"endColumn":30},{"ruleId":"1525","severity":1,"message":"1526","line":135,"column":48,"nodeType":"1515","messageId":"1509","endLine":135,"endColumn":50},{"ruleId":"1525","severity":1,"message":"1526","line":223,"column":47,"nodeType":"1515","messageId":"1509","endLine":223,"endColumn":49},{"ruleId":"1525","severity":1,"message":"1526","line":376,"column":49,"nodeType":"1515","messageId":"1509","endLine":376,"endColumn":51},{"ruleId":"1525","severity":1,"message":"1526","line":78,"column":28,"nodeType":"1515","messageId":"1509","endLine":78,"endColumn":30},{"ruleId":"1525","severity":1,"message":"1526","line":135,"column":46,"nodeType":"1515","messageId":"1509","endLine":135,"endColumn":48},{"ruleId":"1525","severity":1,"message":"1526","line":223,"column":46,"nodeType":"1515","messageId":"1509","endLine":223,"endColumn":48},{"ruleId":"1525","severity":1,"message":"1526","line":376,"column":48,"nodeType":"1515","messageId":"1509","endLine":376,"endColumn":50},{"ruleId":"1472","severity":1,"message":"1529","line":4,"column":10,"nodeType":"1474","messageId":"1475","endLine":4,"endColumn":14},{"ruleId":"1472","severity":1,"message":"1530","line":5,"column":8,"nodeType":"1474","messageId":"1475","endLine":5,"endColumn":14},{"ruleId":"1472","severity":1,"message":"1531","line":6,"column":8,"nodeType":"1474","messageId":"1475","endLine":6,"endColumn":23},{"ruleId":"1525","severity":1,"message":"1526","line":89,"column":27,"nodeType":"1515","messageId":"1509","endLine":89,"endColumn":29},{"ruleId":"1525","severity":1,"message":"1526","line":147,"column":47,"nodeType":"1515","messageId":"1509","endLine":147,"endColumn":49},{"ruleId":"1525","severity":1,"message":"1526","line":226,"column":47,"nodeType":"1515","messageId":"1509","endLine":226,"endColumn":49},{"ruleId":"1525","severity":1,"message":"1526","line":317,"column":47,"nodeType":"1515","messageId":"1509","endLine":317,"endColumn":49},{"ruleId":"1525","severity":1,"message":"1526","line":433,"column":45,"nodeType":"1515","messageId":"1509","endLine":433,"endColumn":47},{"ruleId":"1525","severity":1,"message":"1526","line":549,"column":45,"nodeType":"1515","messageId":"1509","endLine":549,"endColumn":47},{"ruleId":"1481","severity":1,"message":"1482","line":30,"column":6,"nodeType":"1483","endLine":30,"endColumn":8,"suggestions":"1532"},{"ruleId":"1481","severity":1,"message":"1533","line":35,"column":6,"nodeType":"1483","endLine":35,"endColumn":16,"suggestions":"1534"},{"ruleId":"1492","severity":1,"message":"1493","line":79,"column":17,"nodeType":"1491","endLine":79,"endColumn":28},{"ruleId":"1489","severity":1,"message":"1490","line":79,"column":28,"nodeType":"1491","endLine":79,"endColumn":85},{"ruleId":"1492","severity":1,"message":"1493","line":80,"column":17,"nodeType":"1491","endLine":80,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":81,"column":17,"nodeType":"1491","endLine":81,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1501","line":180,"column":21,"nodeType":"1491","endLine":180,"endColumn":110},{"ruleId":"1492","severity":1,"message":"1501","line":225,"column":33,"nodeType":"1491","endLine":226,"endColumn":86},{"ruleId":"1525","severity":1,"message":"1526","line":96,"column":17,"nodeType":"1515","messageId":"1509","endLine":96,"endColumn":19},{"ruleId":"1525","severity":1,"message":"1535","line":113,"column":35,"nodeType":"1515","messageId":"1509","endLine":113,"endColumn":37},{"ruleId":"1525","severity":1,"message":"1526","line":164,"column":28,"nodeType":"1515","messageId":"1509","endLine":164,"endColumn":30},{"ruleId":"1525","severity":1,"message":"1526","line":224,"column":44,"nodeType":"1515","messageId":"1509","endLine":224,"endColumn":46},{"ruleId":"1525","severity":1,"message":"1526","line":311,"column":43,"nodeType":"1515","messageId":"1509","endLine":311,"endColumn":45},{"ruleId":"1525","severity":1,"message":"1526","line":413,"column":42,"nodeType":"1515","messageId":"1509","endLine":413,"endColumn":44},{"ruleId":"1525","severity":1,"message":"1526","line":499,"column":42,"nodeType":"1515","messageId":"1509","endLine":499,"endColumn":44},{"ruleId":"1525","severity":1,"message":"1526","line":565,"column":42,"nodeType":"1515","messageId":"1509","endLine":565,"endColumn":44},{"ruleId":"1525","severity":1,"message":"1526","line":665,"column":42,"nodeType":"1515","messageId":"1509","endLine":665,"endColumn":44},{"ruleId":"1481","severity":1,"message":"1536","line":69,"column":6,"nodeType":"1483","endLine":69,"endColumn":20,"suggestions":"1537"},{"ruleId":"1481","severity":1,"message":"1536","line":76,"column":6,"nodeType":"1483","endLine":76,"endColumn":20,"suggestions":"1538"},{"ruleId":"1481","severity":1,"message":"1536","line":57,"column":6,"nodeType":"1483","endLine":57,"endColumn":20,"suggestions":"1539"},{"ruleId":"1472","severity":1,"message":"1540","line":6,"column":10,"nodeType":"1474","messageId":"1475","endLine":6,"endColumn":18},{"ruleId":"1472","severity":1,"message":"1510","line":7,"column":8,"nodeType":"1474","messageId":"1475","endLine":7,"endColumn":13},{"ruleId":"1472","severity":1,"message":"1541","line":8,"column":10,"nodeType":"1474","messageId":"1475","endLine":8,"endColumn":20},{"ruleId":"1472","severity":1,"message":"1542","line":10,"column":10,"nodeType":"1474","messageId":"1475","endLine":10,"endColumn":19},{"ruleId":"1481","severity":1,"message":"1536","line":69,"column":6,"nodeType":"1483","endLine":69,"endColumn":20,"suggestions":"1543"},{"ruleId":"1472","severity":1,"message":"1540","line":6,"column":10,"nodeType":"1474","messageId":"1475","endLine":6,"endColumn":18},{"ruleId":"1472","severity":1,"message":"1510","line":7,"column":8,"nodeType":"1474","messageId":"1475","endLine":7,"endColumn":13},{"ruleId":"1472","severity":1,"message":"1541","line":9,"column":10,"nodeType":"1474","messageId":"1475","endLine":9,"endColumn":20},{"ruleId":"1472","severity":1,"message":"1542","line":10,"column":10,"nodeType":"1474","messageId":"1475","endLine":10,"endColumn":19},{"ruleId":"1481","severity":1,"message":"1536","line":69,"column":6,"nodeType":"1483","endLine":69,"endColumn":20,"suggestions":"1544"},{"ruleId":"1472","severity":1,"message":"1530","line":4,"column":8,"nodeType":"1474","messageId":"1475","endLine":4,"endColumn":14},{"ruleId":"1472","severity":1,"message":"1545","line":4,"column":18,"nodeType":"1474","messageId":"1475","endLine":4,"endColumn":24},{"ruleId":"1472","severity":1,"message":"1546","line":6,"column":8,"nodeType":"1474","messageId":"1475","endLine":6,"endColumn":13},{"ruleId":"1481","severity":1,"message":"1482","line":60,"column":6,"nodeType":"1483","endLine":60,"endColumn":8,"suggestions":"1547"},{"ruleId":"1481","severity":1,"message":"1536","line":73,"column":6,"nodeType":"1483","endLine":73,"endColumn":20,"suggestions":"1548"},{"ruleId":"1481","severity":1,"message":"1549","line":188,"column":5,"nodeType":"1483","endLine":188,"endColumn":24,"suggestions":"1550"},{"ruleId":"1492","severity":1,"message":"1493","line":277,"column":19,"nodeType":"1491","endLine":277,"endColumn":57},{"ruleId":"1492","severity":1,"message":"1493","line":315,"column":19,"nodeType":"1491","endLine":315,"endColumn":57},{"ruleId":"1492","severity":1,"message":"1493","line":347,"column":19,"nodeType":"1491","endLine":347,"endColumn":57},{"ruleId":"1492","severity":1,"message":"1493","line":379,"column":19,"nodeType":"1491","endLine":379,"endColumn":57},{"ruleId":"1492","severity":1,"message":"1501","line":30,"column":21,"nodeType":"1491","endLine":30,"endColumn":97},{"ruleId":"1492","severity":1,"message":"1501","line":31,"column":21,"nodeType":"1491","endLine":31,"endColumn":98},{"ruleId":"1472","severity":1,"message":"1542","line":6,"column":10,"nodeType":"1474","messageId":"1475","endLine":6,"endColumn":19},{"ruleId":"1472","severity":1,"message":"1510","line":7,"column":8,"nodeType":"1474","messageId":"1475","endLine":7,"endColumn":13},{"ruleId":"1472","severity":1,"message":"1540","line":9,"column":10,"nodeType":"1474","messageId":"1475","endLine":9,"endColumn":18},{"ruleId":"1481","severity":1,"message":"1536","line":69,"column":6,"nodeType":"1483","endLine":69,"endColumn":20,"suggestions":"1551"},{"ruleId":"1525","severity":1,"message":"1526","line":81,"column":12,"nodeType":"1515","messageId":"1509","endLine":81,"endColumn":14},{"ruleId":"1525","severity":1,"message":"1526","line":84,"column":19,"nodeType":"1515","messageId":"1509","endLine":84,"endColumn":21},{"ruleId":"1481","severity":1,"message":"1527","line":370,"column":5,"nodeType":"1483","endLine":370,"endColumn":28,"suggestions":"1552"},{"ruleId":"1525","severity":1,"message":"1526","line":374,"column":28,"nodeType":"1515","messageId":"1509","endLine":374,"endColumn":30},{"ruleId":"1472","severity":1,"message":"1529","line":4,"column":10,"nodeType":"1474","messageId":"1475","endLine":4,"endColumn":14},{"ruleId":"1492","severity":1,"message":"1501","line":34,"column":21,"nodeType":"1491","endLine":34,"endColumn":112},{"ruleId":"1492","severity":1,"message":"1501","line":35,"column":21,"nodeType":"1491","endLine":35,"endColumn":122},{"ruleId":"1492","severity":1,"message":"1501","line":36,"column":21,"nodeType":"1491","endLine":36,"endColumn":120},{"ruleId":"1492","severity":1,"message":"1501","line":37,"column":21,"nodeType":"1491","endLine":37,"endColumn":110},{"ruleId":"1492","severity":1,"message":"1501","line":38,"column":21,"nodeType":"1491","endLine":38,"endColumn":118},{"ruleId":"1472","severity":1,"message":"1553","line":7,"column":8,"nodeType":"1474","messageId":"1475","endLine":7,"endColumn":22},{"ruleId":"1481","severity":1,"message":"1554","line":31,"column":6,"nodeType":"1483","endLine":31,"endColumn":16,"suggestions":"1555"},{"ruleId":"1525","severity":1,"message":"1526","line":129,"column":67,"nodeType":"1515","messageId":"1509","endLine":129,"endColumn":69},{"ruleId":"1525","severity":1,"message":"1526","line":129,"column":98,"nodeType":"1515","messageId":"1509","endLine":129,"endColumn":100},{"ruleId":"1492","severity":1,"message":"1501","line":139,"column":25,"nodeType":"1491","endLine":139,"endColumn":114},{"ruleId":"1492","severity":1,"message":"1501","line":155,"column":31,"nodeType":"1491","endLine":160,"endColumn":32},{"ruleId":"1472","severity":1,"message":"1556","line":5,"column":8,"nodeType":"1474","messageId":"1475","endLine":5,"endColumn":15},{"ruleId":"1472","severity":1,"message":"1557","line":7,"column":10,"nodeType":"1474","messageId":"1475","endLine":7,"endColumn":26},{"ruleId":"1481","severity":1,"message":"1482","line":18,"column":6,"nodeType":"1483","endLine":18,"endColumn":8,"suggestions":"1558"},{"ruleId":"1525","severity":1,"message":"1535","line":159,"column":82,"nodeType":"1515","messageId":"1509","endLine":159,"endColumn":84},{"ruleId":"1525","severity":1,"message":"1535","line":180,"column":86,"nodeType":"1515","messageId":"1509","endLine":180,"endColumn":88},{"ruleId":"1525","severity":1,"message":"1535","line":196,"column":83,"nodeType":"1515","messageId":"1509","endLine":196,"endColumn":85},{"ruleId":"1525","severity":1,"message":"1535","line":207,"column":78,"nodeType":"1515","messageId":"1509","endLine":207,"endColumn":80},{"ruleId":"1525","severity":1,"message":"1535","line":218,"column":81,"nodeType":"1515","messageId":"1509","endLine":218,"endColumn":83},{"ruleId":"1525","severity":1,"message":"1535","line":229,"column":81,"nodeType":"1515","messageId":"1509","endLine":229,"endColumn":83},{"ruleId":"1525","severity":1,"message":"1535","line":240,"column":87,"nodeType":"1515","messageId":"1509","endLine":240,"endColumn":89},{"ruleId":"1525","severity":1,"message":"1535","line":251,"column":60,"nodeType":"1515","messageId":"1509","endLine":251,"endColumn":62},{"ruleId":"1481","severity":1,"message":"1482","line":16,"column":6,"nodeType":"1483","endLine":16,"endColumn":8,"suggestions":"1559"},{"ruleId":"1525","severity":1,"message":"1535","line":105,"column":78,"nodeType":"1515","messageId":"1509","endLine":105,"endColumn":80},{"ruleId":"1525","severity":1,"message":"1535","line":114,"column":80,"nodeType":"1515","messageId":"1509","endLine":114,"endColumn":82},{"ruleId":"1525","severity":1,"message":"1535","line":123,"column":81,"nodeType":"1515","messageId":"1509","endLine":123,"endColumn":83},{"ruleId":"1525","severity":1,"message":"1535","line":132,"column":79,"nodeType":"1515","messageId":"1509","endLine":132,"endColumn":81},{"ruleId":"1525","severity":1,"message":"1535","line":141,"column":80,"nodeType":"1515","messageId":"1509","endLine":141,"endColumn":82},{"ruleId":"1525","severity":1,"message":"1535","line":151,"column":78,"nodeType":"1515","messageId":"1509","endLine":151,"endColumn":80},{"ruleId":"1525","severity":1,"message":"1535","line":160,"column":79,"nodeType":"1515","messageId":"1509","endLine":160,"endColumn":81},{"ruleId":"1525","severity":1,"message":"1535","line":170,"column":90,"nodeType":"1515","messageId":"1509","endLine":170,"endColumn":92},{"ruleId":"1525","severity":1,"message":"1535","line":179,"column":91,"nodeType":"1515","messageId":"1509","endLine":179,"endColumn":93},{"ruleId":"1525","severity":1,"message":"1535","line":189,"column":90,"nodeType":"1515","messageId":"1509","endLine":189,"endColumn":92},{"ruleId":"1525","severity":1,"message":"1535","line":198,"column":91,"nodeType":"1515","messageId":"1509","endLine":198,"endColumn":93},{"ruleId":"1525","severity":1,"message":"1535","line":208,"column":90,"nodeType":"1515","messageId":"1509","endLine":208,"endColumn":92},{"ruleId":"1525","severity":1,"message":"1535","line":217,"column":91,"nodeType":"1515","messageId":"1509","endLine":217,"endColumn":93},{"ruleId":"1525","severity":1,"message":"1535","line":227,"column":79,"nodeType":"1515","messageId":"1509","endLine":227,"endColumn":81},{"ruleId":"1525","severity":1,"message":"1535","line":236,"column":78,"nodeType":"1515","messageId":"1509","endLine":236,"endColumn":80},{"ruleId":"1472","severity":1,"message":"1495","line":1,"column":28,"nodeType":"1474","messageId":"1475","endLine":1,"endColumn":36},{"ruleId":"1481","severity":1,"message":"1560","line":14,"column":6,"nodeType":"1483","endLine":14,"endColumn":8,"suggestions":"1561"},{"ruleId":"1472","severity":1,"message":"1495","line":1,"column":28,"nodeType":"1474","messageId":"1475","endLine":1,"endColumn":36},{"ruleId":"1481","severity":1,"message":"1562","line":14,"column":6,"nodeType":"1483","endLine":14,"endColumn":8,"suggestions":"1563"},{"ruleId":"1564","severity":1,"message":"1565","line":36,"column":16,"nodeType":"1566","messageId":"1567","endLine":36,"endColumn":18},{"ruleId":"1472","severity":1,"message":"1568","line":1,"column":28,"nodeType":"1474","messageId":"1475","endLine":1,"endColumn":35},{"ruleId":"1569","severity":1,"message":"1570","line":17,"column":15,"nodeType":"1571","messageId":"1572","endLine":17,"endColumn":26,"fix":"1573"},{"ruleId":"1481","severity":1,"message":"1574","line":23,"column":6,"nodeType":"1483","endLine":23,"endColumn":8,"suggestions":"1575"},{"ruleId":"1481","severity":1,"message":"1576","line":78,"column":6,"nodeType":"1483","endLine":78,"endColumn":30,"suggestions":"1577"},{"ruleId":"1492","severity":1,"message":"1493","line":260,"column":21,"nodeType":"1491","endLine":260,"endColumn":71},{"ruleId":"1569","severity":1,"message":"1570","line":17,"column":15,"nodeType":"1571","messageId":"1572","endLine":17,"endColumn":26,"fix":"1578"},{"ruleId":"1481","severity":1,"message":"1574","line":23,"column":6,"nodeType":"1483","endLine":23,"endColumn":8,"suggestions":"1579"},{"ruleId":"1481","severity":1,"message":"1576","line":35,"column":6,"nodeType":"1483","endLine":35,"endColumn":31,"suggestions":"1580"},{"ruleId":"1492","severity":1,"message":"1493","line":172,"column":21,"nodeType":"1491","endLine":172,"endColumn":71},{"ruleId":"1472","severity":1,"message":"1568","line":1,"column":28,"nodeType":"1474","messageId":"1475","endLine":1,"endColumn":35},{"ruleId":"1569","severity":1,"message":"1570","line":17,"column":15,"nodeType":"1571","messageId":"1572","endLine":17,"endColumn":26,"fix":"1581"},{"ruleId":"1481","severity":1,"message":"1574","line":23,"column":5,"nodeType":"1483","endLine":23,"endColumn":7,"suggestions":"1582"},{"ruleId":"1525","severity":1,"message":"1526","line":52,"column":81,"nodeType":"1515","messageId":"1509","endLine":52,"endColumn":83},{"ruleId":"1525","severity":1,"message":"1535","line":62,"column":22,"nodeType":"1515","messageId":"1509","endLine":62,"endColumn":24},{"ruleId":"1525","severity":1,"message":"1535","line":66,"column":24,"nodeType":"1515","messageId":"1509","endLine":66,"endColumn":26},{"ruleId":"1525","severity":1,"message":"1535","line":70,"column":21,"nodeType":"1515","messageId":"1509","endLine":70,"endColumn":23},{"ruleId":"1525","severity":1,"message":"1535","line":74,"column":24,"nodeType":"1515","messageId":"1509","endLine":74,"endColumn":26},{"ruleId":"1525","severity":1,"message":"1535","line":78,"column":20,"nodeType":"1515","messageId":"1509","endLine":78,"endColumn":22},{"ruleId":"1481","severity":1,"message":"1576","line":114,"column":6,"nodeType":"1483","endLine":114,"endColumn":31,"suggestions":"1583"},{"ruleId":"1492","severity":1,"message":"1493","line":299,"column":21,"nodeType":"1491","endLine":299,"endColumn":71},{"ruleId":"1569","severity":1,"message":"1570","line":17,"column":15,"nodeType":"1571","messageId":"1572","endLine":17,"endColumn":26,"fix":"1584"},{"ruleId":"1481","severity":1,"message":"1482","line":24,"column":6,"nodeType":"1483","endLine":24,"endColumn":8,"suggestions":"1585"},{"ruleId":"1481","severity":1,"message":"1576","line":80,"column":6,"nodeType":"1483","endLine":80,"endColumn":34,"suggestions":"1586"},{"ruleId":"1492","severity":1,"message":"1493","line":236,"column":21,"nodeType":"1491","endLine":236,"endColumn":71},{"ruleId":"1472","severity":1,"message":"1568","line":1,"column":28,"nodeType":"1474","messageId":"1475","endLine":1,"endColumn":35},{"ruleId":"1569","severity":1,"message":"1570","line":17,"column":15,"nodeType":"1571","messageId":"1572","endLine":17,"endColumn":26,"fix":"1587"},{"ruleId":"1481","severity":1,"message":"1574","line":23,"column":6,"nodeType":"1483","endLine":23,"endColumn":8,"suggestions":"1588"},{"ruleId":"1525","severity":1,"message":"1526","line":52,"column":81,"nodeType":"1515","messageId":"1509","endLine":52,"endColumn":83},{"ruleId":"1525","severity":1,"message":"1535","line":62,"column":22,"nodeType":"1515","messageId":"1509","endLine":62,"endColumn":24},{"ruleId":"1525","severity":1,"message":"1535","line":66,"column":24,"nodeType":"1515","messageId":"1509","endLine":66,"endColumn":26},{"ruleId":"1525","severity":1,"message":"1535","line":70,"column":21,"nodeType":"1515","messageId":"1509","endLine":70,"endColumn":23},{"ruleId":"1525","severity":1,"message":"1535","line":74,"column":20,"nodeType":"1515","messageId":"1509","endLine":74,"endColumn":22},{"ruleId":"1525","severity":1,"message":"1535","line":78,"column":20,"nodeType":"1515","messageId":"1509","endLine":78,"endColumn":22},{"ruleId":"1525","severity":1,"message":"1535","line":82,"column":23,"nodeType":"1515","messageId":"1509","endLine":82,"endColumn":25},{"ruleId":"1481","severity":1,"message":"1576","line":118,"column":6,"nodeType":"1483","endLine":118,"endColumn":31,"suggestions":"1589"},{"ruleId":"1492","severity":1,"message":"1493","line":304,"column":21,"nodeType":"1491","endLine":304,"endColumn":71},{"ruleId":"1569","severity":1,"message":"1570","line":17,"column":15,"nodeType":"1571","messageId":"1572","endLine":17,"endColumn":26,"fix":"1590"},{"ruleId":"1481","severity":1,"message":"1574","line":23,"column":6,"nodeType":"1483","endLine":23,"endColumn":8,"suggestions":"1591"},{"ruleId":"1481","severity":1,"message":"1576","line":91,"column":6,"nodeType":"1483","endLine":91,"endColumn":34,"suggestions":"1592"},{"ruleId":"1492","severity":1,"message":"1493","line":245,"column":21,"nodeType":"1491","endLine":245,"endColumn":71},{"ruleId":"1472","severity":1,"message":"1529","line":4,"column":10,"nodeType":"1474","messageId":"1475","endLine":4,"endColumn":14},{"ruleId":"1569","severity":1,"message":"1570","line":18,"column":15,"nodeType":"1571","messageId":"1572","endLine":18,"endColumn":26,"fix":"1593"},{"ruleId":"1481","severity":1,"message":"1574","line":24,"column":6,"nodeType":"1483","endLine":24,"endColumn":8,"suggestions":"1594"},{"ruleId":"1525","severity":1,"message":"1526","line":53,"column":85,"nodeType":"1515","messageId":"1509","endLine":53,"endColumn":87},{"ruleId":"1525","severity":1,"message":"1535","line":63,"column":22,"nodeType":"1515","messageId":"1509","endLine":63,"endColumn":24},{"ruleId":"1525","severity":1,"message":"1535","line":67,"column":24,"nodeType":"1515","messageId":"1509","endLine":67,"endColumn":26},{"ruleId":"1525","severity":1,"message":"1535","line":71,"column":21,"nodeType":"1515","messageId":"1509","endLine":71,"endColumn":23},{"ruleId":"1525","severity":1,"message":"1535","line":75,"column":20,"nodeType":"1515","messageId":"1509","endLine":75,"endColumn":22},{"ruleId":"1525","severity":1,"message":"1535","line":79,"column":20,"nodeType":"1515","messageId":"1509","endLine":79,"endColumn":22},{"ruleId":"1525","severity":1,"message":"1535","line":83,"column":23,"nodeType":"1515","messageId":"1509","endLine":83,"endColumn":25},{"ruleId":"1481","severity":1,"message":"1576","line":118,"column":6,"nodeType":"1483","endLine":118,"endColumn":35,"suggestions":"1595"},{"ruleId":"1492","severity":1,"message":"1493","line":305,"column":21,"nodeType":"1491","endLine":305,"endColumn":71},{"ruleId":"1472","severity":1,"message":"1495","line":1,"column":28,"nodeType":"1474","messageId":"1475","endLine":1,"endColumn":36},{"ruleId":"1472","severity":1,"message":"1495","line":1,"column":28,"nodeType":"1474","messageId":"1475","endLine":1,"endColumn":36},{"ruleId":"1492","severity":1,"message":"1493","line":89,"column":27,"nodeType":"1491","endLine":89,"endColumn":38},{"ruleId":"1492","severity":1,"message":"1493","line":90,"column":27,"nodeType":"1491","endLine":90,"endColumn":38},{"ruleId":"1492","severity":1,"message":"1493","line":91,"column":27,"nodeType":"1491","endLine":91,"endColumn":38},{"ruleId":"1492","severity":1,"message":"1493","line":92,"column":27,"nodeType":"1491","endLine":92,"endColumn":38},{"ruleId":"1472","severity":1,"message":"1495","line":1,"column":28,"nodeType":"1474","messageId":"1475","endLine":1,"endColumn":36},{"ruleId":"1492","severity":1,"message":"1493","line":92,"column":27,"nodeType":"1491","endLine":92,"endColumn":38},{"ruleId":"1492","severity":1,"message":"1493","line":93,"column":27,"nodeType":"1491","endLine":93,"endColumn":38},{"ruleId":"1492","severity":1,"message":"1493","line":94,"column":27,"nodeType":"1491","endLine":94,"endColumn":38},{"ruleId":"1492","severity":1,"message":"1493","line":95,"column":27,"nodeType":"1491","endLine":95,"endColumn":38},{"ruleId":"1596","severity":1,"message":"1597","line":17,"column":9,"nodeType":"1598","messageId":"1509","endLine":17,"endColumn":11},{"ruleId":"1472","severity":1,"message":"1510","line":6,"column":8,"nodeType":"1474","messageId":"1475","endLine":6,"endColumn":13},{"ruleId":"1472","severity":1,"message":"1541","line":7,"column":10,"nodeType":"1474","messageId":"1475","endLine":7,"endColumn":20},{"ruleId":"1472","severity":1,"message":"1599","line":8,"column":10,"nodeType":"1474","messageId":"1475","endLine":8,"endColumn":24},{"ruleId":"1472","severity":1,"message":"1540","line":9,"column":10,"nodeType":"1474","messageId":"1475","endLine":9,"endColumn":18},{"ruleId":"1472","severity":1,"message":"1600","line":10,"column":8,"nodeType":"1474","messageId":"1475","endLine":10,"endColumn":20},{"ruleId":"1472","severity":1,"message":"1542","line":11,"column":10,"nodeType":"1474","messageId":"1475","endLine":11,"endColumn":19},{"ruleId":"1472","severity":1,"message":"1601","line":12,"column":10,"nodeType":"1474","messageId":"1475","endLine":12,"endColumn":31},{"ruleId":"1472","severity":1,"message":"1602","line":13,"column":10,"nodeType":"1474","messageId":"1475","endLine":13,"endColumn":33},{"ruleId":"1472","severity":1,"message":"1603","line":14,"column":10,"nodeType":"1474","messageId":"1475","endLine":14,"endColumn":31},{"ruleId":"1519","severity":1,"message":"1604","line":25,"column":14,"nodeType":"1474","messageId":"1521","endLine":25,"endColumn":32},{"ruleId":"1472","severity":1,"message":"1605","line":28,"column":10,"nodeType":"1474","messageId":"1475","endLine":28,"endColumn":32},{"ruleId":"1472","severity":1,"message":"1606","line":33,"column":10,"nodeType":"1474","messageId":"1475","endLine":33,"endColumn":22},{"ruleId":"1472","severity":1,"message":"1607","line":33,"column":24,"nodeType":"1474","messageId":"1475","endLine":33,"endColumn":39},{"ruleId":"1525","severity":1,"message":"1526","line":136,"column":53,"nodeType":"1515","messageId":"1509","endLine":136,"endColumn":55},{"ruleId":"1481","severity":1,"message":"1608","line":27,"column":5,"nodeType":"1483","endLine":27,"endColumn":7,"suggestions":"1609"},{"ruleId":"1481","severity":1,"message":"1610","line":55,"column":5,"nodeType":"1483","endLine":55,"endColumn":33,"suggestions":"1611"},{"ruleId":"1481","severity":1,"message":"1612","line":65,"column":5,"nodeType":"1483","endLine":65,"endColumn":22,"suggestions":"1613"},{"ruleId":"1525","severity":1,"message":"1535","line":146,"column":12,"nodeType":"1515","messageId":"1509","endLine":146,"endColumn":14},{"ruleId":"1525","severity":1,"message":"1535","line":233,"column":26,"nodeType":"1515","messageId":"1509","endLine":233,"endColumn":28},{"ruleId":"1525","severity":1,"message":"1526","line":263,"column":28,"nodeType":"1515","messageId":"1509","endLine":263,"endColumn":30},{"ruleId":"1489","severity":1,"message":"1490","line":307,"column":63,"nodeType":"1491","endLine":307,"endColumn":119},{"ruleId":"1614","severity":1,"message":"1615","line":308,"column":118,"nodeType":"1616","messageId":"1617","endLine":308,"endColumn":133,"fix":"1618"},{"ruleId":"1492","severity":1,"message":"1493","line":310,"column":15,"nodeType":"1491","endLine":310,"endColumn":79},{"ruleId":"1525","severity":1,"message":"1526","line":415,"column":33,"nodeType":"1515","messageId":"1509","endLine":415,"endColumn":35},{"ruleId":"1525","severity":1,"message":"1535","line":421,"column":50,"nodeType":"1515","messageId":"1509","endLine":421,"endColumn":52},{"ruleId":"1525","severity":1,"message":"1526","line":422,"column":50,"nodeType":"1515","messageId":"1509","endLine":422,"endColumn":52},{"ruleId":"1525","severity":1,"message":"1526","line":427,"column":44,"nodeType":"1515","messageId":"1509","endLine":427,"endColumn":46},{"ruleId":"1525","severity":1,"message":"1526","line":427,"column":78,"nodeType":"1515","messageId":"1509","endLine":427,"endColumn":80},{"ruleId":"1472","severity":1,"message":"1619","line":4,"column":8,"nodeType":"1474","messageId":"1475","endLine":4,"endColumn":19},{"ruleId":"1519","severity":1,"message":"1620","line":14,"column":14,"nodeType":"1474","messageId":"1521","endLine":14,"endColumn":30},{"ruleId":"1525","severity":1,"message":"1535","line":23,"column":22,"nodeType":"1515","messageId":"1509","endLine":23,"endColumn":24},{"ruleId":"1481","severity":1,"message":"1482","line":26,"column":6,"nodeType":"1483","endLine":26,"endColumn":20,"suggestions":"1621"},{"ruleId":"1492","severity":1,"message":"1493","line":49,"column":17,"nodeType":"1491","endLine":49,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":52,"column":17,"nodeType":"1491","endLine":52,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":55,"column":17,"nodeType":"1491","endLine":55,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":58,"column":17,"nodeType":"1491","endLine":58,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":61,"column":17,"nodeType":"1491","endLine":61,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":64,"column":17,"nodeType":"1491","endLine":64,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":67,"column":17,"nodeType":"1491","endLine":67,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":70,"column":17,"nodeType":"1491","endLine":70,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":73,"column":17,"nodeType":"1491","endLine":73,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":76,"column":17,"nodeType":"1491","endLine":76,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1501","line":113,"column":25,"nodeType":"1491","endLine":116,"endColumn":24},{"ruleId":"1489","severity":1,"message":"1490","line":123,"column":19,"nodeType":"1491","endLine":123,"endColumn":76},{"ruleId":"1472","severity":1,"message":"1495","line":1,"column":28,"nodeType":"1474","messageId":"1475","endLine":1,"endColumn":36},{"ruleId":"1472","severity":1,"message":"1530","line":5,"column":8,"nodeType":"1474","messageId":"1475","endLine":5,"endColumn":14},{"ruleId":"1519","severity":1,"message":"1622","line":12,"column":14,"nodeType":"1474","messageId":"1521","endLine":12,"endColumn":30},{"ruleId":"1525","severity":1,"message":"1535","line":18,"column":22,"nodeType":"1515","messageId":"1509","endLine":18,"endColumn":24},{"ruleId":"1481","severity":1,"message":"1482","line":21,"column":6,"nodeType":"1483","endLine":21,"endColumn":20,"suggestions":"1623"},{"ruleId":"1489","severity":1,"message":"1490","line":46,"column":15,"nodeType":"1491","endLine":46,"endColumn":72},{"ruleId":"1489","severity":1,"message":"1490","line":86,"column":19,"nodeType":"1491","endLine":86,"endColumn":76},{"ruleId":"1519","severity":1,"message":"1624","line":11,"column":14,"nodeType":"1474","messageId":"1521","endLine":11,"endColumn":33},{"ruleId":"1525","severity":1,"message":"1535","line":14,"column":22,"nodeType":"1515","messageId":"1509","endLine":14,"endColumn":24},{"ruleId":"1481","severity":1,"message":"1482","line":17,"column":6,"nodeType":"1483","endLine":17,"endColumn":20,"suggestions":"1625"},{"ruleId":"1492","severity":1,"message":"1493","line":40,"column":17,"nodeType":"1491","endLine":40,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":43,"column":17,"nodeType":"1491","endLine":43,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":46,"column":17,"nodeType":"1491","endLine":46,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":49,"column":17,"nodeType":"1491","endLine":49,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":52,"column":17,"nodeType":"1491","endLine":52,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":55,"column":17,"nodeType":"1491","endLine":55,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":58,"column":17,"nodeType":"1491","endLine":58,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":61,"column":17,"nodeType":"1491","endLine":61,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":64,"column":17,"nodeType":"1491","endLine":64,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":67,"column":17,"nodeType":"1491","endLine":67,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":95,"column":17,"nodeType":"1491","endLine":95,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":100,"column":17,"nodeType":"1491","endLine":100,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":103,"column":17,"nodeType":"1491","endLine":103,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":108,"column":17,"nodeType":"1491","endLine":108,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":111,"column":17,"nodeType":"1491","endLine":111,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":116,"column":17,"nodeType":"1491","endLine":116,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":119,"column":17,"nodeType":"1491","endLine":119,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":124,"column":17,"nodeType":"1491","endLine":124,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":127,"column":17,"nodeType":"1491","endLine":127,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":132,"column":17,"nodeType":"1491","endLine":132,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":135,"column":17,"nodeType":"1491","endLine":135,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":140,"column":17,"nodeType":"1491","endLine":140,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":143,"column":17,"nodeType":"1491","endLine":143,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":148,"column":17,"nodeType":"1491","endLine":148,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":151,"column":17,"nodeType":"1491","endLine":151,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":156,"column":17,"nodeType":"1491","endLine":156,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":159,"column":17,"nodeType":"1491","endLine":159,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":164,"column":17,"nodeType":"1491","endLine":164,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":167,"column":17,"nodeType":"1491","endLine":167,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":172,"column":17,"nodeType":"1491","endLine":172,"endColumn":60},{"ruleId":"1519","severity":1,"message":"1626","line":11,"column":14,"nodeType":"1474","messageId":"1521","endLine":11,"endColumn":30},{"ruleId":"1481","severity":1,"message":"1482","line":24,"column":6,"nodeType":"1483","endLine":24,"endColumn":20,"suggestions":"1627"},{"ruleId":"1525","severity":1,"message":"1526","line":28,"column":81,"nodeType":"1515","messageId":"1509","endLine":28,"endColumn":83},{"ruleId":"1525","severity":1,"message":"1526","line":45,"column":58,"nodeType":"1515","messageId":"1509","endLine":45,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1501","line":48,"column":23,"nodeType":"1491","endLine":51,"endColumn":26},{"ruleId":"1489","severity":1,"message":"1490","line":70,"column":9,"nodeType":"1491","endLine":70,"endColumn":70},{"ruleId":"1492","severity":1,"message":"1493","line":71,"column":9,"nodeType":"1491","endLine":71,"endColumn":47},{"ruleId":"1492","severity":1,"message":"1493","line":77,"column":9,"nodeType":"1491","endLine":77,"endColumn":47},{"ruleId":"1492","severity":1,"message":"1493","line":83,"column":9,"nodeType":"1491","endLine":83,"endColumn":47},{"ruleId":"1492","severity":1,"message":"1493","line":89,"column":9,"nodeType":"1491","endLine":89,"endColumn":47},{"ruleId":"1492","severity":1,"message":"1493","line":95,"column":9,"nodeType":"1491","endLine":95,"endColumn":47},{"ruleId":"1492","severity":1,"message":"1493","line":101,"column":9,"nodeType":"1491","endLine":101,"endColumn":47},{"ruleId":"1492","severity":1,"message":"1493","line":107,"column":9,"nodeType":"1491","endLine":107,"endColumn":47},{"ruleId":"1492","severity":1,"message":"1493","line":113,"column":9,"nodeType":"1491","endLine":113,"endColumn":47},{"ruleId":"1492","severity":1,"message":"1493","line":119,"column":9,"nodeType":"1491","endLine":119,"endColumn":47},{"ruleId":"1492","severity":1,"message":"1493","line":125,"column":9,"nodeType":"1491","endLine":125,"endColumn":47},{"ruleId":"1492","severity":1,"message":"1493","line":131,"column":9,"nodeType":"1491","endLine":131,"endColumn":47},{"ruleId":"1492","severity":1,"message":"1493","line":137,"column":9,"nodeType":"1491","endLine":137,"endColumn":47},{"ruleId":"1492","severity":1,"message":"1493","line":143,"column":9,"nodeType":"1491","endLine":143,"endColumn":47},{"ruleId":"1492","severity":1,"message":"1493","line":149,"column":9,"nodeType":"1491","endLine":149,"endColumn":47},{"ruleId":"1492","severity":1,"message":"1493","line":155,"column":9,"nodeType":"1491","endLine":155,"endColumn":47},{"ruleId":"1492","severity":1,"message":"1493","line":161,"column":9,"nodeType":"1491","endLine":161,"endColumn":47},{"ruleId":"1492","severity":1,"message":"1493","line":167,"column":9,"nodeType":"1491","endLine":167,"endColumn":47},{"ruleId":"1492","severity":1,"message":"1493","line":173,"column":9,"nodeType":"1491","endLine":173,"endColumn":47},{"ruleId":"1492","severity":1,"message":"1493","line":179,"column":9,"nodeType":"1491","endLine":179,"endColumn":47},{"ruleId":"1492","severity":1,"message":"1493","line":185,"column":9,"nodeType":"1491","endLine":185,"endColumn":47},{"ruleId":"1492","severity":1,"message":"1493","line":191,"column":9,"nodeType":"1491","endLine":191,"endColumn":47},{"ruleId":"1492","severity":1,"message":"1493","line":197,"column":9,"nodeType":"1491","endLine":197,"endColumn":47},{"ruleId":"1492","severity":1,"message":"1493","line":203,"column":9,"nodeType":"1491","endLine":203,"endColumn":47},{"ruleId":"1492","severity":1,"message":"1493","line":209,"column":9,"nodeType":"1491","endLine":209,"endColumn":47},{"ruleId":"1492","severity":1,"message":"1493","line":215,"column":9,"nodeType":"1491","endLine":215,"endColumn":47},{"ruleId":"1492","severity":1,"message":"1493","line":221,"column":9,"nodeType":"1491","endLine":221,"endColumn":47},{"ruleId":"1492","severity":1,"message":"1493","line":227,"column":9,"nodeType":"1491","endLine":227,"endColumn":47},{"ruleId":"1481","severity":1,"message":"1628","line":24,"column":6,"nodeType":"1483","endLine":24,"endColumn":16,"suggestions":"1629"},{"ruleId":"1492","severity":1,"message":"1501","line":44,"column":25,"nodeType":"1491","endLine":49,"endColumn":26},{"ruleId":"1519","severity":1,"message":"1630","line":15,"column":14,"nodeType":"1474","messageId":"1521","endLine":15,"endColumn":33},{"ruleId":"1481","severity":1,"message":"1482","line":21,"column":6,"nodeType":"1483","endLine":21,"endColumn":8,"suggestions":"1631"},{"ruleId":"1481","severity":1,"message":"1632","line":43,"column":6,"nodeType":"1483","endLine":43,"endColumn":21,"suggestions":"1633"},{"ruleId":"1564","severity":1,"message":"1565","line":59,"column":35,"nodeType":"1566","messageId":"1567","endLine":59,"endColumn":37},{"ruleId":"1519","severity":1,"message":"1634","line":14,"column":14,"nodeType":"1474","messageId":"1521","endLine":14,"endColumn":28},{"ruleId":"1481","severity":1,"message":"1635","line":43,"column":6,"nodeType":"1483","endLine":43,"endColumn":28,"suggestions":"1636"},{"ruleId":"1564","severity":1,"message":"1565","line":51,"column":46,"nodeType":"1566","messageId":"1567","endLine":51,"endColumn":48},{"ruleId":"1472","severity":1,"message":"1637","line":1,"column":70,"nodeType":"1474","messageId":"1475","endLine":1,"endColumn":76},{"ruleId":"1472","severity":1,"message":"1638","line":7,"column":10,"nodeType":"1474","messageId":"1475","endLine":7,"endColumn":32},{"ruleId":"1472","severity":1,"message":"1639","line":7,"column":34,"nodeType":"1474","messageId":"1475","endLine":7,"endColumn":53},{"ruleId":"1472","severity":1,"message":"1640","line":8,"column":10,"nodeType":"1474","messageId":"1475","endLine":8,"endColumn":19},{"ruleId":"1481","severity":1,"message":"1641","line":53,"column":6,"nodeType":"1483","endLine":53,"endColumn":16,"suggestions":"1642"},{"ruleId":"1481","severity":1,"message":"1643","line":81,"column":6,"nodeType":"1483","endLine":81,"endColumn":27,"suggestions":"1644"},{"ruleId":"1525","severity":1,"message":"1526","line":91,"column":35,"nodeType":"1515","messageId":"1509","endLine":91,"endColumn":37},{"ruleId":"1525","severity":1,"message":"1526","line":92,"column":34,"nodeType":"1515","messageId":"1509","endLine":92,"endColumn":36},{"ruleId":"1481","severity":1,"message":"1645","line":102,"column":5,"nodeType":"1483","endLine":102,"endColumn":25,"suggestions":"1646"},{"ruleId":"1492","severity":1,"message":"1501","line":225,"column":15,"nodeType":"1491","endLine":225,"endColumn":61},{"ruleId":"1492","severity":1,"message":"1501","line":226,"column":15,"nodeType":"1491","endLine":226,"endColumn":59},{"ruleId":"1472","severity":1,"message":"1637","line":1,"column":70,"nodeType":"1474","messageId":"1475","endLine":1,"endColumn":76},{"ruleId":"1472","severity":1,"message":"1638","line":7,"column":10,"nodeType":"1474","messageId":"1475","endLine":7,"endColumn":32},{"ruleId":"1472","severity":1,"message":"1639","line":7,"column":34,"nodeType":"1474","messageId":"1475","endLine":7,"endColumn":53},{"ruleId":"1481","severity":1,"message":"1641","line":53,"column":6,"nodeType":"1483","endLine":53,"endColumn":16,"suggestions":"1647"},{"ruleId":"1481","severity":1,"message":"1643","line":86,"column":6,"nodeType":"1483","endLine":86,"endColumn":27,"suggestions":"1648"},{"ruleId":"1525","severity":1,"message":"1526","line":96,"column":35,"nodeType":"1515","messageId":"1509","endLine":96,"endColumn":37},{"ruleId":"1525","severity":1,"message":"1526","line":97,"column":34,"nodeType":"1515","messageId":"1509","endLine":97,"endColumn":36},{"ruleId":"1481","severity":1,"message":"1645","line":107,"column":5,"nodeType":"1483","endLine":107,"endColumn":25,"suggestions":"1649"},{"ruleId":"1492","severity":1,"message":"1501","line":247,"column":57,"nodeType":"1491","endLine":247,"endColumn":103},{"ruleId":"1472","severity":1,"message":"1568","line":1,"column":61,"nodeType":"1474","messageId":"1475","endLine":1,"endColumn":68},{"ruleId":"1472","severity":1,"message":"1637","line":1,"column":70,"nodeType":"1474","messageId":"1475","endLine":1,"endColumn":76},{"ruleId":"1481","severity":1,"message":"1482","line":83,"column":5,"nodeType":"1483","endLine":83,"endColumn":25,"suggestions":"1650"},{"ruleId":"1525","severity":1,"message":"1526","line":131,"column":33,"nodeType":"1515","messageId":"1509","endLine":131,"endColumn":35},{"ruleId":"1472","severity":1,"message":"1651","line":131,"column":8,"nodeType":"1474","messageId":"1475","endLine":131,"endColumn":22},{"ruleId":"1492","severity":1,"message":"1493","line":144,"column":17,"nodeType":"1491","endLine":144,"endColumn":81},{"ruleId":"1481","severity":1,"message":"1652","line":59,"column":6,"nodeType":"1483","endLine":59,"endColumn":16,"suggestions":"1653"},{"ruleId":"1472","severity":1,"message":"1654","line":61,"column":9,"nodeType":"1474","messageId":"1475","endLine":61,"endColumn":16},{"ruleId":"1525","severity":1,"message":"1526","line":66,"column":37,"nodeType":"1515","messageId":"1509","endLine":66,"endColumn":39},{"ruleId":"1481","severity":1,"message":"1655","line":78,"column":5,"nodeType":"1483","endLine":78,"endColumn":30,"suggestions":"1656"},{"ruleId":"1472","severity":1,"message":"1657","line":80,"column":21,"nodeType":"1474","messageId":"1475","endLine":80,"endColumn":33},{"ruleId":"1525","severity":1,"message":"1526","line":102,"column":36,"nodeType":"1515","messageId":"1509","endLine":102,"endColumn":38},{"ruleId":"1492","severity":1,"message":"1501","line":215,"column":8,"nodeType":"1491","endLine":221,"endColumn":9},{"ruleId":"1492","severity":1,"message":"1501","line":250,"column":23,"nodeType":"1491","endLine":255,"endColumn":24},{"ruleId":"1472","severity":1,"message":"1654","line":18,"column":9,"nodeType":"1474","messageId":"1475","endLine":18,"endColumn":16},{"ruleId":"1481","severity":1,"message":"1482","line":42,"column":5,"nodeType":"1483","endLine":42,"endColumn":7,"suggestions":"1658"},{"ruleId":"1525","severity":1,"message":"1526","line":54,"column":67,"nodeType":"1515","messageId":"1509","endLine":54,"endColumn":69},{"ruleId":"1525","severity":1,"message":"1526","line":54,"column":124,"nodeType":"1515","messageId":"1509","endLine":54,"endColumn":126},{"ruleId":"1481","severity":1,"message":"1659","line":92,"column":5,"nodeType":"1483","endLine":92,"endColumn":26,"suggestions":"1660"},{"ruleId":"1492","severity":1,"message":"1493","line":233,"column":17,"nodeType":"1491","endLine":233,"endColumn":81},{"ruleId":"1525","severity":1,"message":"1526","line":240,"column":26,"nodeType":"1515","messageId":"1509","endLine":240,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1501","line":247,"column":23,"nodeType":"1491","endLine":247,"endColumn":70},{"ruleId":"1492","severity":1,"message":"1501","line":248,"column":23,"nodeType":"1491","endLine":248,"endColumn":71},{"ruleId":"1525","severity":1,"message":"1526","line":273,"column":66,"nodeType":"1515","messageId":"1509","endLine":273,"endColumn":68},{"ruleId":"1481","severity":1,"message":"1661","line":58,"column":6,"nodeType":"1483","endLine":58,"endColumn":16,"suggestions":"1662"},{"ruleId":"1492","severity":1,"message":"1501","line":72,"column":23,"nodeType":"1491","endLine":77,"endColumn":24},{"ruleId":"1492","severity":1,"message":"1501","line":117,"column":23,"nodeType":"1491","endLine":123,"endColumn":24},{"ruleId":"1481","severity":1,"message":"1482","line":30,"column":5,"nodeType":"1483","endLine":30,"endColumn":7,"suggestions":"1663"},{"ruleId":"1492","severity":1,"message":"1493","line":91,"column":17,"nodeType":"1491","endLine":91,"endColumn":81},{"ruleId":"1525","severity":1,"message":"1526","line":109,"column":54,"nodeType":"1515","messageId":"1509","endLine":109,"endColumn":56},{"ruleId":"1525","severity":1,"message":"1526","line":119,"column":51,"nodeType":"1515","messageId":"1509","endLine":119,"endColumn":53},{"ruleId":"1525","severity":1,"message":"1526","line":120,"column":52,"nodeType":"1515","messageId":"1509","endLine":120,"endColumn":54},{"ruleId":"1525","severity":1,"message":"1526","line":137,"column":51,"nodeType":"1515","messageId":"1509","endLine":137,"endColumn":53},{"ruleId":"1525","severity":1,"message":"1526","line":138,"column":52,"nodeType":"1515","messageId":"1509","endLine":138,"endColumn":54},{"ruleId":"1525","severity":1,"message":"1526","line":155,"column":51,"nodeType":"1515","messageId":"1509","endLine":155,"endColumn":53},{"ruleId":"1525","severity":1,"message":"1526","line":156,"column":52,"nodeType":"1515","messageId":"1509","endLine":156,"endColumn":54},{"ruleId":"1481","severity":1,"message":"1664","line":90,"column":6,"nodeType":"1483","endLine":90,"endColumn":16,"suggestions":"1665"},{"ruleId":"1492","severity":1,"message":"1501","line":96,"column":11,"nodeType":"1491","endLine":97,"endColumn":59},{"ruleId":"1492","severity":1,"message":"1501","line":98,"column":11,"nodeType":"1491","endLine":99,"endColumn":62},{"ruleId":"1492","severity":1,"message":"1501","line":108,"column":23,"nodeType":"1491","endLine":113,"endColumn":24},{"ruleId":"1492","severity":1,"message":"1501","line":160,"column":27,"nodeType":"1491","endLine":162,"endColumn":30},{"ruleId":"1492","severity":1,"message":"1501","line":164,"column":27,"nodeType":"1491","endLine":166,"endColumn":30},{"ruleId":"1492","severity":1,"message":"1501","line":168,"column":27,"nodeType":"1491","endLine":170,"endColumn":30},{"ruleId":"1492","severity":1,"message":"1501","line":218,"column":27,"nodeType":"1491","endLine":218,"endColumn":30},{"ruleId":"1492","severity":1,"message":"1501","line":221,"column":27,"nodeType":"1491","endLine":221,"endColumn":30},{"ruleId":"1481","severity":1,"message":"1664","line":90,"column":6,"nodeType":"1483","endLine":90,"endColumn":16,"suggestions":"1666"},{"ruleId":"1492","severity":1,"message":"1501","line":96,"column":11,"nodeType":"1491","endLine":97,"endColumn":59},{"ruleId":"1492","severity":1,"message":"1501","line":98,"column":11,"nodeType":"1491","endLine":99,"endColumn":62},{"ruleId":"1492","severity":1,"message":"1501","line":108,"column":23,"nodeType":"1491","endLine":113,"endColumn":24},{"ruleId":"1492","severity":1,"message":"1501","line":160,"column":27,"nodeType":"1491","endLine":162,"endColumn":30},{"ruleId":"1492","severity":1,"message":"1501","line":164,"column":27,"nodeType":"1491","endLine":166,"endColumn":30},{"ruleId":"1492","severity":1,"message":"1501","line":168,"column":27,"nodeType":"1491","endLine":170,"endColumn":30},{"ruleId":"1492","severity":1,"message":"1501","line":218,"column":27,"nodeType":"1491","endLine":218,"endColumn":30},{"ruleId":"1492","severity":1,"message":"1501","line":221,"column":27,"nodeType":"1491","endLine":221,"endColumn":30},{"ruleId":"1481","severity":1,"message":"1667","line":58,"column":6,"nodeType":"1483","endLine":58,"endColumn":16,"suggestions":"1668"},{"ruleId":"1492","severity":1,"message":"1501","line":72,"column":23,"nodeType":"1491","endLine":77,"endColumn":24},{"ruleId":"1492","severity":1,"message":"1501","line":122,"column":23,"nodeType":"1491","endLine":125,"endColumn":24},{"ruleId":"1481","severity":1,"message":"1482","line":56,"column":5,"nodeType":"1483","endLine":56,"endColumn":7,"suggestions":"1669"},{"ruleId":"1481","severity":1,"message":"1670","line":65,"column":5,"nodeType":"1483","endLine":65,"endColumn":39,"suggestions":"1671"},{"ruleId":"1489","severity":1,"message":"1490","line":169,"column":63,"nodeType":"1491","endLine":169,"endColumn":119},{"ruleId":"1614","severity":1,"message":"1615","line":170,"column":113,"nodeType":"1616","messageId":"1617","endLine":170,"endColumn":128,"fix":"1672"},{"ruleId":"1472","severity":1,"message":"1494","line":1,"column":10,"nodeType":"1474","messageId":"1475","endLine":1,"endColumn":19},{"ruleId":"1472","severity":1,"message":"1568","line":1,"column":21,"nodeType":"1474","messageId":"1475","endLine":1,"endColumn":28},{"ruleId":"1472","severity":1,"message":"1637","line":1,"column":30,"nodeType":"1474","messageId":"1475","endLine":1,"endColumn":36},{"ruleId":"1472","severity":1,"message":"1673","line":3,"column":10,"nodeType":"1474","messageId":"1475","endLine":3,"endColumn":21},{"ruleId":"1472","severity":1,"message":"1674","line":17,"column":8,"nodeType":"1474","messageId":"1475","endLine":17,"endColumn":17},{"ruleId":"1492","severity":1,"message":"1493","line":36,"column":8,"nodeType":"1491","endLine":36,"endColumn":72},{"ruleId":"1481","severity":1,"message":"1675","line":57,"column":6,"nodeType":"1483","endLine":57,"endColumn":16,"suggestions":"1676"},{"ruleId":"1492","severity":1,"message":"1501","line":71,"column":23,"nodeType":"1491","endLine":76,"endColumn":24},{"ruleId":"1481","severity":1,"message":"1677","line":99,"column":5,"nodeType":"1483","endLine":99,"endColumn":7,"suggestions":"1678"},{"ruleId":"1481","severity":1,"message":"1679","line":109,"column":5,"nodeType":"1483","endLine":109,"endColumn":16,"suggestions":"1680"},{"ruleId":"1525","severity":1,"message":"1535","line":211,"column":74,"nodeType":"1515","messageId":"1509","endLine":211,"endColumn":76},{"ruleId":"1525","severity":1,"message":"1526","line":217,"column":59,"nodeType":"1515","messageId":"1509","endLine":217,"endColumn":61},{"ruleId":"1525","severity":1,"message":"1526","line":425,"column":24,"nodeType":"1515","messageId":"1509","endLine":425,"endColumn":26},{"ruleId":"1472","severity":1,"message":"1681","line":437,"column":7,"nodeType":"1474","messageId":"1475","endLine":437,"endColumn":10},{"ruleId":"1472","severity":1,"message":"1682","line":494,"column":7,"nodeType":"1474","messageId":"1475","endLine":494,"endColumn":8},{"ruleId":"1596","severity":1,"message":"1683","line":709,"column":26,"nodeType":"1684","messageId":"1509","endLine":709,"endColumn":40},{"ruleId":"1519","severity":1,"message":"1685","line":12,"column":14,"nodeType":"1474","messageId":"1521","endLine":12,"endColumn":34},{"ruleId":"1525","severity":1,"message":"1535","line":15,"column":22,"nodeType":"1515","messageId":"1509","endLine":15,"endColumn":24},{"ruleId":"1481","severity":1,"message":"1482","line":18,"column":6,"nodeType":"1483","endLine":18,"endColumn":20,"suggestions":"1686"},{"ruleId":"1492","severity":1,"message":"1493","line":41,"column":17,"nodeType":"1491","endLine":41,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":44,"column":17,"nodeType":"1491","endLine":44,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":47,"column":17,"nodeType":"1491","endLine":47,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":50,"column":17,"nodeType":"1491","endLine":50,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":53,"column":17,"nodeType":"1491","endLine":53,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":56,"column":17,"nodeType":"1491","endLine":56,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":59,"column":17,"nodeType":"1491","endLine":59,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":62,"column":17,"nodeType":"1491","endLine":62,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":65,"column":17,"nodeType":"1491","endLine":65,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":68,"column":17,"nodeType":"1491","endLine":68,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":105,"column":25,"nodeType":"1491","endLine":105,"endColumn":68},{"ruleId":"1489","severity":1,"message":"1490","line":112,"column":19,"nodeType":"1491","endLine":112,"endColumn":76},{"ruleId":"1519","severity":1,"message":"1687","line":12,"column":14,"nodeType":"1474","messageId":"1521","endLine":12,"endColumn":33},{"ruleId":"1525","severity":1,"message":"1535","line":15,"column":22,"nodeType":"1515","messageId":"1509","endLine":15,"endColumn":24},{"ruleId":"1481","severity":1,"message":"1482","line":18,"column":6,"nodeType":"1483","endLine":18,"endColumn":20,"suggestions":"1688"},{"ruleId":"1492","severity":1,"message":"1493","line":37,"column":17,"nodeType":"1491","endLine":37,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":41,"column":17,"nodeType":"1491","endLine":41,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":45,"column":17,"nodeType":"1491","endLine":45,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":49,"column":17,"nodeType":"1491","endLine":49,"endColumn":28},{"ruleId":"1489","severity":1,"message":"1490","line":94,"column":19,"nodeType":"1491","endLine":94,"endColumn":76},{"ruleId":"1492","severity":1,"message":"1493","line":100,"column":17,"nodeType":"1491","endLine":100,"endColumn":28},{"ruleId":"1519","severity":1,"message":"1689","line":12,"column":14,"nodeType":"1474","messageId":"1521","endLine":12,"endColumn":29},{"ruleId":"1525","severity":1,"message":"1535","line":15,"column":22,"nodeType":"1515","messageId":"1509","endLine":15,"endColumn":24},{"ruleId":"1481","severity":1,"message":"1482","line":18,"column":6,"nodeType":"1483","endLine":18,"endColumn":20,"suggestions":"1690"},{"ruleId":"1492","severity":1,"message":"1493","line":42,"column":17,"nodeType":"1491","endLine":42,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":49,"column":17,"nodeType":"1491","endLine":49,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":56,"column":17,"nodeType":"1491","endLine":56,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":63,"column":17,"nodeType":"1491","endLine":63,"endColumn":28},{"ruleId":"1489","severity":1,"message":"1490","line":114,"column":19,"nodeType":"1491","endLine":114,"endColumn":76},{"ruleId":"1519","severity":1,"message":"1691","line":13,"column":14,"nodeType":"1474","messageId":"1521","endLine":13,"endColumn":36},{"ruleId":"1481","severity":1,"message":"1692","line":52,"column":6,"nodeType":"1483","endLine":52,"endColumn":28,"suggestions":"1693"},{"ruleId":"1564","severity":1,"message":"1565","line":60,"column":46,"nodeType":"1566","messageId":"1567","endLine":60,"endColumn":48},{"ruleId":"1481","severity":1,"message":"1694","line":32,"column":6,"nodeType":"1483","endLine":32,"endColumn":16,"suggestions":"1695"},{"ruleId":"1492","severity":1,"message":"1501","line":44,"column":13,"nodeType":"1491","endLine":44,"endColumn":89},{"ruleId":"1492","severity":1,"message":"1501","line":53,"column":25,"nodeType":"1491","endLine":58,"endColumn":26},{"ruleId":"1492","severity":1,"message":"1501","line":108,"column":27,"nodeType":"1491","endLine":112,"endColumn":33},{"ruleId":"1492","severity":1,"message":"1501","line":113,"column":27,"nodeType":"1491","endLine":117,"endColumn":33},{"ruleId":"1525","severity":1,"message":"1535","line":15,"column":22,"nodeType":"1515","messageId":"1509","endLine":15,"endColumn":24},{"ruleId":"1481","severity":1,"message":"1482","line":18,"column":6,"nodeType":"1483","endLine":18,"endColumn":20,"suggestions":"1696"},{"ruleId":"1492","severity":1,"message":"1493","line":41,"column":17,"nodeType":"1491","endLine":41,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":44,"column":17,"nodeType":"1491","endLine":44,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":47,"column":17,"nodeType":"1491","endLine":47,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":50,"column":17,"nodeType":"1491","endLine":50,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":53,"column":17,"nodeType":"1491","endLine":53,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":56,"column":17,"nodeType":"1491","endLine":56,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":59,"column":17,"nodeType":"1491","endLine":59,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":62,"column":17,"nodeType":"1491","endLine":62,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":65,"column":17,"nodeType":"1491","endLine":65,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":68,"column":17,"nodeType":"1491","endLine":68,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1493","line":105,"column":25,"nodeType":"1491","endLine":105,"endColumn":68},{"ruleId":"1489","severity":1,"message":"1490","line":112,"column":19,"nodeType":"1491","endLine":112,"endColumn":76},{"ruleId":"1492","severity":1,"message":"1493","line":118,"column":17,"nodeType":"1491","endLine":118,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1493","line":123,"column":17,"nodeType":"1491","endLine":123,"endColumn":60},{"ruleId":"1519","severity":1,"message":"1697","line":11,"column":14,"nodeType":"1474","messageId":"1521","endLine":11,"endColumn":30},{"ruleId":"1481","severity":1,"message":"1482","line":24,"column":6,"nodeType":"1483","endLine":24,"endColumn":20,"suggestions":"1698"},{"ruleId":"1525","severity":1,"message":"1526","line":28,"column":81,"nodeType":"1515","messageId":"1509","endLine":28,"endColumn":83},{"ruleId":"1525","severity":1,"message":"1526","line":45,"column":58,"nodeType":"1515","messageId":"1509","endLine":45,"endColumn":60},{"ruleId":"1492","severity":1,"message":"1501","line":48,"column":23,"nodeType":"1491","endLine":51,"endColumn":26},{"ruleId":"1489","severity":1,"message":"1490","line":70,"column":9,"nodeType":"1491","endLine":70,"endColumn":70},{"ruleId":"1492","severity":1,"message":"1493","line":71,"column":9,"nodeType":"1491","endLine":71,"endColumn":81},{"ruleId":"1492","severity":1,"message":"1493","line":77,"column":9,"nodeType":"1491","endLine":77,"endColumn":82},{"ruleId":"1492","severity":1,"message":"1493","line":83,"column":9,"nodeType":"1491","endLine":83,"endColumn":82},{"ruleId":"1492","severity":1,"message":"1493","line":89,"column":9,"nodeType":"1491","endLine":89,"endColumn":82},{"ruleId":"1492","severity":1,"message":"1493","line":95,"column":9,"nodeType":"1491","endLine":95,"endColumn":83},{"ruleId":"1492","severity":1,"message":"1493","line":101,"column":9,"nodeType":"1491","endLine":101,"endColumn":83},{"ruleId":"1492","severity":1,"message":"1493","line":107,"column":9,"nodeType":"1491","endLine":107,"endColumn":83},{"ruleId":"1492","severity":1,"message":"1493","line":113,"column":9,"nodeType":"1491","endLine":113,"endColumn":82},{"ruleId":"1492","severity":1,"message":"1493","line":119,"column":9,"nodeType":"1491","endLine":119,"endColumn":82},{"ruleId":"1492","severity":1,"message":"1493","line":125,"column":9,"nodeType":"1491","endLine":125,"endColumn":83},{"ruleId":"1492","severity":1,"message":"1493","line":131,"column":9,"nodeType":"1491","endLine":131,"endColumn":83},{"ruleId":"1492","severity":1,"message":"1493","line":137,"column":9,"nodeType":"1491","endLine":137,"endColumn":83},{"ruleId":"1492","severity":1,"message":"1493","line":143,"column":9,"nodeType":"1491","endLine":143,"endColumn":83},{"ruleId":"1492","severity":1,"message":"1493","line":149,"column":9,"nodeType":"1491","endLine":149,"endColumn":83},{"ruleId":"1492","severity":1,"message":"1493","line":155,"column":9,"nodeType":"1491","endLine":155,"endColumn":83},{"ruleId":"1492","severity":1,"message":"1493","line":161,"column":9,"nodeType":"1491","endLine":161,"endColumn":83},{"ruleId":"1492","severity":1,"message":"1493","line":167,"column":9,"nodeType":"1491","endLine":167,"endColumn":83},{"ruleId":"1492","severity":1,"message":"1493","line":173,"column":9,"nodeType":"1491","endLine":173,"endColumn":83},{"ruleId":"1492","severity":1,"message":"1493","line":179,"column":9,"nodeType":"1491","endLine":179,"endColumn":83},{"ruleId":"1472","severity":1,"message":"1494","line":1,"column":17,"nodeType":"1474","messageId":"1475","endLine":1,"endColumn":26},{"ruleId":"1472","severity":1,"message":"1495","line":1,"column":36,"nodeType":"1474","messageId":"1475","endLine":1,"endColumn":44},{"ruleId":"1472","severity":1,"message":"1699","line":13,"column":9,"nodeType":"1474","messageId":"1475","endLine":13,"endColumn":24},{"ruleId":"1481","severity":1,"message":"1664","line":90,"column":6,"nodeType":"1483","endLine":90,"endColumn":16,"suggestions":"1700"},{"ruleId":"1492","severity":1,"message":"1501","line":96,"column":11,"nodeType":"1491","endLine":97,"endColumn":59},{"ruleId":"1492","severity":1,"message":"1501","line":98,"column":11,"nodeType":"1491","endLine":99,"endColumn":62},{"ruleId":"1492","severity":1,"message":"1501","line":108,"column":23,"nodeType":"1491","endLine":113,"endColumn":24},{"ruleId":"1492","severity":1,"message":"1501","line":160,"column":27,"nodeType":"1491","endLine":162,"endColumn":30},{"ruleId":"1492","severity":1,"message":"1501","line":164,"column":27,"nodeType":"1491","endLine":166,"endColumn":30},{"ruleId":"1492","severity":1,"message":"1501","line":168,"column":27,"nodeType":"1491","endLine":170,"endColumn":30},{"ruleId":"1492","severity":1,"message":"1501","line":218,"column":27,"nodeType":"1491","endLine":218,"endColumn":30},{"ruleId":"1492","severity":1,"message":"1501","line":221,"column":27,"nodeType":"1491","endLine":221,"endColumn":30},{"ruleId":"1472","severity":1,"message":"1495","line":1,"column":28,"nodeType":"1474","messageId":"1475","endLine":1,"endColumn":36},{"ruleId":"1519","severity":1,"message":"1701","line":15,"column":14,"nodeType":"1474","messageId":"1521","endLine":15,"endColumn":32},{"ruleId":"1481","severity":1,"message":"1482","line":19,"column":6,"nodeType":"1483","endLine":19,"endColumn":8,"suggestions":"1702"},{"ruleId":"1472","severity":1,"message":"1703","line":41,"column":17,"nodeType":"1474","messageId":"1475","endLine":41,"endColumn":26},{"ruleId":"1472","severity":1,"message":"1704","line":42,"column":17,"nodeType":"1474","messageId":"1475","endLine":42,"endColumn":26},{"ruleId":"1472","severity":1,"message":"1510","line":2,"column":8,"nodeType":"1474","messageId":"1475","endLine":2,"endColumn":13},{"ruleId":"1481","severity":1,"message":"1608","line":20,"column":5,"nodeType":"1483","endLine":20,"endColumn":7,"suggestions":"1705"},{"ruleId":"1481","severity":1,"message":"1610","line":40,"column":5,"nodeType":"1483","endLine":40,"endColumn":33,"suggestions":"1706"},{"ruleId":"1472","severity":1,"message":"1707","line":71,"column":8,"nodeType":"1474","messageId":"1475","endLine":71,"endColumn":25},{"ruleId":"1472","severity":1,"message":"1708","line":91,"column":8,"nodeType":"1474","messageId":"1475","endLine":91,"endColumn":15},{"ruleId":"1472","severity":1,"message":"1709","line":92,"column":8,"nodeType":"1474","messageId":"1475","endLine":92,"endColumn":18},{"ruleId":"1472","severity":1,"message":"1710","line":93,"column":8,"nodeType":"1474","messageId":"1475","endLine":93,"endColumn":18},{"ruleId":"1525","severity":1,"message":"1535","line":109,"column":13,"nodeType":"1515","messageId":"1509","endLine":109,"endColumn":15},{"ruleId":"1525","severity":1,"message":"1526","line":155,"column":28,"nodeType":"1515","messageId":"1509","endLine":155,"endColumn":30},{"ruleId":"1492","severity":1,"message":"1493","line":186,"column":15,"nodeType":"1491","endLine":186,"endColumn":73},{"ruleId":"1525","severity":1,"message":"1526","line":222,"column":33,"nodeType":"1515","messageId":"1509","endLine":222,"endColumn":35},{"ruleId":"1525","severity":1,"message":"1535","line":228,"column":50,"nodeType":"1515","messageId":"1509","endLine":228,"endColumn":52},{"ruleId":"1525","severity":1,"message":"1526","line":229,"column":50,"nodeType":"1515","messageId":"1509","endLine":229,"endColumn":52},{"ruleId":"1525","severity":1,"message":"1526","line":234,"column":44,"nodeType":"1515","messageId":"1509","endLine":234,"endColumn":46},{"ruleId":"1525","severity":1,"message":"1526","line":234,"column":78,"nodeType":"1515","messageId":"1509","endLine":234,"endColumn":80},{"ruleId":"1472","severity":1,"message":"1568","line":1,"column":28,"nodeType":"1474","messageId":"1475","endLine":1,"endColumn":35},{"ruleId":"1472","severity":1,"message":"1638","line":3,"column":10,"nodeType":"1474","messageId":"1475","endLine":3,"endColumn":32},{"ruleId":"1472","severity":1,"message":"1639","line":3,"column":34,"nodeType":"1474","messageId":"1475","endLine":3,"endColumn":53},{"ruleId":"1525","severity":1,"message":"1535","line":24,"column":24,"nodeType":"1515","messageId":"1509","endLine":24,"endColumn":26},{"ruleId":"1525","severity":1,"message":"1526","line":28,"column":35,"nodeType":"1515","messageId":"1509","endLine":28,"endColumn":37},{"ruleId":"1481","severity":1,"message":"1711","line":32,"column":6,"nodeType":"1483","endLine":32,"endColumn":22,"suggestions":"1712"},{"ruleId":"1525","severity":1,"message":"1526","line":128,"column":56,"nodeType":"1515","messageId":"1509","endLine":128,"endColumn":58},{"ruleId":"1525","severity":1,"message":"1526","line":128,"column":87,"nodeType":"1515","messageId":"1509","endLine":128,"endColumn":89},{"ruleId":"1614","severity":1,"message":"1615","line":141,"column":79,"nodeType":"1616","messageId":"1617","endLine":141,"endColumn":94,"fix":"1713"},{"ruleId":"1614","severity":1,"message":"1615","line":145,"column":77,"nodeType":"1616","messageId":"1617","endLine":145,"endColumn":92,"fix":"1714"},{"ruleId":"1519","severity":1,"message":"1715","line":13,"column":14,"nodeType":"1474","messageId":"1521","endLine":13,"endColumn":26},{"ruleId":"1492","severity":1,"message":"1501","line":47,"column":17,"nodeType":"1491","endLine":47,"endColumn":80},{"ruleId":"1492","severity":1,"message":"1501","line":72,"column":17,"nodeType":"1491","endLine":72,"endColumn":80},{"ruleId":"1492","severity":1,"message":"1501","line":73,"column":17,"nodeType":"1491","endLine":73,"endColumn":38},{"ruleId":"1519","severity":1,"message":"1716","line":14,"column":14,"nodeType":"1474","messageId":"1521","endLine":14,"endColumn":26},{"ruleId":"1492","severity":1,"message":"1501","line":32,"column":17,"nodeType":"1491","endLine":32,"endColumn":80},{"ruleId":"1492","severity":1,"message":"1501","line":40,"column":17,"nodeType":"1491","endLine":40,"endColumn":80},{"ruleId":"1492","severity":1,"message":"1501","line":41,"column":17,"nodeType":"1491","endLine":41,"endColumn":38},{"ruleId":"1519","severity":1,"message":"1717","line":15,"column":14,"nodeType":"1474","messageId":"1521","endLine":15,"endColumn":29},{"ruleId":"1492","severity":1,"message":"1501","line":49,"column":17,"nodeType":"1491","endLine":49,"endColumn":80},{"ruleId":"1492","severity":1,"message":"1501","line":74,"column":17,"nodeType":"1491","endLine":74,"endColumn":80},{"ruleId":"1492","severity":1,"message":"1501","line":75,"column":17,"nodeType":"1491","endLine":75,"endColumn":41},{"ruleId":"1472","severity":1,"message":"1718","line":1,"column":10,"nodeType":"1474","messageId":"1475","endLine":1,"endColumn":18},{"ruleId":"1525","severity":1,"message":"1535","line":188,"column":56,"nodeType":"1515","messageId":"1509","endLine":188,"endColumn":58},{"ruleId":"1525","severity":1,"message":"1526","line":194,"column":47,"nodeType":"1515","messageId":"1509","endLine":194,"endColumn":49},{"ruleId":"1525","severity":1,"message":"1526","line":261,"column":19,"nodeType":"1515","messageId":"1509","endLine":261,"endColumn":21},{"ruleId":"1525","severity":1,"message":"1535","line":275,"column":45,"nodeType":"1515","messageId":"1509","endLine":275,"endColumn":47},{"ruleId":"1525","severity":1,"message":"1526","line":280,"column":36,"nodeType":"1515","messageId":"1509","endLine":280,"endColumn":38},{"ruleId":"1472","severity":1,"message":"1682","line":366,"column":7,"nodeType":"1474","messageId":"1475","endLine":366,"endColumn":8},{"ruleId":"1472","severity":1,"message":"1719","line":1,"column":17,"nodeType":"1474","messageId":"1475","endLine":1,"endColumn":26},{"ruleId":"1472","severity":1,"message":"1720","line":4,"column":38,"nodeType":"1474","messageId":"1475","endLine":4,"endColumn":49},{"ruleId":"1472","severity":1,"message":"1495","line":1,"column":10,"nodeType":"1474","messageId":"1475","endLine":1,"endColumn":18},{"ruleId":"1472","severity":1,"message":"1721","line":3,"column":18,"nodeType":"1474","messageId":"1475","endLine":3,"endColumn":26},{"ruleId":"1472","severity":1,"message":"1722","line":4,"column":45,"nodeType":"1474","messageId":"1475","endLine":4,"endColumn":50},{"ruleId":"1472","severity":1,"message":"1495","line":2,"column":21,"nodeType":"1474","messageId":"1475","endLine":2,"endColumn":29},{"ruleId":"1472","severity":1,"message":"1723","line":5,"column":10,"nodeType":"1474","messageId":"1475","endLine":5,"endColumn":15},{"ruleId":"1472","severity":1,"message":"1724","line":59,"column":8,"nodeType":"1474","messageId":"1475","endLine":59,"endColumn":13},{"ruleId":"1481","severity":1,"message":"1725","line":94,"column":5,"nodeType":"1483","endLine":94,"endColumn":7,"suggestions":"1726"},{"ruleId":"1481","severity":1,"message":"1727","line":98,"column":5,"nodeType":"1483","endLine":98,"endColumn":19,"suggestions":"1728"},{"ruleId":"1525","severity":1,"message":"1526","line":137,"column":17,"nodeType":"1515","messageId":"1509","endLine":137,"endColumn":19},{"ruleId":"1525","severity":1,"message":"1526","line":141,"column":26,"nodeType":"1515","messageId":"1509","endLine":141,"endColumn":28},{"ruleId":"1525","severity":1,"message":"1526","line":141,"column":37,"nodeType":"1515","messageId":"1509","endLine":141,"endColumn":39},{"ruleId":"1525","severity":1,"message":"1526","line":144,"column":9,"nodeType":"1515","messageId":"1509","endLine":144,"endColumn":11},{"ruleId":"1525","severity":1,"message":"1526","line":156,"column":10,"nodeType":"1515","messageId":"1509","endLine":156,"endColumn":12},{"ruleId":"1525","severity":1,"message":"1526","line":161,"column":12,"nodeType":"1515","messageId":"1509","endLine":161,"endColumn":14},{"ruleId":"1525","severity":1,"message":"1526","line":167,"column":10,"nodeType":"1515","messageId":"1509","endLine":167,"endColumn":12},{"ruleId":"1525","severity":1,"message":"1526","line":171,"column":9,"nodeType":"1515","messageId":"1509","endLine":171,"endColumn":11},{"ruleId":"1525","severity":1,"message":"1526","line":177,"column":8,"nodeType":"1515","messageId":"1509","endLine":177,"endColumn":10},{"ruleId":"1525","severity":1,"message":"1535","line":467,"column":18,"nodeType":"1515","messageId":"1509","endLine":467,"endColumn":20},"no-native-reassign",["1729"],"no-negated-in-lhs",["1730"],"@typescript-eslint/no-unused-vars","'errorMiddleware' is defined but never used.","Identifier","unusedVar","'notificationMiddleware' is defined but never used.","'loggerMiddleware' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["1731"],"React Hook useEffect has a missing dependency: 'loginInfo'. Either include it or remove the dependency array. You can also do a functional update 'setLoginInfo(l => ...)' if you only need 'loginInfo' in the 'setLoginInfo' call.",["1732"],"React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["1733"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useEffect' is defined but never used.","'useState' is defined but never used.","'isSampleApi' is defined but never used.","'reverseIsSampleApi' is defined but never used.",["1734"],"React Hook useEffect has a missing dependency: 'props.isAlwaysAlarmPopup'. Either include it or remove the dependency array.",["1735"],"The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["1736"],"'ModalOnlyLibaray' is defined but never used.","'ModalRealtime' is defined but never used.",["1737"],"no-duplicate-case","Duplicate case label.","SwitchCase","unexpected","'axios' is defined but never used.","'FAILURE' is defined but never used.","'SUCCESS' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'spdcTrendDefaultValue' is defined but never used.","'scbrTrendDefaultValue' is defined but never used.","@typescript-eslint/no-redeclare","'AlarmNonRecognitionPopup' is already defined.","redeclared",["1738"],"'DiagramMtrTable' is already defined.","'request' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","React Hook useEffect has a missing dependency: 'zoomChart'. Either include it or remove the dependency array.",["1739"],"'Link' is defined but never used.","'moment' is defined but never used.","'DateRangePicker' is defined but never used.",["1740"],"React Hook useEffect has a missing dependency: 'searchAlarmList'. Either include it or remove the dependency array.",["1741"],"Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'isSearchFilterUpdate'. Either include it or remove the dependency array.",["1742"],["1743"],["1744"],"'PrpsFile' is defined but never used.","'layer_open' is defined but never used.","'PrpdChart' is defined but never used.",["1745"],["1746"],"'Moment' is defined but never used.","'Pager' is defined but never used.",["1747"],["1748"],"React Hook useEffect has a missing dependency: 'props.dgaStandard'. Either include it or remove the dependency array.",["1749"],["1750"],["1751"],"'settingHistory' is defined but never used.","React Hook useEffect has a missing dependency: 'searchSettingHistory'. Either include it or remove the dependency array.",["1752"],"'setupPd' is defined but never used.","'getAllSensorList' is defined but never used.",["1753"],["1754"],"React Hook useEffect has a missing dependency: 'searchMtrData'. Either include it or remove the dependency array.",["1755"],"React Hook useEffect has a missing dependency: 'searchGisData'. Either include it or remove the dependency array.",["1756"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useMemo' is defined but never used.","@typescript-eslint/no-array-constructor","The array literal notation [] is preferable.","NewExpression","useLiteral",{"range":"1757","text":"1758"},"React Hook useEffect has missing dependencies: 'members.targetDate' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["1759"],"React Hook useEffect has a missing dependency: 'members'. Either include it or remove the dependency array. You can also do a functional update 'setMembers(m => ...)' if you only need 'members' in the 'setMembers' call.",["1760"],{"range":"1761","text":"1758"},["1762"],["1763"],{"range":"1764","text":"1758"},["1765"],["1766"],{"range":"1767","text":"1758"},["1768"],["1769"],{"range":"1770","text":"1758"},["1771"],["1772"],{"range":"1773","text":"1758"},["1774"],["1775"],{"range":"1776","text":"1758"},["1777"],["1778"],"no-empty-pattern","Unexpected empty array pattern.","ArrayPattern","'ModalPdLibaray' is defined but never used.","'StatusPdList' is defined but never used.","'getStatusGisSpdcEvent' is defined but never used.","'getStatusMtrOltcPdEvent' is defined but never used.","'getStatusMtrSpdcEvent' is defined but never used.","'DiagramSensorPopup' is already defined.","'isShowModalOnlyLibaray' is assigned a value but never used.","'pdeventProps' is assigned a value but never used.","'setPdeventProps' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'cmpntState.eventType' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["1779"],"React Hook useEffect has missing dependencies: 'cmpntState' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["1780"],"React Hook useEffect has missing dependencies: 'initPrpd' and 'prpsFile'. Either include them or remove the dependency array.",["1781"],"no-useless-rename","Destructuring assignment target unnecessarily renamed.","Property","unnecessarilyRenamed",{"range":"1782","text":"1783"},"'gisAllEvent' is defined but never used.","'GisAllSpdcStatus' is already defined.",["1784"],"'GisAllScbrStatus' is already defined.",["1785"],"'MtrAllBushingStatus' is already defined.",["1786"],"'GisAllEqipStatus' is already defined.",["1787"],"React Hook useEffect has a missing dependency: 'getUserUpdateList'. Either include it or remove the dependency array.",["1788"],"'SetupMtrTableModule' is already defined.",["1789"],"React Hook useEffect has a missing dependency: 'props.mtr.GIS_MTR_NUM'. Either include it or remove the dependency array. If 'setGridRowList' needs the current value of 'props.mtr.GIS_MTR_NUM', you can also switch to useReducer instead of useState and read 'props.mtr.GIS_MTR_NUM' in the reducer.",["1790"],"'SetupGisModule' is already defined.","React Hook useEffect has a missing dependency: 'props.gis.GIS_MTR_NUM'. Either include it or remove the dependency array.",["1791"],"'useRef' is defined but never used.","'getCommonEquipmentList' is defined but never used.","'getCommonSensorList' is defined but never used.","'flushSync' is defined but never used.","React Hook useEffect has a missing dependency: 'filterState'. Either include it or remove the dependency array. You can also do a functional update 'setFilterState(f => ...)' if you only need 'filterState' in the 'setFilterState' call.",["1792"],"React Hook useMemo has a missing dependency: 'props.eqipType'. Either include it or remove the dependency array.",["1793"],"React Hook useMemo has missing dependencies: 'props.sensorList' and 'props.snsrType'. Either include them or remove the dependency array.",["1794"],["1795"],["1796"],["1797"],["1798"],"'sersorDataList' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'isPageInfoUpdate' and 'searchBushingEvent'. Either include them or remove the dependency array.",["1799"],"'refresh' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'detailMap'. Either include it or remove the dependency array.",["1800"],"'setDetailMap' is assigned a value but never used.",["1801"],"React Hook useEffect has missing dependencies: 'chartOptions' and 'selectPoint'. Either include them or remove the dependency array. You can also do a functional update 'setChartOptions(c => ...)' if you only need 'chartOptions' in the 'setChartOptions' call.",["1802"],"React Hook useEffect has missing dependencies: 'isPageInfoUpdate' and 'searchCbEvent'. Either include them or remove the dependency array.",["1803"],["1804"],"React Hook useEffect has missing dependencies: 'ESpdcType.EVENT', 'isPageInfoUpdate', 'searchPdCumulate', 'searchPdEvent', and 'spdcType'. Either include them or remove the dependency array.",["1805"],["1806"],"React Hook useEffect has missing dependencies: 'isPageInfoUpdate' and 'searchOfuEvent'. Either include them or remove the dependency array.",["1807"],["1808"],"React Hook useEffect has missing dependencies: 'initNoise', 'initPrpd', 'noiseFile', and 'prpsFile'. Either include them or remove the dependency array.",["1809"],{"range":"1810","text":"1783"},"'layer_close' is defined but never used.","'clickPlay' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'isPageInfoUpdate' and 'searchDgaEvent'. Either include them or remove the dependency array.",["1811"],"React Hook useEffect has missing dependencies: 'isLegend' and 'setLegendColor'. Either include them or remove the dependency array.",["1812"],"React Hook useEffect has missing dependencies: 'isImage' and 'setChartData'. Either include them or remove the dependency array.",["1813"],"'cnt' is assigned a value but never used.","'a' is assigned a value but never used.","Unexpected empty object pattern.","ObjectPattern","'MtrAllOltcSpdcStatus' is already defined.",["1814"],"'MtrAllOltcOfuStatus' is already defined.",["1815"],"'MtrAllDgaStatus' is already defined.",["1816"],"'SetupMtrPositionModule' is already defined.","React Hook useEffect has a missing dependency: 'props.mtr.GIS_MTR_NUM'. Either include it or remove the dependency array.",["1817"],"React Hook useEffect has a missing dependency: 'getUserList'. Either include it or remove the dependency array.",["1818"],["1819"],"'MtrAllEqipStatus' is already defined.",["1820"],"'updateNowSecond' is assigned a value but never used.",["1821"],"'ModalStatusAllPrpd' is already defined.",["1822"],"'setScope1' is assigned a value but never used.","'setScope2' is assigned a value but never used.",["1823"],["1824"],"'callbackEventType' is assigned a value but never used.","'refPrpd' is assigned a value but never used.","'refLibName' is assigned a value but never used.","'refLibDesc' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.allSensorList'. Either include it or remove the dependency array.",["1825"],{"range":"1826","text":"1783"},{"range":"1827","text":"1783"},"'UserModalAdd' is already defined.","'UserModalDel' is already defined.","'UserModalUpdate' is already defined.","'nextTick' is defined but never used.","'Component' is defined but never used.","'test01State' is defined but never used.","'useThree' is defined but never used.","'Stats' is defined but never used.","'Euler' is defined but never used.","'clock' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'camera' and 'gl'. Either include them or remove the dependency array.",["1828"],"React Hook useEffect has a missing dependency: 'pdFile'. Either include it or remove the dependency array.",["1829"],"no-global-assign","no-unsafe-negation",{"desc":"1830","fix":"1831"},{"desc":"1832","fix":"1833"},{"desc":"1834","fix":"1835"},{"desc":"1830","fix":"1836"},{"desc":"1837","fix":"1838"},{"desc":"1830","fix":"1839"},{"desc":"1830","fix":"1840"},{"desc":"1830","fix":"1841"},{"desc":"1842","fix":"1843"},{"desc":"1830","fix":"1844"},{"desc":"1845","fix":"1846"},{"desc":"1847","fix":"1848"},{"desc":"1847","fix":"1849"},{"desc":"1847","fix":"1850"},{"desc":"1847","fix":"1851"},{"desc":"1847","fix":"1852"},{"desc":"1830","fix":"1853"},{"desc":"1847","fix":"1854"},{"desc":"1855","fix":"1856"},{"desc":"1847","fix":"1857"},{"desc":"1858","fix":"1859"},{"desc":"1860","fix":"1861"},{"desc":"1830","fix":"1862"},{"desc":"1830","fix":"1863"},{"desc":"1864","fix":"1865"},{"desc":"1866","fix":"1867"},[610,621],"[]",{"desc":"1868","fix":"1869"},{"desc":"1870","fix":"1871"},[606,617],{"desc":"1868","fix":"1872"},{"desc":"1873","fix":"1874"},[614,625],{"desc":"1868","fix":"1875"},{"desc":"1876","fix":"1877"},[618,629],{"desc":"1830","fix":"1878"},{"desc":"1879","fix":"1880"},[614,625],{"desc":"1868","fix":"1881"},{"desc":"1882","fix":"1883"},[617,628],{"desc":"1868","fix":"1884"},{"desc":"1885","fix":"1886"},[662,673],{"desc":"1868","fix":"1887"},{"desc":"1888","fix":"1889"},{"desc":"1890","fix":"1891"},{"desc":"1892","fix":"1893"},{"desc":"1894","fix":"1895"},[7637,7652],"target",{"desc":"1896","fix":"1897"},{"desc":"1896","fix":"1898"},{"desc":"1896","fix":"1899"},{"desc":"1900","fix":"1901"},{"desc":"1902","fix":"1903"},{"desc":"1830","fix":"1904"},{"desc":"1905","fix":"1906"},{"desc":"1907","fix":"1908"},{"desc":"1909","fix":"1910"},{"desc":"1911","fix":"1912"},{"desc":"1913","fix":"1914"},{"desc":"1909","fix":"1915"},{"desc":"1911","fix":"1916"},{"desc":"1913","fix":"1917"},{"desc":"1918","fix":"1919"},{"desc":"1920","fix":"1921"},{"desc":"1922","fix":"1923"},{"desc":"1830","fix":"1924"},{"desc":"1925","fix":"1926"},{"desc":"1927","fix":"1928"},{"desc":"1830","fix":"1929"},{"desc":"1930","fix":"1931"},{"desc":"1930","fix":"1932"},{"desc":"1933","fix":"1934"},{"desc":"1830","fix":"1935"},{"desc":"1936","fix":"1937"},[5031,5046],{"desc":"1938","fix":"1939"},{"desc":"1940","fix":"1941"},{"desc":"1942","fix":"1943"},{"desc":"1896","fix":"1944"},{"desc":"1896","fix":"1945"},{"desc":"1896","fix":"1946"},{"desc":"1947","fix":"1948"},{"desc":"1949","fix":"1950"},{"desc":"1896","fix":"1951"},{"desc":"1900","fix":"1952"},{"desc":"1930","fix":"1953"},{"desc":"1830","fix":"1954"},{"desc":"1890","fix":"1955"},{"desc":"1892","fix":"1956"},{"desc":"1957","fix":"1958"},[4436,4451],[4671,4686],{"desc":"1959","fix":"1960"},{"desc":"1961","fix":"1962"},"Update the dependencies array to be: [props]",{"range":"1963","text":"1964"},"Update the dependencies array to be: [loginInfo]",{"range":"1965","text":"1966"},"Update the dependencies array to be: [props.history, props.isAuthenticated]",{"range":"1967","text":"1968"},{"range":"1969","text":"1964"},"Update the dependencies array to be: [props.isAlwaysAlarmPopup, props.nonRecognitionList]",{"range":"1970","text":"1971"},{"range":"1972","text":"1964"},{"range":"1973","text":"1964"},{"range":"1974","text":"1964"},"Update the dependencies array to be: [props.trendMtrBushingData, zoomChart]",{"range":"1975","text":"1976"},{"range":"1977","text":"1964"},"Update the dependencies array to be: [pageInfo, searchAlarmList]",{"range":"1978","text":"1979"},"Update the dependencies array to be: [isSearchFilterUpdate, searchFilter]",{"range":"1980","text":"1981"},{"range":"1982","text":"1981"},{"range":"1983","text":"1981"},{"range":"1984","text":"1981"},{"range":"1985","text":"1981"},{"range":"1986","text":"1964"},{"range":"1987","text":"1981"},"Update the dependencies array to be: [props.dgaMaxValue, props.dgaStandard]",{"range":"1988","text":"1989"},{"range":"1990","text":"1981"},"Update the dependencies array to be: [props.trendMtrDgaData, zoomChart]",{"range":"1991","text":"1992"},"Update the dependencies array to be: [pageInfo, searchSettingHistory]",{"range":"1993","text":"1994"},{"range":"1995","text":"1964"},{"range":"1996","text":"1964"},"Update the dependencies array to be: [searchMtrData]",{"range":"1997","text":"1998"},"Update the dependencies array to be: [searchGisData]",{"range":"1999","text":"2000"},"Update the dependencies array to be: [members.targetDate, props]",{"range":"2001","text":"2002"},"Update the dependencies array to be: [members, props.reportMtrDgaData]",{"range":"2003","text":"2004"},{"range":"2005","text":"2002"},"Update the dependencies array to be: [members, props.reportGisScbrData]",{"range":"2006","text":"2007"},{"range":"2008","text":"2002"},"Update the dependencies array to be: [members, props.reportGisSpdcData]",{"range":"2009","text":"2010"},{"range":"2011","text":"1964"},"Update the dependencies array to be: [members, props.reportMtrBushingData]",{"range":"2012","text":"2013"},{"range":"2014","text":"2002"},"Update the dependencies array to be: [members, props.reportMtrSpdcData]",{"range":"2015","text":"2016"},{"range":"2017","text":"2002"},"Update the dependencies array to be: [members, props.reportMtrOltcOfuData]",{"range":"2018","text":"2019"},{"range":"2020","text":"2002"},"Update the dependencies array to be: [members, props.reportMtrOltcSpdcData]",{"range":"2021","text":"2022"},"Update the dependencies array to be: [cmpntState.eventType, props]",{"range":"2023","text":"2024"},"Update the dependencies array to be: [props.libDel, props.libAdd, props, cmpntState]",{"range":"2025","text":"2026"},"Update the dependencies array to be: [initPrpd, props.eventPrps, prpsFile]",{"range":"2027","text":"2028"},"Update the dependencies array to be: [props, props.eqipId]",{"range":"2029","text":"2030"},{"range":"2031","text":"2030"},{"range":"2032","text":"2030"},"Update the dependencies array to be: [props, selectedEqip]",{"range":"2033","text":"2034"},"Update the dependencies array to be: [getUserUpdateList, pageInfo]",{"range":"2035","text":"2036"},{"range":"2037","text":"1964"},"Update the dependencies array to be: [props.mtr.GIS_MTR_NUM, props.mtrGrid]",{"range":"2038","text":"2039"},"Update the dependencies array to be: [props.gis.GIS_MTR_NUM, props.gisMtrLocation]",{"range":"2040","text":"2041"},"Update the dependencies array to be: [filterState, location]",{"range":"2042","text":"2043"},"Update the dependencies array to be: [props.eqipType, props.equipmentList]",{"range":"2044","text":"2045"},"Update the dependencies array to be: [filterState.eqipId, props.sensorList, props.snsrType]",{"range":"2046","text":"2047"},{"range":"2048","text":"2043"},{"range":"2049","text":"2045"},{"range":"2050","text":"2047"},"Update the dependencies array to be: [props, props.defaultValue]",{"range":"2051","text":"2052"},"Update the dependencies array to be: [isPageInfoUpdate, pageInfo, searchBushingEvent]",{"range":"2053","text":"2054"},"Update the dependencies array to be: [detailMap, props.bushingSelectRow]",{"range":"2055","text":"2056"},{"range":"2057","text":"1964"},"Update the dependencies array to be: [chartOptions, props.scbrGraphData, selectPoint]",{"range":"2058","text":"2059"},"Update the dependencies array to be: [isPageInfoUpdate, pageInfo, searchCbEvent]",{"range":"2060","text":"2061"},{"range":"2062","text":"1964"},"Update the dependencies array to be: [ESpdcType.EVENT, isPageInfoUpdate, pageInfo, searchPdCumulate, searchPdEvent, spdcType]",{"range":"2063","text":"2064"},{"range":"2065","text":"2064"},"Update the dependencies array to be: [isPageInfoUpdate, pageInfo, searchOfuEvent]",{"range":"2066","text":"2067"},{"range":"2068","text":"1964"},"Update the dependencies array to be: [initNoise, initPrpd, noiseFile, props.eventPrps, props.noisePrps, prpsFile]",{"range":"2069","text":"2070"},"Update the dependencies array to be: [isPageInfoUpdate, pageInfo, searchDgaEvent]",{"range":"2071","text":"2072"},"Update the dependencies array to be: [isLegend, setLegendColor]",{"range":"2073","text":"2074"},"Update the dependencies array to be: [chartData, isImage, setChartData]",{"range":"2075","text":"2076"},{"range":"2077","text":"2030"},{"range":"2078","text":"2030"},{"range":"2079","text":"2030"},"Update the dependencies array to be: [props.gisMtrLocation, props.mtr.GIS_MTR_NUM]",{"range":"2080","text":"2081"},"Update the dependencies array to be: [getUserList, pageInfo]",{"range":"2082","text":"2083"},{"range":"2084","text":"2030"},{"range":"2085","text":"2034"},{"range":"2086","text":"2064"},{"range":"2087","text":"1964"},{"range":"2088","text":"2024"},{"range":"2089","text":"2026"},"Update the dependencies array to be: [props.allSensorList, selectedEqipId]",{"range":"2090","text":"2091"},"Update the dependencies array to be: [camera, gl]",{"range":"2092","text":"2093"},"Update the dependencies array to be: [pdFile, props.rtFile]",{"range":"2094","text":"2095"},[1063,1065],"[props]",[1110,1112],"[loginInfo]",[1215,1238],"[props.history, props.isAuthenticated]",[1690,1692],[2012,2038],"[props.isAlwaysAlarmPopup, props.nonRecognitionList]",[869,871],[1017,1019],[922,924],[8895,8922],"[props.trendMtrBushingData, zoomChart]",[1127,1129],[1205,1215],"[pageInfo, searchAlarmList]",[2017,2031],"[isSearchFilterUpdate, searchFilter]",[1991,2005],[1735,1749],[2634,2648],[2607,2621],[1800,1802],[2057,2071],[4898,4917],"[props.dgaMaxValue, props.dgaStandard]",[2552,2566],[7622,7645],"[props.trendMtrDgaData, zoomChart]",[978,988],"[pageInfo, searchSettingHistory]",[683,685],[579,581],[521,523],"[searchMtrData]",[488,490],"[searchGisData]",[750,752],"[members.targetDate, props]",[2318,2342],"[members, props.reportMtrDgaData]",[760,762],[966,991],"[members, props.reportGisScbrData]",[767,769],[3058,3083],"[members, props.reportGisSpdcData]",[767,769],[2379,2407],"[members, props.reportMtrBushingData]",[768,770],[3154,3179],"[members, props.reportMtrSpdcData]",[765,767],[2425,2453],"[members, props.reportMtrOltcOfuData]",[812,814],[3215,3244],"[members, props.reportMtrOltcSpdcData]",[1267,1269],"[cmpntState.eventType, props]",[1782,1810],"[props.libDel, props.libAdd, props, cmpntState]",[1953,1970],"[initPrpd, props.eventPrps, prpsFile]",[931,945],"[props, props.eqipId]",[599,613],[544,558],[796,810],"[props, selectedEqip]",[657,667],"[getUserUpdateList, pageInfo]",[870,872],[1525,1540],"[props.mtr.GIS_MTR_NUM, props.mtrGrid]",[2388,2410],"[props.gis.GIS_MTR_NUM, props.gisMtrLocation]",[1844,1854],"[filterState, location]",[2690,2711],"[props.eqipType, props.equipmentList]",[3224,3244],"[filterState.eqipId, props.sensorList, props.snsrType]",[1749,1759],[2840,2861],[3374,3394],[1979,1999],"[props, props.defaultValue]",[1744,1754],"[isPageInfoUpdate, pageInfo, searchBushingEvent]",[2106,2131],"[detailMap, props.bushingSelectRow]",[1349,1351],[2388,2409],"[chartOptions, props.scbrGraphData, selectPoint]",[1530,1540],"[isPageInfoUpdate, pageInfo, searchCbEvent]",[960,962],[2448,2458],"[ESpdcType.EVENT, isPageInfoUpdate, pageInfo, searchPdCumulate, searchPdEvent, spdcType]",[2466,2476],[1553,1563],"[isPageInfoUpdate, pageInfo, searchOfuEvent]",[1926,1928],[2086,2120],"[initNoise, initPrpd, noiseFile, props.eventPrps, props.noisePrps, prpsFile]",[1552,1562],"[isPageInfoUpdate, pageInfo, searchDgaEvent]",[2836,2838],"[isLegend, setLegendColor]",[2945,2956],"[chartData, isImage, setChartData]",[586,600],[579,593],[551,565],[3274,3296],"[props.gisMtrLocation, props.mtr.GIS_MTR_NUM]",[1112,1122],"[getUserList, pageInfo]",[567,581],[796,810],[2448,2458],[728,730],[815,817],[1173,1201],[1337,1353],"[props.allSensorList, selectedEqipId]",[2349,2351],"[camera, gl]",[2413,2427],"[pdFile, props.rtFile]"]
